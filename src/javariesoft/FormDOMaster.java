/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javariesoft;

import com.erv.db.DODao;
import com.erv.db.ReturdoDao;
import com.erv.db.koneksi;
import com.erv.function.JDBCAdapter;
import com.erv.function.Util;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javariesoft.JavarieSoftView.panelCool1;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;

/**
 *
 * @author TI-PNP
 */
public class FormDOMaster extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormDOMaster
     */
    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    Connection c = null;

    public FormDOMaster() {
        initComponents();
        try {
            c = koneksi.getKoneksiJ();
            if (JavarieSoftApp.groupuser.equals("Administrator")) {
                settingtombol(true, true, false, false, false);
            } else if (JavarieSoftApp.groupuser.equals("Operator")) {
                settingtombol(true, true, false, false, false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormDOMaster.class.getName()).log(Level.SEVERE, null, ex);
        }
        setSize(dim.width, dim.height - 100);
        setLocation(0, 0);
        settingHeader();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnTambah = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnRetur = new javax.swing.JButton();
        btnDeleteDO = new javax.swing.JButton();
        btnDeleteRetur = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cboTrans = new javax.swing.JComboBox();
        cboKriteria = new javax.swing.JComboBox();
        txtKriteria = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormDOMaster.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1001, 50));
        jPanel1.setLayout(null);

        btnTambah.setFont(resourceMap.getFont("btnTambah.font")); // NOI18N
        btnTambah.setIcon(resourceMap.getIcon("btnTambah.icon")); // NOI18N
        btnTambah.setText(resourceMap.getString("btnTambah.text")); // NOI18N
        btnTambah.setName("btnTambah"); // NOI18N
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });
        jPanel1.add(btnTambah);
        btnTambah.setBounds(20, 10, 90, 29);

        btnView.setFont(resourceMap.getFont("btnView.font")); // NOI18N
        btnView.setIcon(resourceMap.getIcon("btnView.icon")); // NOI18N
        btnView.setText(resourceMap.getString("btnView.text")); // NOI18N
        btnView.setName("btnView"); // NOI18N
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        jPanel1.add(btnView);
        btnView.setBounds(120, 10, 100, 29);

        btnRetur.setFont(resourceMap.getFont("btnRetur.font")); // NOI18N
        btnRetur.setIcon(resourceMap.getIcon("btnRetur.icon")); // NOI18N
        btnRetur.setText(resourceMap.getString("btnRetur.text")); // NOI18N
        btnRetur.setName("btnRetur"); // NOI18N
        btnRetur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturActionPerformed(evt);
            }
        });
        jPanel1.add(btnRetur);
        btnRetur.setBounds(230, 10, 120, 29);

        btnDeleteDO.setFont(resourceMap.getFont("btnDeleteDO.font")); // NOI18N
        btnDeleteDO.setIcon(resourceMap.getIcon("btnDeleteDO.icon")); // NOI18N
        btnDeleteDO.setText(resourceMap.getString("btnDeleteDO.text")); // NOI18N
        btnDeleteDO.setName("btnDeleteDO"); // NOI18N
        btnDeleteDO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDOActionPerformed(evt);
            }
        });
        jPanel1.add(btnDeleteDO);
        btnDeleteDO.setBounds(360, 10, 120, 29);

        btnDeleteRetur.setFont(resourceMap.getFont("btnDeleteRetur.font")); // NOI18N
        btnDeleteRetur.setIcon(resourceMap.getIcon("btnDeleteRetur.icon")); // NOI18N
        btnDeleteRetur.setText(resourceMap.getString("btnDeleteRetur.text")); // NOI18N
        btnDeleteRetur.setName("btnDeleteRetur"); // NOI18N
        btnDeleteRetur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReturActionPerformed(evt);
            }
        });
        jPanel1.add(btnDeleteRetur);
        btnDeleteRetur.setBounds(490, 10, 130, 29);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(658, 16, 60, 15);

        cboTrans.setFont(resourceMap.getFont("cboTrans.font")); // NOI18N
        cboTrans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DO", "Retur DO", "PO" }));
        cboTrans.setName("cboTrans"); // NOI18N
        cboTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTransActionPerformed(evt);
            }
        });
        jPanel1.add(cboTrans);
        cboTrans.setBounds(730, 14, 83, 21);

        cboKriteria.setFont(resourceMap.getFont("cboKriteria.font")); // NOI18N
        cboKriteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kode DO", "Pelanggan" }));
        cboKriteria.setName("cboKriteria"); // NOI18N
        jPanel1.add(cboKriteria);
        cboKriteria.setBounds(820, 14, 120, 21);

        txtKriteria.setFont(resourceMap.getFont("txtKriteria.font")); // NOI18N
        txtKriteria.setText(resourceMap.getString("txtKriteria.text")); // NOI18N
        txtKriteria.setName("txtKriteria"); // NOI18N
        txtKriteria.setPreferredSize(new java.awt.Dimension(200, 21));
        txtKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKriteriaActionPerformed(evt);
            }
        });
        jPanel1.add(txtKriteria);
        txtKriteria.setBounds(950, 14, 180, 21);

        btnFilter.setFont(resourceMap.getFont("btnFilter.font")); // NOI18N
        btnFilter.setIcon(resourceMap.getIcon("btnFilter.icon")); // NOI18N
        btnFilter.setText(resourceMap.getString("btnFilter.text")); // NOI18N
        btnFilter.setName("btnFilter"); // NOI18N
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        jPanel1.add(btnFilter);
        btnFilter.setBounds(1140, 7, 100, 35);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        filter(cboTrans.getSelectedIndex());
    }//GEN-LAST:event_btnFilterActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        try {
            // TODO add your handling code here:
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormDOMaster.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        FormDO p = new FormDO();
        p.toFront();
        panelCool1.add(p);
        p.setVisible(true);
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        try {
            if (cboTrans.getSelectedIndex() == 0) {
                FormDO p = new FormDO(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()), "view");
                p.toFront();
                panelCool1.add(p);
                p.setVisible(true);
            } else if (cboTrans.getSelectedIndex() == 1) {
                FormDO p = new FormDO(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()), "view retur");
                p.toFront();
                panelCool1.add(p);
                p.setVisible(true);
            } else if(cboTrans.getSelectedIndex()==2){
                int id =Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
                FormPO p = new FormPO(id);
                p.toFront();
                panelCool1.add(p);
                p.setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }

    }//GEN-LAST:event_btnViewActionPerformed

    private void btnReturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturActionPerformed
        // TODO add your handling code here:
        try {
            DODao delivery = new DODao();
            if (delivery.cekStatusDOClose(c, jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString())) {
                JOptionPane.showMessageDialog(null, "Retur DO Tidak Bisa Dilakukan Karena DO Ini Sudah Close..");
            } else {
                FormDO p = new FormDO(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()), "retur");
                p.toFront();
                panelCool1.add(p);
                p.setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_btnReturActionPerformed

    private void cboTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTransActionPerformed
        // TODO add your handling code here:
        jenisKriteria(cboTrans.getSelectedIndex());
    }//GEN-LAST:event_cboTransActionPerformed

    private void btnDeleteDOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDOActionPerformed
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data akan DiHapus?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            if (cboTrans.getSelectedIndex() == 0) {
                Util u = new Util();
                String tglnow = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
                String tgl[] = Util.split(tglnow, "-");
                String per = tgl[0] + "." + Integer.parseInt(tgl[1]);
                try {
                    if (!Fungsi.cekperiodeAda(c, per)) {
                        throw new Exception("Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                    if (!Fungsi.cekperiode(c, per)) {
                        throw new Exception("Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                    }
                    DODao.deleteFromDO(c, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
                    JOptionPane.showMessageDialog(this, "Delete DO Ok");
                    filter(cboTrans.getSelectedIndex());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Data yang Di Hapus Bukan Data DO");
            }
        }
    }//GEN-LAST:event_btnDeleteDOActionPerformed

    private void btnDeleteReturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReturActionPerformed
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Retur akan DiHapus?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            if (cboTrans.getSelectedIndex() == 1) {
                Util u = new Util();
                String tglnow = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
                String tgl[] = Util.split(tglnow, "-");
                String per1 = tgl[0] + "." + Integer.parseInt(tgl[1]);
                String per = "2015.1";
                try {
                    c.createStatement().execute("set autocommit true");
                    if (!Fungsi.cekperiodeAda(c, per)) {
                        throw new Exception("Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                    if (!Fungsi.cekperiode(c, per)) {
                        throw new Exception("Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                    }
                    ReturdoDao.deleteFromRETURDO(c, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
                    JOptionPane.showMessageDialog(this, "Delete Retur DO Ok");
                    filter(cboTrans.getSelectedIndex());
                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(this, ex.toString());
                } catch (Exception ex) {

                    JOptionPane.showMessageDialog(this, ex.toString());

                }
            } else {
                JOptionPane.showMessageDialog(this, "Data yang Di Hapus Bukan Data Retur DO");
            }
        }
    }//GEN-LAST:event_btnDeleteReturActionPerformed

    private void txtKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKriteriaActionPerformed
        // TODO add your handling code here:
        filter(cboTrans.getSelectedIndex());
    }//GEN-LAST:event_txtKriteriaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteDO;
    private javax.swing.JButton btnDeleteRetur;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnRetur;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cboKriteria;
    private javax.swing.JComboBox cboTrans;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtKriteria;
    // End of variables declaration//GEN-END:variables

    public void reload(int pil) throws SQLException {
        JDBCAdapter j = new JDBCAdapter(c);
        String sql = "select DO.ID, DO.KODEDO, DO.TANGGAL, PEL.NAMA, casewhen(DO.STATUS='A','Delivery Order','Close') AS STATUSDO "
                + "from DO inner join PELANGGAN PEL ON DO.KODEPELANGGAN = PEL.KODEPELANGGAN "
                + "WHERE DO.ID not in (select PORINCI.iddo from PORINCI) ";
        if (pil == 0) {
            sql += " AND DO.KODEDO LIKE '" + txtKriteria.getText() + "%'";
        }
        if (pil == 1) {
            sql += " AND lower(PEL.NAMA) LIKE '%" + txtKriteria.getText() + "%'";
        }
        j.executeQuery(sql);
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(j);
        TableColumn col = jTable1.getColumnModel().getColumn(0);
        col.setPreferredWidth(50);
        col = jTable1.getColumnModel().getColumn(1);
        col.setPreferredWidth(80);
        jTable1.setRowHeight(25);
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 14));
        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
        j.close();
    }
    
    public void reloadPO(int pil) throws SQLException {
        JDBCAdapter j = new JDBCAdapter(c);
        String sql = "select * from po "
                + "WHERE 1=1 ";
        if (pil == 0) {
            sql += " AND kodepo LIKE '" + txtKriteria.getText() + "%'";
        }
        j.executeQuery(sql);
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(j);
        TableColumn col = jTable1.getColumnModel().getColumn(0);
        col.setPreferredWidth(50);
        col = jTable1.getColumnModel().getColumn(1);
        col.setPreferredWidth(80);
        jTable1.setRowHeight(25);
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 14));
        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
        j.close();
    }

    public void reloadRetur(int pil) throws SQLException {
        JDBCAdapter j = new JDBCAdapter(c);
        String sql = "select rd.ID, rd.KODERETURDO, rd.TANGGAL, plg.NAMA, rd.KETERANGAN, rd.IDDO "
                + "from RETURDO rd inner join PELANGGAN plg on rd.KODEPELANGGAN = plg.KODEPELANGGAN "
                + "WHERE 1=1 ";
        if (pil == 0) {
            sql += " AND rd.KODERETURDO LIKE '" + txtKriteria.getText() + "%'";
        }
        if (pil == 1) {
            sql += " AND lower(plg.NAMA) LIKE '%" + txtKriteria.getText() + "%'";
        }
        j.executeQuery(sql);
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(j);
        TableColumn col = jTable1.getColumnModel().getColumn(1);
        col.setPreferredWidth(250);
        jTable1.setRowHeight(25);
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 14));
        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
        j.close();
    }

    public void settingHeader() {
        cboKriteria.setSelectedIndex(0);
        txtKriteria.setText("");
    }

    void jenisKriteria(int pil) {
        if (pil == 0) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Kode DO");
            cboKriteria.addItem("Pelanggan");
        } else if (pil == 1) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Kode Retur DO");
            cboKriteria.addItem("Pelanggan");
        } else if (pil == 2) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Kode PO");
        }
    }

    void filter(int pil) {
        try {
            // TODO add your handling code here:
            if (pil == 0) {
                settingtombol(true, true, true, false, false);
                reload(cboKriteria.getSelectedIndex());
            } else if (pil == 1) {
                settingtombol(true, true, false, false, false);
                reloadRetur(cboKriteria.getSelectedIndex());
            } else if(pil == 2){
                settingtombol(true, true, false, false, false);
                reloadPO(cboKriteria.getSelectedIndex());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormDOMaster.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void settingtombol(boolean tambah, boolean view, boolean returdo, boolean hapusdo, boolean hapusreturdo) {
        btnTambah.setVisible(tambah);
        btnView.setVisible(view);
        btnRetur.setVisible(returdo);
        btnDeleteDO.setVisible(hapusdo);
        btnDeleteRetur.setVisible(hapusreturdo);
    }

}
