/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormBarang.java
 *
 * Created on Nov 5, 2011, 10:45:26 PM
 */
package javariesoft;

import com.erv.db.barangDao;
import com.erv.db.jenisbarangDao;
import com.erv.db.kategoriDao;
import com.erv.db.koneksi;
import com.erv.db.perkiraanDao;
import com.erv.function.JDBCAdapter;
import com.erv.model.barang;
import com.erv.model.jenisbarang;
import com.erv.model.kategori;
import com.erv.model.perkiraan;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import com.eigher.db.loghistoryDao;
import com.eigher.model.loghistory;
import com.erv.db.BarangstokDao;
import com.erv.db.BarangstokbatchDao;
import com.erv.db.SatuanDao;
import com.erv.db.stokDao;
import com.erv.fungsi.DecimalFormatRenderer;
import com.erv.model.Barangstok;
import com.erv.model.Barangstokbatch;
import com.erv.model.Satuan;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;

/**
 *
 * @author erwadi
 */
public final class FormBarang extends javax.swing.JInternalFrame {

    String persediaan[] = null;
    String pendapatan[] = null;
    String HPP[] = null;
    String kodeJenis[] = null;
    barang b = null;
    barangDao dbBarang = null;
    perkiraanDao dbperk = null;
    loghistory lh;
    loghistoryDao lhdao;
    com.erv.function.Util u = new com.erv.function.Util();
    String aksilog = "";
    double modalTemp = 0;
    int stokTemp = 0;
    DecimalFormat df = new DecimalFormat("###,###,###,###");
    DecimalFormat df0 = new DecimalFormat("0.00");
    java.text.DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
    Connection c = null;

    /**
     * Creates new form FormBarang
     */
    public FormBarang() {
        initComponents();
        try {
            c = koneksi.getKoneksiJ();
            dbBarang = new barangDao();
            dbperk = new perkiraanDao();
            reloadAkun(c);
            b = new barang();
            kosong();
            lh = new loghistory();
            lhdao = new loghistoryDao();
            reloadData(c, cboAktif.getSelectedIndex());
            jScrollPane2.setSize(500, 150);
            jScrollPane2.setVisible(false);
            jScrollPane3.setSize(500, 150);
            jScrollPane3.setVisible(false);
            jScrollPane4.setVisible(false);
            jScrollPane4.setSize(500, 150);
            cboKriteria.setSelectedIndex(1);
            cbCabang.setVisible(false);
            BPindahcbg.setVisible(false);
            dcExpire.setDateFormat(d);
            cektombol();
            posisiTombol();
            isicboSatuan(c);
            cboIsiQuantity.setVisible(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtKodeBarang = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNamaBarang = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtHargaJual = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        txtCOGS = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtStok = new javax.swing.JTextField();
        Binsert = new javax.swing.JButton();
        Bedit = new javax.swing.JButton();
        Bdelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        cboKriteria = new javax.swing.JComboBox();
        txtIsiKriteria = new javax.swing.JTextField();
        Bfilter = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        kodeakun = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtIDKategori = new javax.swing.JTextField();
        txtKategori = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cboPendapatan = new javax.swing.JComboBox();
        cboSatuan = new javax.swing.JComboBox();
        txtIdMerk = new javax.swing.JTextField();
        Bupdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtJumlahData = new javax.swing.JTextField();
        CekSemua = new javax.swing.JCheckBox();
        txtMerk = new javax.swing.JTextField();
        cbCabang = new javax.swing.JCheckBox();
        BPindahcbg = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        cboStatus = new javax.swing.JComboBox();
        cboSatuan1 = new javax.swing.JComboBox();
        txtJumlah1 = new javax.swing.JTextField();
        cboSatuan2 = new javax.swing.JComboBox();
        txtJumlah2 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtKodeBatch = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        dcExpire = new datechooser.beans.DateChooserCombo();
        CheckBrgBaru = new javax.swing.JCheckBox();
        cboAktif = new javax.swing.JComboBox();
        cboIsiQuantity = new javax.swing.JComboBox();
        BAddBatchBaru = new javax.swing.JButton();
        BAktif = new javax.swing.JButton();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormBarang.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTable4.setName("jTable4"); // NOI18N
        jTable4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable4KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        panelCool1.add(jScrollPane4);
        jScrollPane4.setBounds(160, 90, 40, 20);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTable3.setName("jTable3"); // NOI18N
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        panelCool1.add(jScrollPane3);
        jScrollPane3.setBounds(140, 60, 20, 10);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setName("jTable2"); // NOI18N
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        panelCool1.add(jScrollPane2);
        jScrollPane2.setBounds(140, 210, 20, 10);

        jLabel1.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelCool1.add(jLabel1);
        jLabel1.setBounds(40, 300, 60, 15);

        txtKodeBarang.setEditable(false);
        txtKodeBarang.setFont(resourceMap.getFont("txtKodeBarang.font")); // NOI18N
        txtKodeBarang.setText(resourceMap.getString("txtKodeBarang.text")); // NOI18N
        txtKodeBarang.setName("txtKodeBarang"); // NOI18N
        txtKodeBarang.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtKodeBarangCaretUpdate(evt);
            }
        });
        txtKodeBarang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKodeBarangKeyPressed(evt);
            }
        });
        panelCool1.add(txtKodeBarang);
        txtKodeBarang.setBounds(140, 100, 200, 21);

        jLabel2.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelCool1.add(jLabel2);
        jLabel2.setBounds(40, 40, 103, 15);

        txtNamaBarang.setFont(resourceMap.getFont("txtNamaBarang.font")); // NOI18N
        txtNamaBarang.setText(resourceMap.getString("txtNamaBarang.text")); // NOI18N
        txtNamaBarang.setName("txtNamaBarang"); // NOI18N
        txtNamaBarang.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNamaBarangFocusLost(evt);
            }
        });
        txtNamaBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaBarangActionPerformed(evt);
            }
        });
        txtNamaBarang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNamaBarangKeyPressed(evt);
            }
        });
        panelCool1.add(txtNamaBarang);
        txtNamaBarang.setBounds(140, 70, 480, 21);

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        panelCool1.add(jLabel3);
        jLabel3.setBounds(40, 70, 120, 15);

        jLabel5.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        panelCool1.add(jLabel5);
        jLabel5.setBounds(40, 130, 103, 15);

        txtHargaJual.setFont(resourceMap.getFont("txtHargaJual.font")); // NOI18N
        txtHargaJual.setText(resourceMap.getString("txtHargaJual.text")); // NOI18N
        txtHargaJual.setName("txtHargaJual"); // NOI18N
        txtHargaJual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHargaJualKeyPressed(evt);
            }
        });
        panelCool1.add(txtHargaJual);
        txtHargaJual.setBounds(140, 160, 200, 21);

        jLabel6.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel6.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        panelCool1.add(jLabel6);
        jLabel6.setBounds(40, 220, 110, 15);

        jComboBox1.setFont(resourceMap.getFont("jComboBox1.font")); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });
        panelCool1.add(jComboBox1);
        jComboBox1.setBounds(810, 40, 230, 21);

        jLabel7.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        panelCool1.add(jLabel7);
        jLabel7.setBounds(680, 70, 120, 15);

        jComboBox2.setFont(resourceMap.getFont("jComboBox2.font")); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.setName("jComboBox2"); // NOI18N
        jComboBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox2KeyPressed(evt);
            }
        });
        panelCool1.add(jComboBox2);
        jComboBox2.setBounds(810, 100, 330, 21);

        jLabel8.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel8.setForeground(resourceMap.getColor("jLabel8.foreground")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        panelCool1.add(jLabel8);
        jLabel8.setBounds(680, 100, 103, 15);

        txtCOGS.setFont(resourceMap.getFont("txtCOGS.font")); // NOI18N
        txtCOGS.setText(resourceMap.getString("txtCOGS.text")); // NOI18N
        txtCOGS.setName("txtCOGS"); // NOI18N
        txtCOGS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCOGSKeyPressed(evt);
            }
        });
        panelCool1.add(txtCOGS);
        txtCOGS.setBounds(810, 130, 330, 21);

        jLabel9.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel9.setForeground(resourceMap.getColor("jLabel9.foreground")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        panelCool1.add(jLabel9);
        jLabel9.setBounds(680, 130, 103, 15);

        txtStok.setFont(resourceMap.getFont("txtStok.font")); // NOI18N
        txtStok.setText(resourceMap.getString("txtStok.text")); // NOI18N
        txtStok.setName("txtStok"); // NOI18N
        txtStok.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStokKeyPressed(evt);
            }
        });
        panelCool1.add(txtStok);
        txtStok.setBounds(810, 160, 330, 21);

        Binsert.setFont(resourceMap.getFont("Binsert.font")); // NOI18N
        Binsert.setIcon(resourceMap.getIcon("Binsert.icon")); // NOI18N
        Binsert.setText(resourceMap.getString("Binsert.text")); // NOI18N
        Binsert.setName("Binsert"); // NOI18N
        Binsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BinsertActionPerformed(evt);
            }
        });
        panelCool1.add(Binsert);
        Binsert.setBounds(40, 260, 110, 25);

        Bedit.setFont(resourceMap.getFont("Bedit.font")); // NOI18N
        Bedit.setIcon(resourceMap.getIcon("Bedit.icon")); // NOI18N
        Bedit.setText(resourceMap.getString("Bedit.text")); // NOI18N
        Bedit.setName("Bedit"); // NOI18N
        Bedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeditActionPerformed(evt);
            }
        });
        panelCool1.add(Bedit);
        Bedit.setBounds(160, 260, 110, 25);

        Bdelete.setFont(resourceMap.getFont("Bdelete.font")); // NOI18N
        Bdelete.setIcon(resourceMap.getIcon("Bdelete.icon")); // NOI18N
        Bdelete.setText(resourceMap.getString("Bdelete.text")); // NOI18N
        Bdelete.setName("Bdelete"); // NOI18N
        Bdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BdeleteActionPerformed(evt);
            }
        });
        panelCool1.add(Bdelete);
        Bdelete.setBounds(280, 260, 110, 25);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 340, 1180, 310);

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        panelCool1.add(jLabel4);
        jLabel4.setBounds(680, 300, 90, 15);

        cboKriteria.setFont(resourceMap.getFont("cboKriteria.font")); // NOI18N
        cboKriteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kode", "Nama", "Merk", "Quantity" }));
        cboKriteria.setName("cboKriteria"); // NOI18N
        cboKriteria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboKriteriaItemStateChanged(evt);
            }
        });
        panelCool1.add(cboKriteria);
        cboKriteria.setBounds(200, 300, 110, 21);

        txtIsiKriteria.setFont(resourceMap.getFont("txtIsiKriteria.font")); // NOI18N
        txtIsiKriteria.setText(resourceMap.getString("txtIsiKriteria.text")); // NOI18N
        txtIsiKriteria.setName("txtIsiKriteria"); // NOI18N
        txtIsiKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIsiKriteriaActionPerformed(evt);
            }
        });
        panelCool1.add(txtIsiKriteria);
        txtIsiKriteria.setBounds(320, 300, 230, 22);

        Bfilter.setFont(resourceMap.getFont("Bfilter.font")); // NOI18N
        Bfilter.setIcon(resourceMap.getIcon("Bfilter.icon")); // NOI18N
        Bfilter.setText(resourceMap.getString("Bfilter.text")); // NOI18N
        Bfilter.setName("Bfilter"); // NOI18N
        Bfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BfilterActionPerformed(evt);
            }
        });
        panelCool1.add(Bfilter);
        Bfilter.setBounds(560, 300, 100, 25);

        jSeparator1.setName("jSeparator1"); // NOI18N
        panelCool1.add(jSeparator1);
        jSeparator1.setBounds(40, 290, 1140, 10);

        kodeakun.setEditable(false);
        kodeakun.setFont(resourceMap.getFont("kodeakun.font")); // NOI18N
        kodeakun.setText(resourceMap.getString("kodeakun.text")); // NOI18N
        kodeakun.setName("kodeakun"); // NOI18N
        panelCool1.add(kodeakun);
        kodeakun.setBounds(1050, 40, 90, 21);

        jLabel10.setFont(resourceMap.getFont("jLabel10.font")); // NOI18N
        jLabel10.setForeground(resourceMap.getColor("jLabel10.foreground")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        panelCool1.add(jLabel10);
        jLabel10.setBounds(40, 160, 103, 15);

        txtIDKategori.setEditable(false);
        txtIDKategori.setFont(resourceMap.getFont("txtIDKategori.font")); // NOI18N
        txtIDKategori.setText(resourceMap.getString("txtIDKategori.text")); // NOI18N
        txtIDKategori.setName("txtIDKategori"); // NOI18N
        panelCool1.add(txtIDKategori);
        txtIDKategori.setBounds(540, 190, 80, 21);

        txtKategori.setFont(resourceMap.getFont("txtKategori.font")); // NOI18N
        txtKategori.setText(resourceMap.getString("txtKategori.text")); // NOI18N
        txtKategori.setName("txtKategori"); // NOI18N
        txtKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKategoriActionPerformed(evt);
            }
        });
        txtKategori.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKategoriKeyPressed(evt);
            }
        });
        panelCool1.add(txtKategori);
        txtKategori.setBounds(140, 190, 395, 21);

        jLabel11.setFont(resourceMap.getFont("jLabel11.font")); // NOI18N
        jLabel11.setForeground(resourceMap.getColor("jLabel11.foreground")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        panelCool1.add(jLabel11);
        jLabel11.setBounds(40, 100, 103, 15);

        jLabel12.setFont(resourceMap.getFont("jLabel12.font")); // NOI18N
        jLabel12.setForeground(resourceMap.getColor("jLabel12.foreground")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        panelCool1.add(jLabel12);
        jLabel12.setBounds(680, 40, 120, 15);

        cboPendapatan.setFont(resourceMap.getFont("cboPendapatan.font")); // NOI18N
        cboPendapatan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboPendapatan.setName("cboPendapatan"); // NOI18N
        cboPendapatan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cboPendapatanKeyPressed(evt);
            }
        });
        panelCool1.add(cboPendapatan);
        cboPendapatan.setBounds(810, 70, 330, 21);

        cboSatuan.setFont(resourceMap.getFont("cboSatuan.font")); // NOI18N
        cboSatuan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pcs", "Ktk", "Buah", "Kit", "Box", "Btl", "Vial", "Gln", "Tube", "Set", "Unit", "Roll", "Lsn", "Psg", "Zak", "Lbr" }));
        cboSatuan.setName("cboSatuan"); // NOI18N
        cboSatuan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cboSatuanKeyPressed(evt);
            }
        });
        panelCool1.add(cboSatuan);
        cboSatuan.setBounds(140, 130, 120, 21);

        txtIdMerk.setEditable(false);
        txtIdMerk.setFont(resourceMap.getFont("txtIdMerk.font")); // NOI18N
        txtIdMerk.setText(resourceMap.getString("txtIdMerk.text")); // NOI18N
        txtIdMerk.setName("txtIdMerk"); // NOI18N
        panelCool1.add(txtIdMerk);
        txtIdMerk.setBounds(540, 40, 80, 21);

        Bupdate.setFont(resourceMap.getFont("Bupdate.font")); // NOI18N
        Bupdate.setIcon(resourceMap.getIcon("Bupdate.icon")); // NOI18N
        Bupdate.setText(resourceMap.getString("Bupdate.text")); // NOI18N
        Bupdate.setName("Bupdate"); // NOI18N
        Bupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BupdateActionPerformed(evt);
            }
        });
        panelCool1.add(Bupdate);
        Bupdate.setBounds(400, 260, 110, 25);

        btnCancel.setFont(resourceMap.getFont("btnCancel.font")); // NOI18N
        btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        panelCool1.add(btnCancel);
        btnCancel.setBounds(920, 260, 110, 25);

        btnKeluar.setFont(resourceMap.getFont("btnKeluar.font")); // NOI18N
        btnKeluar.setIcon(resourceMap.getIcon("btnKeluar.icon")); // NOI18N
        btnKeluar.setText(resourceMap.getString("btnKeluar.text")); // NOI18N
        btnKeluar.setName("btnKeluar"); // NOI18N
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        panelCool1.add(btnKeluar);
        btnKeluar.setBounds(1040, 260, 130, 25);

        jLabel13.setFont(resourceMap.getFont("jLabel13.font")); // NOI18N
        jLabel13.setForeground(resourceMap.getColor("jLabel13.foreground")); // NOI18N
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        panelCool1.add(jLabel13);
        jLabel13.setBounds(680, 220, 103, 15);

        txtJumlahData.setFont(resourceMap.getFont("txtJumlahData.font")); // NOI18N
        txtJumlahData.setText(resourceMap.getString("txtJumlahData.text")); // NOI18N
        txtJumlahData.setName("txtJumlahData"); // NOI18N
        panelCool1.add(txtJumlahData);
        txtJumlahData.setBounds(770, 300, 80, 21);

        CekSemua.setFont(resourceMap.getFont("CekSemua.font")); // NOI18N
        CekSemua.setText(resourceMap.getString("CekSemua.text")); // NOI18N
        CekSemua.setName("CekSemua"); // NOI18N
        panelCool1.add(CekSemua);
        CekSemua.setBounds(860, 300, 90, 23);

        txtMerk.setFont(resourceMap.getFont("txtMerk.font")); // NOI18N
        txtMerk.setText(resourceMap.getString("txtMerk.text")); // NOI18N
        txtMerk.setName("txtMerk"); // NOI18N
        txtMerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMerkActionPerformed(evt);
            }
        });
        txtMerk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMerkKeyPressed(evt);
            }
        });
        panelCool1.add(txtMerk);
        txtMerk.setBounds(140, 40, 395, 20);

        cbCabang.setFont(resourceMap.getFont("cbCabang.font")); // NOI18N
        cbCabang.setText(resourceMap.getString("cbCabang.text")); // NOI18N
        cbCabang.setName("cbCabang"); // NOI18N
        panelCool1.add(cbCabang);
        cbCabang.setBounds(1080, 390, 80, 23);

        BPindahcbg.setFont(resourceMap.getFont("BPindahcbg.font")); // NOI18N
        BPindahcbg.setText(resourceMap.getString("BPindahcbg.text")); // NOI18N
        BPindahcbg.setName("BPindahcbg"); // NOI18N
        BPindahcbg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPindahcbgActionPerformed(evt);
            }
        });
        panelCool1.add(BPindahcbg);
        BPindahcbg.setBounds(970, 380, 90, 32);

        jLabel14.setFont(resourceMap.getFont("jLabel14.font")); // NOI18N
        jLabel14.setForeground(resourceMap.getColor("jLabel14.foreground")); // NOI18N
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N
        panelCool1.add(jLabel14);
        jLabel14.setBounds(680, 160, 103, 15);

        cboStatus.setFont(resourceMap.getFont("cboStatus.font")); // NOI18N
        cboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aktif", "Non Aktif" }));
        cboStatus.setName("cboStatus"); // NOI18N
        panelCool1.add(cboStatus);
        cboStatus.setBounds(810, 190, 150, 21);

        cboSatuan1.setFont(resourceMap.getFont("cboSatuan1.font")); // NOI18N
        cboSatuan1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pcs", "Ktk", "Buah", "Kit", "Box", "Btl", "Vial", "Gln", "Tube", "Set", "Unit", "Roll", "Lsn", "Psg", "Zak", "Lbr" }));
        cboSatuan1.setName("cboSatuan1"); // NOI18N
        cboSatuan1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cboSatuan1KeyPressed(evt);
            }
        });
        panelCool1.add(cboSatuan1);
        cboSatuan1.setBounds(266, 130, 120, 22);

        txtJumlah1.setFont(resourceMap.getFont("txtJumlah1.font")); // NOI18N
        txtJumlah1.setText(resourceMap.getString("txtJumlah1.text")); // NOI18N
        txtJumlah1.setName("txtJumlah1"); // NOI18N
        panelCool1.add(txtJumlah1);
        txtJumlah1.setBounds(390, 130, 50, 21);

        cboSatuan2.setFont(resourceMap.getFont("cboSatuan2.font")); // NOI18N
        cboSatuan2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pcs", "Ktk", "Buah", "Kit", "Box", "Btl", "Vial", "Gln", "Tube", "Set", "Unit", "Roll", "Lsn", "Psg", "Zak", "Lbr" }));
        cboSatuan2.setName("cboSatuan2"); // NOI18N
        cboSatuan2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cboSatuan2KeyPressed(evt);
            }
        });
        panelCool1.add(cboSatuan2);
        cboSatuan2.setBounds(446, 130, 120, 22);

        txtJumlah2.setFont(resourceMap.getFont("txtJumlah2.font")); // NOI18N
        txtJumlah2.setText(resourceMap.getString("txtJumlah2.text")); // NOI18N
        txtJumlah2.setName("txtJumlah2"); // NOI18N
        panelCool1.add(txtJumlah2);
        txtJumlah2.setBounds(570, 130, 50, 21);

        jLabel15.setFont(resourceMap.getFont("jLabel15.font")); // NOI18N
        jLabel15.setForeground(resourceMap.getColor("jLabel15.foreground")); // NOI18N
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N
        panelCool1.add(jLabel15);
        jLabel15.setBounds(40, 190, 110, 15);

        txtKodeBatch.setFont(resourceMap.getFont("txtKodeBatch.font")); // NOI18N
        txtKodeBatch.setText(resourceMap.getString("txtKodeBatch.text")); // NOI18N
        txtKodeBatch.setName("txtKodeBatch"); // NOI18N
        txtKodeBatch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKodeBatchKeyPressed(evt);
            }
        });
        panelCool1.add(txtKodeBatch);
        txtKodeBatch.setBounds(140, 220, 330, 21);

        jLabel16.setFont(resourceMap.getFont("jLabel16.font")); // NOI18N
        jLabel16.setForeground(resourceMap.getColor("jLabel16.foreground")); // NOI18N
        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        panelCool1.add(jLabel16);
        jLabel16.setBounds(680, 190, 103, 15);

        dcExpire.setFieldFont(resourceMap.getFont("dcExpire.dch_combo_fieldFont")); // NOI18N
        panelCool1.add(dcExpire);
        dcExpire.setBounds(810, 220, 150, 20);

        CheckBrgBaru.setFont(resourceMap.getFont("CheckBrgBaru.font")); // NOI18N
        CheckBrgBaru.setText(resourceMap.getString("CheckBrgBaru.text")); // NOI18N
        CheckBrgBaru.setName("CheckBrgBaru"); // NOI18N
        panelCool1.add(CheckBrgBaru);
        CheckBrgBaru.setBounds(350, 100, 110, 23);

        cboAktif.setFont(resourceMap.getFont("cboAktif.font")); // NOI18N
        cboAktif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aktif", "Non Aktif" }));
        cboAktif.setName("cboAktif"); // NOI18N
        panelCool1.add(cboAktif);
        cboAktif.setBounds(110, 300, 78, 22);

        cboIsiQuantity.setFont(resourceMap.getFont("cboIsiQuantity.font")); // NOI18N
        cboIsiQuantity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Besar Dari", "Sama Dengan", "Kecil Dari" }));
        cboIsiQuantity.setName("cboIsiQuantity"); // NOI18N
        panelCool1.add(cboIsiQuantity);
        cboIsiQuantity.setBounds(320, 320, 120, 21);

        BAddBatchBaru.setFont(resourceMap.getFont("BAddBatchBaru.font")); // NOI18N
        BAddBatchBaru.setIcon(resourceMap.getIcon("BAddBatchBaru.icon")); // NOI18N
        BAddBatchBaru.setText(resourceMap.getString("BAddBatchBaru.text")); // NOI18N
        BAddBatchBaru.setName("BAddBatchBaru"); // NOI18N
        BAddBatchBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAddBatchBaruActionPerformed(evt);
            }
        });
        panelCool1.add(BAddBatchBaru);
        BAddBatchBaru.setBounds(520, 260, 160, 25);

        BAktif.setFont(resourceMap.getFont("BAktif.font")); // NOI18N
        BAktif.setIcon(resourceMap.getIcon("BAktif.icon")); // NOI18N
        BAktif.setText(resourceMap.getString("BAktif.text")); // NOI18N
        BAktif.setName("BAktif"); // NOI18N
        BAktif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAktifActionPerformed(evt);
            }
        });
        panelCool1.add(BAktif);
        BAktif.setBounds(690, 260, 120, 25);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 1217, 697);
    }// </editor-fold>//GEN-END:initComponents

private void BinsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BinsertActionPerformed

    try {
        // TODO add your handling code here:
        c.createStatement().execute("set autocommit false");
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Disimpan?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            boolean cekhrgcogs = false;
            boolean cekstok = false;
            barang bcari = dbBarang.getDetails(c, b.getKODEBARANG());
            barang bcaribrg = dbBarang.getDetails(c, txtKodeBarang.getText());
            if (bcari == null) {
                if ((getTextDouble(txtCOGS) < 0) || (getTextDouble(txtCOGS) > 0)) {
                    cekhrgcogs = true;
                }
                if (getTextInteger(txtStok) > 0) {
                    cekstok = true;
                }
            }else if(bcaribrg==null){
                if ((getTextDouble(txtCOGS) < 0) || (getTextDouble(txtCOGS) > 0)) {
                    cekhrgcogs = true;
                }
                if (getTextInteger(txtStok) > 0) {
                    cekstok = true;
                }
            }

            if ((txtIdMerk.getText().equals("")) || (txtKodeBarang.getText().equals("")) || (txtNamaBarang.getText().equals("")) || (txtHargaJual.getText().equals("")) || (txtIDKategori.getText().equals("")) || (kodeakun.getText().equals("")) || (txtCOGS.getText().equals("")) || (txtStok.getText().equals(""))) {
                JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
                txtIdMerk.requestFocus();
//            } else if (getTextInteger(txtCOGS) <= 0) {
//                JOptionPane.showMessageDialog(null, "Harga Modal Tidak Boleh Nol.,Masukkan Harga Modal Untuk Barang Ini.. !!");
//                txtCOGS.requestFocus();
            } else if (cekhrgcogs) {
                JOptionPane.showMessageDialog(null, "Untuk Barang Baru,Harga Modal Harus Diisi Nilai Nol,Selanjutnya Silahkan Lakukan Transaksi Pembelian atau Koreksi Stok Untuk Mengisi Nilai Baru Stok...!!");
                txtCOGS.setText("0");
                txtCOGS.requestFocus();
            } else if (cekstok) {
                JOptionPane.showMessageDialog(null, "Untuk Barang Baru,Stok Harus Diisi Nilai Nol,Selanjutnya Silahkan Lakukan Koreksi Stok Untuk Mengisi Nilai Baru Stok...!!");
                txtStok.setText("0");
                txtStok.requestFocus();
            } else if (barangDao.cekBarangBatch(c, txtKodeBarang.getText(), txtKodeBatch.getText()) == true) {
                JOptionPane.showMessageDialog(null, "Kode Batch Ini sudah Ada..!!");
                txtKodeBatch.requestFocus();
            } else {
                aksilog = "Insert";
                prosesUpdate(c, 0);
                prosesUpdateLog(c);
                reloadData(c, cboAktif.getSelectedIndex());
                cektombol();
                cekaktiftext();
                kosong();
                txtIdMerk.requestFocus();
                cekhrgcogs = false;
                cekstok = false;
                c.commit();
            }
        } else {
            txtIdMerk.requestFocus();
        }
    } catch (SQLException ex) {
        try {
            c.rollback();
        } catch (SQLException ex1) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex1);
        }
        JOptionPane.showMessageDialog(this, "Rollback :" + ex.getMessage());
    }
}//GEN-LAST:event_BinsertActionPerformed

private void BfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BfilterActionPerformed

    try {
        // TODO add your handling code here:
        reloadData(c, cboAktif.getSelectedIndex());
    } catch (Exception ex) {
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_BfilterActionPerformed

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    try {
        // TODO add your handling code here:
        if (jTable1.getValueAt(jTable1.getSelectedRow(), 2) != null) {
            txtKodeBatch.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
        } else {
            txtKodeBatch.setText("");
        }
        if (jTable1.getValueAt(jTable1.getSelectedRow(), 3) != null) {
            Calendar cld = Calendar.getInstance();
            cld.setTime(d.parse(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()));
            dcExpire.setSelectedDate(cld);
        }
        ceknonaktiftext();
        cekaktifbarang(c, jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        tampilData(c, jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        cektombol();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    } catch (ClassNotFoundException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    } catch (ParseException ex) {
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jTable1MouseClicked

private void BeditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeditActionPerformed

    try {
        // TODO add your handling code here:
        c.createStatement().execute("set autocommit true");
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Diedit?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            Barangstok bs = BarangstokDao.getDetailKodeBarang(c, txtKodeBarang.getText());
            if ((txtIdMerk.getText().equals("")) || (txtKodeBarang.getText().equals("")) || (txtNamaBarang.getText().equals("")) || (txtHargaJual.getText().equals("")) || (txtIDKategori.getText().equals("")) || (kodeakun.getText().equals("")) || (txtCOGS.getText().equals("")) || (txtStok.getText().equals(""))) {
                JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
                txtIdMerk.requestFocus();
            }else if(cboStatus.getSelectedIndex()==1 && bs.getSTOK() > 0) {
                JOptionPane.showMessageDialog(null, "Data Tidak Boleh Dinonaktifkan, Karena Stok Masih Ada.. !");
                txtIdMerk.requestFocus();
            }else {
                if (stokDao.cekBarang(c, txtKodeBarang.getText()) == true) {
                    if (modalTemp != getTextDouble(txtCOGS) || stokTemp != getTextDouble(txtStok)) {
                        JOptionPane.showMessageDialog(null, "Stok dan Harga Modal Tidak boleh Di edit,Karena Transaksi sudah dilakukan untuk barang ini.. !" + modalTemp + "-" + stokTemp);
                        txtCOGS.setText("" + modalTemp);
                        txtStok.setText("" + stokTemp);
                        txtStok.requestFocus();
                    } else {
                        aksilog = "Update";
                        prosesUpdate(c, 1);
                        prosesUpdateLog(c);
                        reloadData(c, cboAktif.getSelectedIndex());
                        cektombol();
                        cekaktiftext();
                        kosong();
                    }
                } else {
                    if (modalTemp != getTextDouble(txtCOGS) || stokTemp != getTextDouble(txtStok)) {
                        JOptionPane.showMessageDialog(null, "Edit Stok dan Harga Modal Hanya Boleh Dilakukan dari Menu Koreksi Stok... !");
                        txtCOGS.setText("" + modalTemp);
                        txtStok.setText("" + stokTemp);
                        txtStok.requestFocus();
                    } else {
                        aksilog = "Update";
                        prosesUpdate(c, 1);
                        prosesUpdateLog(c);
                        reloadData(c, cboAktif.getSelectedIndex());
                        cektombol();
                        kosong();
                    }
                }
                txtIdMerk.requestFocus();
            }
        } else {
            txtIdMerk.requestFocus();
        }
    } catch (SQLException ex) {
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_BeditActionPerformed

private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
// TODO add your handling code here:
    kodeakun.setText(getKodeAkun());
}//GEN-LAST:event_jComboBox1ActionPerformed

private void BdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BdeleteActionPerformed

    try {
        // TODO add your handling code here:
        c.createStatement().execute("set autocommit false");
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            if (stokDao.cekBarang(c, txtKodeBarang.getText()) == true) {
                JOptionPane.showMessageDialog(null, "Barang Ini Tidak Boleh Dihapus,Transaksi Terhadap Barang Ini Sudah Dilakukan!");
                txtNamaBarang.requestFocus();
            } else {
                aksilog = "Delete";
                Barangstok bs = BarangstokDao.getDetailKodeBarang(c, txtKodeBarang.getText());
                BarangstokbatchDao.deleteFromBARANGSTOK(c, bs.getID());
                BarangstokDao.deleteFromBARANGSTOK(c, bs.getID());
                dbBarang.deleteDetails(c, txtKodeBarang.getText());
                prosesUpdateLog(c);
                reloadData(c, cboAktif.getSelectedIndex());
                cektombol();
                cekaktiftext();
                kosong();
                c.commit();
            }
            txtIdMerk.requestFocus();
        } else {
            txtIdMerk.requestFocus();
        }
    } catch (SQLException ex) {
        try {
            c.rollback();
        } catch (SQLException ex1) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex1);
        }
    } catch (ClassNotFoundException ex) {
        try {
            c.rollback();
        } catch (SQLException ex1) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex1);
        }
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_BdeleteActionPerformed

private void txtKodeBarangCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtKodeBarangCaretUpdate
// TODO add your handling code here:
    kodeakun.setText(getKodeAkun());
}//GEN-LAST:event_txtKodeBarangCaretUpdate

private void txtKodeBarangKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKodeBarangKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        txtNamaBarang.requestFocus();
    }
}//GEN-LAST:event_txtKodeBarangKeyPressed

private void txtNamaBarangKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNamaBarangKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        try {
            JDBCAdapter j = new JDBCAdapter(c);
            j.executeQuery("select KODEBARANG, NAMABARANG from barang where lower(namabarang) like '%" + txtNamaBarang.getText().toLowerCase() + "%' ORDER BY KODEBARANG");
            if (CheckBrgBaru.isSelected()) {
                jScrollPane4.setVisible(false);
                txtKodeBarang.setText(barangDao.getID(c));
                cboSatuan.requestFocus();
            } else {
                if (j.getRowCount() > 0) {
                    jScrollPane4.getViewport().remove(jTable4);
                    jTable4 = new JTable(j);
                    jTable4.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                            jTable4KeyPressed(evt);
                        }
                    });
                    jScrollPane4.getViewport().add(jTable4);
                    jScrollPane4.setVisible(true);
                    jScrollPane4.repaint();
                } else {
                    jScrollPane4.setVisible(false);
                    txtKodeBarang.setText(barangDao.getID(c));
                    cboSatuan.requestFocus();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        jScrollPane4.setVisible(false);
    } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
        jTable4.requestFocus();
        jTable4.getSelectionModel().setSelectionInterval(0, 0);
    }
}//GEN-LAST:event_txtNamaBarangKeyPressed

private void txtHargaJualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHargaJualKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        txtKategori.requestFocus();
    }
}//GEN-LAST:event_txtHargaJualKeyPressed

private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        cboPendapatan.requestFocus();
    }
}//GEN-LAST:event_jComboBox1KeyPressed

private void cboPendapatanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboPendapatanKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        jComboBox2.requestFocus();
    }
}//GEN-LAST:event_cboPendapatanKeyPressed

private void jComboBox2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox2KeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        txtCOGS.requestFocus();
    }
}//GEN-LAST:event_jComboBox2KeyPressed

private void txtCOGSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCOGSKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        txtStok.requestFocus();
    }
}//GEN-LAST:event_txtCOGSKeyPressed

private void txtStokKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStokKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        Binsert.requestFocus();
    }
}//GEN-LAST:event_txtStokKeyPressed

private void txtNamaBarangFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNamaBarangFocusLost

}//GEN-LAST:event_txtNamaBarangFocusLost

private void txtNamaBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaBarangActionPerformed

}//GEN-LAST:event_txtNamaBarangActionPerformed

private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        try {
            kategori s = kategoriDao.getDetails(c, jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString());
            txtIDKategori.setText(s.getIDKATEGORI());
            txtKategori.setText(s.getKATEGORI());
            jScrollPane2.setVisible(false);
            txtKodeBatch.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jTable2KeyPressed

private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        try {
            jenisbarang s = jenisbarangDao.getDetails(c, jTable3.getValueAt(jTable3.getSelectedRow(), 0).toString());
            txtIdMerk.setText(s.getID());
            txtMerk.setText(s.getJENIS());
            jScrollPane3.setVisible(false);
            txtNamaBarang.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jTable3KeyPressed

private void BupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BupdateActionPerformed
// TODO add your handling code here:
    Statement sf;
    try {
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Diedit?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            if ((txtIdMerk.getText().equals("")) || (txtKodeBarang.getText().equals("")) || (txtNamaBarang.getText().equals("")) || (txtHargaJual.getText().equals("")) || (txtIDKategori.getText().equals("")) || (kodeakun.getText().equals("")) || (txtCOGS.getText().equals("")) || (txtStok.getText().equals(""))) {
                JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
                txtIdMerk.requestFocus();
            } else {
                aksilog = "Update";
                sf = c.createStatement();
//                sf.execute("UPDATE BARANG SET NAMABARANG='" + txtNamaBarang.getText() + "',IDJENIS='" + txtIdMerk.getText() + "',IDKATEGORI='" + txtIDKategori.getText() + "' where KODEBARANG='" + txtKodeBarang.getText() + "'");
                sf.execute("UPDATE BARANG SET NAMABARANG='" + txtNamaBarang.getText() + "',IDJENIS='" + txtIdMerk.getText() + "',IDKATEGORI='" + txtIDKategori.getText() + "' where KODEBARANG='" + txtKodeBarang.getText() + "'");
                prosesUpdateLog(c);
                JOptionPane.showMessageDialog(this, "Update Ok");
                reloadData(c, cboAktif.getSelectedIndex());
                cektombol();
                cekaktiftext();
                kosong();
                txtIdMerk.requestFocus();
            }
        } else {
            txtIdMerk.requestFocus();
        }
    } catch (SQLException ex) {
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_BupdateActionPerformed

private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
// TODO add your handling code here:
    kosong();
    cektombol();
    cekaktiftext();
    txtIdMerk.requestFocus();
}//GEN-LAST:event_btnCancelActionPerformed

private void cboSatuanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboSatuanKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        txtHargaJual.requestFocus();
    }
}//GEN-LAST:event_cboSatuanKeyPressed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void txtIsiKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIsiKriteriaActionPerformed

        try {
            // TODO add your handling code here:
            reloadData(c, cboAktif.getSelectedIndex());
        } catch (Exception ex) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtIsiKriteriaActionPerformed

    private void BPindahcbgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPindahcbgActionPerformed
//        try {
        // TODO add your handling code here:
//            Connection cb = koneksi.getKoneksiCabang();
//            barang br = new barangDao(cb).getDetails(txtKodeBarang.getText());
//            if (br.getKODEBARANG() == null) {
//                kategori k = kategoriDao.getDetails(cb, b.getIDKATEGORI());
//                if (k.getIDKATEGORI() == null) {
//                    k.setIDKATEGORI(b.getIDKATEGORI());
//                    k.setKATEGORI(txtKategori.getText());
//                    kategoriDao.insertIntoKATEGORI(cb, k);
//                }
//                jenisbarang j = jenisbarangDao.getDetails(cb, b.getJENISBARANG());
//                if (j.getID() == null) {
//                    j.setID(b.getJENISBARANG());
//                    j.setJENIS(txtMerk.getText());
//                    jenisbarangDao.insertIntoJENISBARANG(cb, j);
//                }
//                //b.setCOGS(0);
//                b.setSTOK(0);
//                boolean stat = new barangDao(cb).insert(b);
//                JOptionPane.showMessageDialog(null, "Entri Barang Di Cabang Ok");
//            } else {
//                JOptionPane.showMessageDialog(null, "Barang Di Cabang Sudah ada");
//            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_BPindahcbgActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing

    }//GEN-LAST:event_formInternalFrameClosing

    private void cboSatuan1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboSatuan1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboSatuan1KeyPressed

    private void cboSatuan2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cboSatuan2KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboSatuan2KeyPressed

    private void jTable4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable4KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                ceknonaktiftext();
                tampilData(c, jTable4.getValueAt(jTable4.getSelectedRow(), 0).toString());
                jScrollPane4.setVisible(false);
                cboSatuan.requestFocus();
            } catch (SQLException ex) {
                Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            jScrollPane4.setVisible(false);
            txtNamaBarang.requestFocus();
        }
    }//GEN-LAST:event_jTable4KeyPressed

    private void txtKodeBatchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKodeBatchKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            jComboBox1.requestFocus();
        }
    }//GEN-LAST:event_txtKodeBatchKeyPressed

    private void cboKriteriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboKriteriaItemStateChanged
        // TODO add your handling code here:
        if (cboKriteria.getSelectedIndex() == 3) {
            cboIsiQuantity.setVisible(true);
            cboIsiQuantity.setSize(100, 22);
            cboIsiQuantity.setLocation(320, 300);
            txtIsiKriteria.setSize(120, 23);
            txtIsiKriteria.setLocation(430, 300);
            txtIsiKriteria.setText("0");
        } else {
            cboIsiQuantity.setVisible(false);
            txtIsiKriteria.setSize(230, 22);
            txtIsiKriteria.setLocation(320, 300);
            txtIsiKriteria.setText("");
        }
    }//GEN-LAST:event_cboKriteriaItemStateChanged

    private void BAddBatchBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAddBatchBaruActionPerformed
        // TODO add your handling code here:
        Statement stb;
    try {
        int x = JOptionPane.showConfirmDialog(this, "Tambahkan Batch Baru ?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            if ((txtIdMerk.getText().equals("")) || (txtKodeBarang.getText().equals("")) || (txtNamaBarang.getText().equals("")) || (txtHargaJual.getText().equals("")) || (txtIDKategori.getText().equals("")) || (kodeakun.getText().equals("")) || (txtCOGS.getText().equals("")) || (txtStok.getText().equals(""))) {
                JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
                txtIdMerk.requestFocus();
            }else if (barangDao.cekBarangBatch(c, txtKodeBarang.getText(), txtKodeBatch.getText()) == true) {
                JOptionPane.showMessageDialog(null, "Kode Batch Ini sudah Ada..!!");
                txtKodeBatch.requestFocus(); 
            }else {
                aksilog = "AddBatch";
//                stb = c.createStatement();
//////                sf.execute("UPDATE BARANG SET NAMABARANG='" + txtNamaBarang.getText() + "',IDJENIS='" + txtIdMerk.getText() + "',IDKATEGORI='" + txtIDKategori.getText() + "' where KODEBARANG='" + txtKodeBarang.getText() + "'");
////                stb.execute("UPDATE BARANG SET NAMABARANG='" + txtNamaBarang.getText() + "',IDJENIS='" + txtIdMerk.getText() + "' where KODEBARANG='" + txtKodeBarang.getText() + "'");
                Barangstok bs = BarangstokDao.getDetailKodeBarang(c, b.getKODEBARANG());
                if (!txtKodeBatch.getText().equals("")) {
                    Barangstokbatch bsb = BarangstokbatchDao.getDetailKodeBatchID(c, bs.getID());
                    if (bsb == null) {
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(bs.getID());
                        bsb.setKODEBATCH("-");
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(bs.getSTOK());
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(bs.getID());
                        bsb.setKODEBATCH(txtKodeBatch.getText());
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(0);
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
                    } else {
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(bs.getID());
                        bsb.setKODEBATCH(txtKodeBatch.getText());
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(0);
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
                    }
                }
                prosesUpdateLog(c);
                JOptionPane.showMessageDialog(this, "Add Batch Baru Berhasil ..!");
                reloadData(c, cboAktif.getSelectedIndex());
                cektombol();
                cekaktiftext();
                kosong();
                txtIdMerk.requestFocus();
            }
        } else {
            txtIdMerk.requestFocus();
        }
    } catch (SQLException ex) {
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_BAddBatchBaruActionPerformed

    private void txtMerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMerkActionPerformed
        // TODO add your handling code here:
        try {
        // TODO add your handling code here:
            jScrollPane3.setVisible(true);
            JDBCAdapter ja = new JDBCAdapter(c);
            ja.executeQuery("select * from JENISBARANG where ID like '" + txtMerk.getText() + "%' or lower(JENIS) like '%" + txtMerk.getText().toLowerCase() + "%'");
            jScrollPane3.getViewport().remove(jTable3);
            jTable3 = new JTable(ja);
            jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jTable3KeyPressed(evt);
                }
            });
            jTable3.setFont(new Font("Tahoma", Font.BOLD, 12));
            jScrollPane3.getViewport().add(jTable3);
            jScrollPane3.repaint();
        } catch (Exception ex) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtMerkActionPerformed

    private void txtMerkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMerkKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 40) {
            jScrollPane3.setVisible(true);
            jTable3.requestFocus();
            jTable3.getSelectionModel().setSelectionInterval(0, 0);
        }
        if (evt.getKeyCode() == 27) {
            jScrollPane3.setVisible(false);
        }
    }//GEN-LAST:event_txtMerkKeyPressed

    private void txtKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKategoriActionPerformed
        // TODO add your handling code here:
        try {
        // TODO add your handling code here:
            jScrollPane2.setVisible(true);
            JDBCAdapter ja = new JDBCAdapter(c);
            ja.executeQuery("select * from KATEGORI where IDKATEGORI like '" + txtKategori.getText() + "%' or lower(KATEGORI) like '%" + txtKategori.getText().toLowerCase() + "%'");
            jScrollPane2.getViewport().remove(jTable2);
            jTable2 = new JTable(ja);
            jTable2.addKeyListener(new java.awt.event.KeyAdapter() {

                @Override
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jTable2KeyPressed(evt);
                }
            });
            jTable2.setFont(new Font("Tahoma", Font.BOLD, 12));
            jScrollPane2.getViewport().add(jTable2);
            jScrollPane2.repaint();
        } catch (Exception ex) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtKategoriActionPerformed

    private void txtKategoriKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKategoriKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 40) {
            jScrollPane2.setVisible(true);
            jTable2.requestFocus();
            jTable2.getSelectionModel().setSelectionInterval(0, 0);
        }
        if (evt.getKeyCode() == 27) {
            jScrollPane2.setVisible(false);
        }
    }//GEN-LAST:event_txtKategoriKeyPressed

    private void BAktifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAktifActionPerformed
        // TODO add your handling code here:
    Statement sf;
    try {
        int x = JOptionPane.showConfirmDialog(this, "Update Status Barang..?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            Barangstok bs = BarangstokDao.getDetailKodeBarang(c, txtKodeBarang.getText());
            if ((txtIdMerk.getText().equals("")) || (txtKodeBarang.getText().equals("")) || (txtNamaBarang.getText().equals("")) || (txtHargaJual.getText().equals("")) || (txtIDKategori.getText().equals("")) || (kodeakun.getText().equals("")) || (txtCOGS.getText().equals("")) || (txtStok.getText().equals(""))) {
                JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
                txtIdMerk.requestFocus();
            }else if (bs.getSTOK() > 0) {
                JOptionPane.showMessageDialog(null, "Data Tidak Boleh Dinonaktifkan, Karena Stok Masih Ada.. !");
                txtIdMerk.requestFocus();
            } else {
                String query="";
                if(BAktif.getText().equals("Aktif")){
                    aksilog = "Aktif";
                    query="UPDATE BARANG SET STATUS='0' where KODEBARANG='" + txtKodeBarang.getText() + "'";
                }else{
                    aksilog = "NonAktif";
                    query="UPDATE BARANG SET STATUS='1' where KODEBARANG='" + txtKodeBarang.getText() + "'";
                }
                sf = c.createStatement();
                sf.execute(query);
                prosesUpdateLog(c);
                JOptionPane.showMessageDialog(this, "Update Berhasil..!!");
                reloadData(c, cboAktif.getSelectedIndex());
                cektombol();
                cekaktiftext();
                kosong();
                txtIdMerk.requestFocus();
            }
        } else {
            txtIdMerk.requestFocus();
        }
    } catch (SQLException ex) {
        Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_BAktifActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BAddBatchBaru;
    private javax.swing.JButton BAktif;
    private javax.swing.JButton BPindahcbg;
    private javax.swing.JButton Bdelete;
    private javax.swing.JButton Bedit;
    private javax.swing.JButton Bfilter;
    private javax.swing.JButton Binsert;
    private javax.swing.JButton Bupdate;
    private javax.swing.JCheckBox CekSemua;
    private javax.swing.JCheckBox CheckBrgBaru;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JCheckBox cbCabang;
    private javax.swing.JComboBox cboAktif;
    private javax.swing.JComboBox cboIsiQuantity;
    private javax.swing.JComboBox cboKriteria;
    private javax.swing.JComboBox cboPendapatan;
    private javax.swing.JComboBox cboSatuan;
    private javax.swing.JComboBox cboSatuan1;
    private javax.swing.JComboBox cboSatuan2;
    private javax.swing.JComboBox cboStatus;
    private datechooser.beans.DateChooserCombo dcExpire;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField kodeakun;
    private com.erv.function.PanelCool panelCool1;
    private javax.swing.JTextField txtCOGS;
    private javax.swing.JTextField txtHargaJual;
    private javax.swing.JTextField txtIDKategori;
    private javax.swing.JTextField txtIdMerk;
    private javax.swing.JTextField txtIsiKriteria;
    private javax.swing.JTextField txtJumlah1;
    private javax.swing.JTextField txtJumlah2;
    private javax.swing.JTextField txtJumlahData;
    private javax.swing.JTextField txtKategori;
    private javax.swing.JTextField txtKodeBarang;
    private javax.swing.JTextField txtKodeBatch;
    private javax.swing.JTextField txtMerk;
    private javax.swing.JTextField txtNamaBarang;
    private javax.swing.JTextField txtStok;
    // End of variables declaration//GEN-END:variables

    private void kosong() {
        txtKodeBarang.setText("");
        txtNamaBarang.setText("");
        //c.setText("");
        txtHargaJual.setText("");
        txtCOGS.setText("");
        txtStok.setText("");
        //jTextField7.setText("");
        kodeakun.setText("");
        txtIDKategori.setText("");
        txtKategori.setText("");
        txtIdMerk.setText("");
        txtMerk.setText("");
        txtJumlah1.setText("0");
        txtJumlah2.setText("0");
        txtKodeBatch.setText("");
        //jComboBox3.setSelectedIndex(1);
    }

    private void reloadAkun(Connection c) throws SQLException {
        PreparedStatement ps = c.prepareStatement("select * from PERKIRAAN where TIPE='D' and GRUP=1 and KODEPERKIRAAN='11310'", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet rs = ps.executeQuery();
        rs.last();
        if (rs.getRow() > 0) {
            persediaan = new String[rs.getRow()];
            rs.beforeFirst();
            int c1 = 0;
            jComboBox1.removeAllItems();
            while (rs.next()) {
                jComboBox1.addItem(rs.getString(1) + "-" + rs.getString(2));
                persediaan[c1] = rs.getString(1);
                c1++;
            }
        }
        cboPendapatan.removeAllItems();
        ps = c.prepareStatement("select * from PERKIRAAN where TIPE='D' and GRUP=4 and KODEPERKIRAAN='41101'", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
        rs = ps.executeQuery();
        rs.last();
        if (rs.getRow() > 0) {
            pendapatan = new String[rs.getRow()];
            rs.beforeFirst();
            int c1 = 0;
            while (rs.next()) {
                cboPendapatan.addItem(rs.getString(1) + "-" + rs.getString(2));
                pendapatan[c1] = rs.getString(1);
                c1++;
            }
        }
        jComboBox2.removeAllItems();
        ps = c.prepareStatement("select * from PERKIRAAN where TIPE='D' and GRUP=5 and KODEPERKIRAAN='51101'", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
        rs = ps.executeQuery();
        rs.last();
        if (rs.getRow() > 0) {
            HPP = new String[rs.getRow()];
            rs.beforeFirst();
            int c1 = 0;
            while (rs.next()) {
                jComboBox2.addItem(rs.getString(1) + "-" + rs.getString(2));
                HPP[c1] = rs.getString(1);
                c1++;
            }
        }
        rs.close();
        ps.close();
    }

    private void reloadData(Connection c, int index) {
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        kosong();
        JDBCAdapter j = new JDBCAdapter(c);
        String sql = "";
        if (index == 0) {
            sql = "select BARANG.KODEBARANG,BARANG.NAMABARANG,"
                    + "bsb.KODEBATCH , EXPIRE,"
                    + "JENISBARANG.JENIS as Merk,KATEGORI.KATEGORI,"
                    + "bs.COGS as `Modal`,"
                    + "bs.HARGAJUAL as `Jual`,"
                    + "CASEWHEN(KODEBATCH is null,bs.STOK,bsb.STOK) as STOK,"
                    + "case BARANG.STATUS when 0 then 'Aktif' "
                    + "when 1 then 'Tidak Aktif' end as StatBrg "
                    + "from BARANG,JENISBARANG,KATEGORI "
                    + "inner join BARANGSTOK bs on bs.KODEBARANG=BARANG.KODEBARANG "
                    + "left join BARANGSTOKBATCH bsb on bs.ID=bsb.IDBARANGSTOK "
                    + "where BARANG.IDJENIS=JENISBARANG.ID "
                    + "AND BARANG.IDKATEGORI=KATEGORI.IDKATEGORI AND BARANG.STATUS='0'";
        } else {
            sql = "select BARANG.KODEBARANG,BARANG.NAMABARANG,"
                    + "bsb.KODEBATCH , EXPIRE,"
                    + "JENISBARANG.JENIS as Merk,KATEGORI.KATEGORI,"
                    + "bs.COGS as `Modal`,"
                    + "bs.HARGAJUAL as `Jual`,"
                    + "CASEWHEN(KODEBATCH is null,bs.STOK,bsb.STOK) as STOK,"
                    + "case BARANG.STATUS when 0 then 'Aktif' "
                    + "when 1 then 'Tidak Aktif' end as StatBrg "
                    + "from BARANG,JENISBARANG,KATEGORI "
                    + "inner join BARANGSTOK bs on bs.KODEBARANG=BARANG.KODEBARANG "
                    + "left join BARANGSTOKBATCH bsb on bs.ID=bsb.IDBARANGSTOK "
                    + "where BARANG.IDJENIS=JENISBARANG.ID "
                    + "AND BARANG.IDKATEGORI=KATEGORI.IDKATEGORI AND BARANG.STATUS='1'";
        }
        if (cboKriteria.getSelectedIndex() == 0) {
            sql += " AND BARANG.KODEBARANG like '" + txtIsiKriteria.getText() + "%'";
        }
        if (cboKriteria.getSelectedIndex() == 1) {
            sql += " AND lower(BARANG.NAMABARANG) like '%" + txtIsiKriteria.getText().toLowerCase() + "%'";
        }
        if (cboKriteria.getSelectedIndex() == 2) {
            sql += " AND lower(JENISBARANG.JENIS) like '%" + txtIsiKriteria.getText().toLowerCase() + "%'";
        }
        if (cboKriteria.getSelectedIndex() == 3) {
            if (cboIsiQuantity.getSelectedIndex() == 0) {
                sql += " AND CASEWHEN(KODEBATCH is null,bs.STOK,bsb.STOK) > '" + txtIsiKriteria.getText() + "'";
            } else if (cboIsiQuantity.getSelectedIndex() == 1) {
                sql += " AND CASEWHEN(KODEBATCH is null,bs.STOK,bsb.STOK) = '" + txtIsiKriteria.getText() + "'";
            } else if (cboIsiQuantity.getSelectedIndex() == 2) {
                sql += " AND CASEWHEN(KODEBATCH is null,bs.STOK,bsb.STOK) < '" + txtIsiKriteria.getText() + "'";
            }

        }

        if (CekSemua.isSelected()) {
            sql += " ORDER BY BARANG.KODEBARANG";
        } else {
            sql += " ORDER BY BARANG.KODEBARANG limit '" + txtJumlahData.getText() + "'";
        }
        j.executeQuery(sql);
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(j);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        TableColumn col = jTable1.getColumnModel().getColumn(0);
        col.setPreferredWidth(50);
        col = jTable1.getColumnModel().getColumn(1);
        col.setPreferredWidth(250);
//        col = jTable1.getColumnModel().getColumn(2);
//        col.setPreferredWidth(150);
//        col = jTable1.getColumnModel().getColumn(3);
//        col.setPreferredWidth(150);
//        col = jTable1.getColumnModel().getColumn(4);
//        col.setPreferredWidth(100);
//        col = jTable1.getColumnModel().getColumn(5);
//        col.setPreferredWidth(100);
//        col = jTable1.getColumnModel().getColumn(6);
//        col.setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(6).setCellRenderer(new DecimalFormatRenderer());
        jTable1.getColumnModel().getColumn(7).setCellRenderer(new DecimalFormatRenderer());
        jTable1.setRowHeight(20);
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 12));
        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    void prosesUpdate(Connection c, int p) throws SQLException {
        b.setKODEBARANG(txtKodeBarang.getText());
        b.setNAMABARANG(txtNamaBarang.getText());
        b.setSATUAN(cboSatuan.getSelectedItem().toString());
        b.setHARGA(Double.parseDouble(txtHargaJual.getText()));
        b.setKODEAKUN(kodeakun.getText());
        b.setPENDAPATAN_ACC(pendapatan[cboPendapatan.getSelectedIndex()]);
        b.setCOGS_ACC(HPP[jComboBox2.getSelectedIndex()]);
        b.setCOGS(Double.parseDouble(txtCOGS.getText()));
        b.setSTOK(Integer.parseInt(txtStok.getText()));
//        b.setCOGS(0);
//        b.setSTOK(0);
        b.setIDKATEGORI(txtIDKategori.getText());
        b.setJENISBARANG(txtIdMerk.getText());
        b.setSTATUS(cboStatus.getSelectedIndex());
        b.setJUMLAH1(Integer.parseInt(txtJumlah1.getText()));
        if (b.getJUMLAH1() == 0) {
            b.setSATUAN1("-");
        } else {
            b.setSATUAN1(cboSatuan1.getSelectedItem().toString());
        }
        b.setJUMLAH2(Integer.parseInt(txtJumlah2.getText()));
        if (b.getJUMLAH2() == 0) {
            b.setSATUAN2("-");
        } else {
            b.setSATUAN2(cboSatuan2.getSelectedItem().toString());
        }

        if (p == 0) {
            barang bcari = dbBarang.getDetails(c, b.getKODEBARANG());
            if (bcari == null) {
                b.setKODEBARANG(barangDao.getID(c));
                dbBarang.insert(c, b);
            }
            Barangstok bs = BarangstokDao.getDetailKodeBarang(c, b.getKODEBARANG());
            if (bs == null) {
                bs = new Barangstok();
                bs.setIDGUDANG(0);
                bs.setKODEBARANG(b.getKODEBARANG());
                bs.setSTOK(b.getSTOK());
                bs.setCOGS(b.getCOGS());
                bs.setHARGAJUAL(b.getHARGA());
                int idbs = BarangstokDao.insertIntoBARANGSTOK(c, bs);
                if (!txtKodeBatch.getText().equals("")) {
                    Barangstokbatch bsb = BarangstokbatchDao.getDetailKodeBatch(c, txtKodeBatch.getText(), idbs);
                    if (bsb == null) {
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(idbs);
                        bsb.setKODEBATCH(txtKodeBatch.getText());
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(bs.getSTOK());
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);

//                        Barangstokbatch bsbstrip = BarangstokbatchDao.getDetailKodeBatchStrip(c, "-", bs.getID());
//                        if (bsbstrip == null) {
//                            bsb.setIDBARANGSTOK(bs.getID());
//                            bsb.setKODEBATCH("-");
//                            bsb.setEXPIRE(dcExpire.getText());
//                            bsb.setSTOK(bs.getSTOK());
//                            BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
//                        }
                    }
                }
            } else {
//                if (!txtKodeBatch.getText().equals("")) {
//                    Barangstokbatch bsbstrip = BarangstokbatchDao.getDetailKodeBatchStrip(c, "-", bs.getID());
//                    Barangstokbatch bsb = BarangstokbatchDao.getDetailKodeBatch(c, txtKodeBatch.getText(), bs.getID());
//                    if (bsbstrip == null) {
//                        if (bsb == null) {
//                            bsb = new Barangstokbatch();
//                            bsb.setIDBARANGSTOK(bs.getID());
//                            bsb.setKODEBATCH(txtKodeBatch.getText());
//                            bsb.setEXPIRE(dcExpire.getText());
//                            bsb.setSTOK(0);
//                            BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
//
//                        }
//                        bsb.setIDBARANGSTOK(bs.getID());
//                        bsb.setKODEBATCH("-");
//                        bsb.setEXPIRE(dcExpire.getText());
//                        bsb.setSTOK(bs.getSTOK());
//                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
//                    }else{
//                        if (bsb == null) {
//                            bsb = new Barangstokbatch();
//                            bsb.setIDBARANGSTOK(bs.getID());
//                            bsb.setKODEBATCH(txtKodeBatch.getText());
//                            bsb.setEXPIRE(dcExpire.getText());
//                            bsb.setSTOK(0);
//                            BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
//
//                        }
//                    }
//                    bs.setSTOK(bs.getSTOK() + b.getSTOK());
//                    BarangstokDao.updateBARANGSTOK(c, bs);
//                }
                if (!txtKodeBatch.getText().equals("")) {
                    Barangstokbatch bsb = BarangstokbatchDao.getDetailKodeBatchID(c, bs.getID());
                    if (bsb == null) {
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(bs.getID());
                        bsb.setKODEBATCH("-");
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(bs.getSTOK());
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(bs.getID());
                        bsb.setKODEBATCH(txtKodeBatch.getText());
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(0);
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
                    } else {
                        bsb = new Barangstokbatch();
                        bsb.setIDBARANGSTOK(bs.getID());
                        bsb.setKODEBATCH(txtKodeBatch.getText());
                        bsb.setEXPIRE(dcExpire.getText());
                        bsb.setSTOK(0);
                        BarangstokbatchDao.insertIntoBARANGSTOKBATCH(c, bsb);
                    }
                }
            }

        } else {
            Barangstok bs = BarangstokDao.getDetailKodeBarang(c, b.getKODEBARANG());
            bs.setCOGS(b.getCOGS());
            bs.setHARGAJUAL(b.getHARGA());
            bs.setSTOK(b.getSTOK());
////            BarangstokDao.updateBARANGSTOK(c, bs);
            BarangstokDao.updateFRMBRG_BARANGSTOK(c, bs);
////            if (!txtKodeBatch.getText().equals("")) {
////                Barangstokbatch bsb = BarangstokbatchDao.getDetailKodeBatch(c, txtKodeBatch.getText(), bs.getID());
////                bsb.setSTOK(b.getSTOK());
////                BarangstokbatchDao.updateBARANGSTOKBATCH(c, bsb);
////            }
            dbBarang.updateBarang(c, b);
        }
    }

    String getKodeAkun() {
        String hasil = "";
        try {
            hasil = persediaan[jComboBox1.getSelectedIndex()] + "." + txtKodeBarang.getText();
        } catch (Exception e) {
        }
        return hasil;
    }

    private void settingtombol(boolean simp, boolean edit, boolean hapus, boolean uptd, boolean bpindah,boolean baddbatch,boolean btnaktif) {
        Binsert.setVisible(simp);
        Bedit.setVisible(edit);
        Bdelete.setVisible(hapus);
        Bupdate.setVisible(uptd);
        BPindahcbg.setVisible(bpindah);
        BAddBatchBaru.setVisible(baddbatch);
        BAktif.setVisible(btnaktif);
    }

    void prosesUpdateLog(Connection c) throws SQLException {
        //java.sql.Date tanggallog;
        String tanggallog;
        String jamlog = u.jamsekarang + ":" + u.menitsekarang + ":" + u.detiksekarang;
        //tanggallog = java.sql.Date.valueOf(u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang);
        tanggallog = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
        String ketlog = "";
        lh.setUSERIDENTITY(JavarieSoftApp.jenisuser);
        lh.setTANGGAL(tanggallog);
        lh.setJAM(jamlog);
        lh.setTABEL("TBARANG");
        lh.setNOREFF(txtKodeBarang.getText());
        lh.setAKSI(aksilog);
        if (aksilog.equals("Insert")) {
            ketlog = "Insert Data Barang " + txtKodeBarang.getText();
        } else if (aksilog.equals("Update")) {
            ketlog = "Update Data Barang " + txtKodeBarang.getText();
        } else if (aksilog.equals("Delete")) {
            ketlog = "Delete Data Barang " + txtKodeBarang.getText();
        } else if (aksilog.equals("AddBatch")) {
            ketlog = "Add Batch Data Barang " + txtKodeBarang.getText() + " Kode Batch " + txtKodeBatch.getText();
        } else if (aksilog.equals("Aktif")) {
            ketlog = "Aktifkan Data Barang " + txtKodeBarang.getText() + " Kode Batch " + txtKodeBatch.getText();
        } else if (aksilog.equals("NonAktif")) {
            ketlog = "Non Aktifkan Data Barang " + txtKodeBarang.getText() + " Kode Batch " + txtKodeBatch.getText();
        }
        lh.setKETERANGAN(ketlog);
        lhdao.insert(c, lh);
    }

    public double getTextDouble(JTextField t) {
        double h = 0;
        if (t.getText() != null) {
            h = Double.parseDouble(t.getText());
        }
        return h;
    }

    public int getTextInteger(JTextField t) {
        int h = 0;
        if (t != null) {
            h = Integer.parseInt(t.getText());
        }
        return h;
    }

    void cektombol() {
        if (JavarieSoftApp.groupuser.equals("Pembelian")) {
            settingtombol(false, false, false, false, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Administrator")) {
            settingtombol(true, true, false, true, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Apoteker")) {
            settingtombol(false, false, false, false, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Operator")) {
            settingtombol(false, false, false, false, false, true, false);
        } else if (JavarieSoftApp.groupuser.equals("Accounting")) {
            settingtombol(false, false, false, false, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("General")) {
            settingtombol(false, false, false, false, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Asisten Administrator")) {
            settingtombol(true, false, false, true, false, false, true);
        } else if (JavarieSoftApp.groupuser.equals("Master Data")) {
            settingtombol(true, false, false, true, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Pajak")) {
            settingtombol(false, false, false, false, false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Gudang")) {
            settingtombol(false, false, false, false, false, false, false);
        }
    }
    
    void posisiTombol(){
        if (JavarieSoftApp.groupuser.equals("Asisten Administrator")) {
            BAktif.setBounds(160,260,110,25);
            Bupdate.setBounds(280,260,110,25);
        } else if (JavarieSoftApp.groupuser.equals("Operator")){
            BAddBatchBaru.setBounds(40,260,160,25);
        }
    }

    void isicboSatuan(Connection c) throws SQLException {
        cboSatuan.removeAllItems();
        cboSatuan1.removeAllItems();
        cboSatuan2.removeAllItems();
        List<Satuan> listSatuans = SatuanDao.getAllDetails(c);
        for (Iterator<Satuan> it = listSatuans.iterator(); it.hasNext();) {
            Satuan satuan = it.next();
            cboSatuan.addItem(satuan.getKODE());
            cboSatuan1.addItem(satuan.getKODE());
            cboSatuan2.addItem(satuan.getKODE());
        }
    }

    void tampilData(Connection c, String kodebarang) throws SQLException, ClassNotFoundException {
        // TODO add your handling code here:
        b = dbBarang.getDetails(c, kodebarang);
        Barangstok bs = BarangstokDao.getDetailKodeBarang(c, kodebarang);
        txtKodeBarang.setText(b.getKODEBARANG());
        txtNamaBarang.setText(b.getNAMABARANG());
        cboSatuan.setSelectedItem(b.getSATUAN());
        txtHargaJual.setText("" + ((bs != null) ? df0.format(bs.getHARGAJUAL()) : 0));
        perkiraan p = new perkiraan();
        String[] kode = com.erv.function.Util.split(b.getKODEAKUN(), ".");
        kategori s = kategoriDao.getDetails(c, b.getIDKATEGORI());
        txtIDKategori.setText(s.getIDKATEGORI());
        txtKategori.setText(s.getKATEGORI());
        p = dbperk.getDetails(c, kode[0]);
        jComboBox1.setSelectedItem(p.getKODEPERKIRAAN() + "-" + p.getNAMAPERKIRAAN());
        p = dbperk.getDetails(c, b.getCOGS_ACC());
        jComboBox2.setSelectedItem(p.getKODEPERKIRAAN() + "-" + p.getNAMAPERKIRAAN());
        p = dbperk.getDetails(c, b.getPENDAPATAN_ACC());
        cboPendapatan.setSelectedItem(p.getKODEPERKIRAAN() + "-" + p.getNAMAPERKIRAAN());
        txtCOGS.setText("" + ((bs != null) ? bs.getCOGS() : 0));
        modalTemp = bs.getCOGS();
        txtStok.setText("" + ((bs != null) ? bs.getSTOK() : 0));
        stokTemp = bs.getSTOK();
        jenisbarang j = jenisbarangDao.getDetails(c, b.getJENISBARANG());
        txtMerk.setText(j.getJENIS());
        txtIdMerk.setText(j.getID());
        cboStatus.setSelectedIndex(b.getSTATUS());
        if (!b.getSATUAN1().equals("-")) {
            cboSatuan1.setSelectedItem(b.getSATUAN1());
        }
        if (!b.getSATUAN2().equals("-")) {
            cboSatuan2.setSelectedItem(b.getSATUAN2());
        }
        txtJumlah1.setText(b.getJUMLAH1() + "");
        txtJumlah2.setText(b.getJUMLAH2() + "");
        j = null;
        p = null;

    }

    void cekaktiftext() {
        txtCOGS.setEnabled(true);
        txtStok.setEnabled(true);
    }

    void ceknonaktiftext() {
        txtCOGS.setEnabled(false);
        txtStok.setEnabled(false);
    }
    
    void cekaktifbarang(Connection c, String kdbrg) throws SQLException, ClassNotFoundException {
        b = dbBarang.getDetails(c, kdbrg);
        if(b.getSTATUS()==0){
            BAktif.setText("Non Aktif");
        }else{
            BAktif.setText("Aktif");
        }
    }
    
}
