/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javariesoft;

import com.erv.db.koneksi;
import com.erv.function.JDBCAdapter;
import com.erv.model.ImportBarang;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;

/**
 *
 * @author USER
 */
public class FormLapPajakExcel extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormLapPajakExcel
     */
    Connection con;

    public FormLapPajakExcel() {
        initComponents();
        try {
            con = koneksi.getKoneksiJ();
        } catch (SQLException ex) {
            Logger.getLogger(FormLapPajakExcel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        btnExportToCsv = new javax.swing.JButton();
        btnLawanCsv = new javax.swing.JButton();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormLapPajakExcel.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(null);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(20, 20, 120, 23);

        btnExportToCsv.setText(resourceMap.getString("btnExportToCsv.text")); // NOI18N
        btnExportToCsv.setName("btnExportToCsv"); // NOI18N
        btnExportToCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToCsvActionPerformed(evt);
            }
        });
        getContentPane().add(btnExportToCsv);
        btnExportToCsv.setBounds(150, 20, 130, 23);

        btnLawanCsv.setText(resourceMap.getString("btnLawanCsv.text")); // NOI18N
        btnLawanCsv.setName("btnLawanCsv"); // NOI18N
        btnLawanCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLawanCsvActionPerformed(evt);
            }
        });
        getContentPane().add(btnLawanCsv);
        btnLawanCsv.setBounds(20, 50, 120, 23);

        setBounds(0, 0, 328, 132);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            
            List<List<Object>> data = getDataImportBarang(con);
            Object [] judul = {"OB","KODE_OBJECT","NAMA","HARGA_SATUAN"};
            ListToExcel(judul, data, "ImportBarang.xlsx");
            JOptionPane.showMessageDialog(this, "Export To Excel Ok");
        } catch (SQLException ex) {
            Logger.getLogger(FormLapPajakExcel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormLapPajakExcel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        try {
            // TODO add your handling code here:
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormLapPajakExcel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameClosed

    private void btnExportToCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToCsvActionPerformed
        try {
            // TODO add your handling code here:
            QueryToCSV();
            JOptionPane.showMessageDialog(this, "Export Data Barang ke CSV Ok");
        } catch (SQLException ex) {
            Logger.getLogger(FormLapPajakExcel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnExportToCsvActionPerformed

    private void btnLawanCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLawanCsvActionPerformed
        // TODO add your handling code here:
        createLawanToCsv();
    }//GEN-LAST:event_btnLawanCsvActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportToCsv;
    private javax.swing.JButton btnLawanCsv;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
    List<List<Object>> getDataImportBarang(Connection c) throws SQLException {
        String sql = "select 'OB' as OB, b.KODEBARANG as KODE_OBJECT, b.namabarang as NAMA, bs.cogs as HARGA_SATUAN "
                + "FROM BARANG b inner join BARANGSTOK bs on b.kodebarang=bs.kodebarang "
                + "";
        Statement stat = c.createStatement();
        ResultSet rs = stat.executeQuery(sql);
        List<List<Object>> list = new ArrayList<>();
        while (rs.next()) {
            List<Object> newRow = new ArrayList<>();
            newRow.add(rs.getString(1));
            newRow.add(rs.getString(2));
            newRow.add(rs.getString(3));
            newRow.add(rs.getDouble(4));
            list.add(newRow);
        }
        return list;
    }

    public void ListToExcel(Object[] judul, List<List<Object>> data, String filename) throws FileNotFoundException, IOException {
        System.out.println("Start");
        String path="import/";
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Datatypes in Java");
        int rowNum = 0;
        Row row = sheet.createRow(rowNum++);
        int colNum = 0;
        for (Object jd : judul) {
            Cell cell = row.createCell(colNum++);
            if (jd instanceof String) {
                cell.setCellValue((String) jd);
            }
        }
        for (List<Object> dataRow : data) {
            row = sheet.createRow(rowNum++);
            colNum = 0;
            for (Object field : dataRow) {
                Cell cell = row.createCell(colNum++);
                if (field instanceof String) {
                    cell.setCellValue((String) field);
                } else if (field instanceof Integer) {
                    cell.setCellValue((Integer) field);
                } else if (field instanceof Double) {
                    cell.setCellValue((Double) field);
                }
            }

        }
        FileOutputStream outputStream = new FileOutputStream(path + filename);
        workbook.write(outputStream);
        workbook.close();
        System.out.println("Done");
    }

    private void QueryToCSV() throws SQLException {
        String sql = "select 'OB' as OB, b.KODEBARANG as KODE_OBJECT, b.namabarang as NAMA, bs.cogs as HARGA_SATUAN "
                + "FROM BARANG b inner join BARANGSTOK bs on b.kodebarang=bs.kodebarang "
                + "";
        Statement stat = con.createStatement();
        ResultSet rs = stat.executeQuery(sql);
        new Csv().write("import/barang.csv", rs, null);
        
    }

    private void createLawanToCsv() {
        SimpleResultSet rs = new SimpleResultSet();
        //rs.addColumn(title, WIDTH, WIDTH, WIDTH);
    }
}
