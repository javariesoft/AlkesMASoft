/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javariesoft;

import com.eigher.db.loghistoryDao;
import com.eigher.model.loghistory;
import com.erv.db.BarangstokDao;
import com.erv.db.DODao;
import com.erv.db.hutangDao;
import com.erv.db.hutangbayarDao;
import com.erv.db.jurnalDao;
import com.erv.db.koneksi;
import com.erv.db.pelangganDao;
import com.erv.db.piutangDao;
import com.erv.db.piutangbayarDao;
import com.erv.db.returDao;
import com.erv.db.returbeliDao;
import com.erv.db.returbelirinciDao;
import com.erv.db.ReturdoDao;
import com.erv.db.ReturdorinciDao;
import com.erv.db.rincijurnalDao;
import com.erv.db.settingDao;
import com.erv.db.stokDao;
import com.erv.db.supplierDao;
import com.erv.exception.JavarieException;
import com.erv.function.JDBCAdapter;
import com.erv.function.Util;
import com.erv.fungsi.DecimalFormatRenderer;
import com.erv.model.Barangstok;
import com.erv.model.hutang;
import com.erv.model.hutangbayar;
import com.erv.model.jurnal;
import com.erv.model.piutang;
import com.erv.model.piutangbayar;
import com.erv.model.retur;
import com.erv.model.returbeli;
import com.erv.model.DO;
import com.erv.model.Returdo;
import com.erv.model.Returdorinci;
import com.erv.model.rincijurnal;
import com.erv.model.rinciretur;
import com.erv.model.stok;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;

/**
 *
 * @author TI-PNP
 */
public class FormRetur extends javax.swing.JInternalFrame implements ListSelectionListener {

    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    java.text.DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
    double totalhutang = 0, ttotalbayar = 0, total = 0, diskont = 0, tppn = 0;
    double totalpiutang = 0, hpp = 0;
    int IDJurnal = 0;

    /**
     * Creates new form FormRetur
     */
    public FormRetur() {
        initComponents();
        setSize(dim.width, dim.height);
        setLocation(0, 0);
        setLayar();
        //reloaddata();
        tanggal.setVisible(true);
        txtKriteria.setVisible(false);
        tanggal.setDateFormat(d);
        tabelData.getSelectionModel().addListSelectionListener(this);
        pilih(0);
        btnbayarhutang.setVisible(false);
        cektombol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboRetur = new javax.swing.JComboBox();
        cboKriteria = new javax.swing.JComboBox();
        txtKriteria = new javax.swing.JTextField();
        tanggal = new datechooser.beans.DateChooserCombo();
        btnFilter = new javax.swing.JButton();
        btnValidasi = new javax.swing.JButton();
        btnDeleteValidasi = new javax.swing.JButton();
        btnbayarhutang = new javax.swing.JButton();
        btnBatalRetur = new javax.swing.JButton();
        cbStatus = new javax.swing.JComboBox<>();
        btnKeluar = new javax.swing.JButton();
        btnUpdateHpp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelData = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataRinci = new javax.swing.JTable();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormRetur.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(1113, 73));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 15));
        jPanel2.add(jLabel1);

        cboRetur.setFont(resourceMap.getFont("cboRetur.font")); // NOI18N
        cboRetur.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Retur Penjualan", "Retur Pembelian", "Retur DO" }));
        cboRetur.setName("cboRetur"); // NOI18N
        cboRetur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboReturActionPerformed(evt);
            }
        });
        jPanel2.add(cboRetur);

        cboKriteria.setFont(resourceMap.getFont("cboKriteria.font")); // NOI18N
        cboKriteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kode Retur", "Tanggal", "Pelanggan", "Status" }));
        cboKriteria.setName("cboKriteria"); // NOI18N
        cboKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKriteriaActionPerformed(evt);
            }
        });
        jPanel2.add(cboKriteria);

        txtKriteria.setFont(resourceMap.getFont("txtKriteria.font")); // NOI18N
        txtKriteria.setText(resourceMap.getString("txtKriteria.text")); // NOI18N
        txtKriteria.setName("txtKriteria"); // NOI18N
        txtKriteria.setPreferredSize(new java.awt.Dimension(200, 26));
        txtKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKriteriaActionPerformed(evt);
            }
        });
        jPanel2.add(txtKriteria);

        tanggal.setFieldFont(resourceMap.getFont("tanggal.dch_combo_fieldFont")); // NOI18N
        jPanel2.add(tanggal);

        btnFilter.setFont(resourceMap.getFont("btnFilter.font")); // NOI18N
        btnFilter.setIcon(resourceMap.getIcon("btnFilter.icon")); // NOI18N
        btnFilter.setText(resourceMap.getString("btnFilter.text")); // NOI18N
        btnFilter.setName("btnFilter"); // NOI18N
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        jPanel2.add(btnFilter);

        btnValidasi.setFont(resourceMap.getFont("btnValidasi.font")); // NOI18N
        btnValidasi.setIcon(resourceMap.getIcon("btnValidasi.icon")); // NOI18N
        btnValidasi.setText(resourceMap.getString("btnValidasi.text")); // NOI18N
        btnValidasi.setName("btnValidasi"); // NOI18N
        btnValidasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidasiActionPerformed(evt);
            }
        });
        jPanel2.add(btnValidasi);

        btnDeleteValidasi.setFont(resourceMap.getFont("btnDeleteValidasi.font")); // NOI18N
        btnDeleteValidasi.setIcon(resourceMap.getIcon("btnDeleteValidasi.icon")); // NOI18N
        btnDeleteValidasi.setText(resourceMap.getString("btnDeleteValidasi.text")); // NOI18N
        btnDeleteValidasi.setName("btnDeleteValidasi"); // NOI18N
        btnDeleteValidasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteValidasiActionPerformed(evt);
            }
        });
        jPanel2.add(btnDeleteValidasi);

        btnbayarhutang.setText(resourceMap.getString("btnbayarhutang.text")); // NOI18N
        btnbayarhutang.setName("btnbayarhutang"); // NOI18N
        btnbayarhutang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbayarhutangActionPerformed(evt);
            }
        });
        jPanel2.add(btnbayarhutang);

        btnBatalRetur.setFont(resourceMap.getFont("btnBatalRetur.font")); // NOI18N
        btnBatalRetur.setIcon(resourceMap.getIcon("btnBatalRetur.icon")); // NOI18N
        btnBatalRetur.setText(resourceMap.getString("btnBatalRetur.text")); // NOI18N
        btnBatalRetur.setName("btnBatalRetur"); // NOI18N
        btnBatalRetur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalReturActionPerformed(evt);
            }
        });
        jPanel2.add(btnBatalRetur);

        cbStatus.setFont(resourceMap.getFont("cbStatus.font")); // NOI18N
        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Draft", "Release", "Batal" }));
        cbStatus.setName("cbStatus"); // NOI18N
        jPanel2.add(cbStatus);

        btnKeluar.setFont(resourceMap.getFont("btnKeluar.font")); // NOI18N
        btnKeluar.setIcon(resourceMap.getIcon("btnKeluar.icon")); // NOI18N
        btnKeluar.setText(resourceMap.getString("btnKeluar.text")); // NOI18N
        btnKeluar.setName("btnKeluar"); // NOI18N
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        jPanel2.add(btnKeluar);

        btnUpdateHpp.setFont(resourceMap.getFont("btnUpdateHpp.font")); // NOI18N
        btnUpdateHpp.setText(resourceMap.getString("btnUpdateHpp.text")); // NOI18N
        btnUpdateHpp.setName("btnUpdateHpp"); // NOI18N
        btnUpdateHpp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateHppActionPerformed(evt);
            }
        });
        jPanel2.add(btnUpdateHpp);

        panelCool1.add(jPanel2);
        jPanel2.setBounds(10, 10, 1250, 50);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabelData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabelData.setName("tabelData"); // NOI18N
        tabelData.setRowHeight(30);
        tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelData);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 1050, 310);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        dataRinci.setName("dataRinci"); // NOI18N
        jScrollPane2.setViewportView(dataRinci);

        panelCool1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 500, 1050, 250);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKriteriaActionPerformed
        // TODO add your handling code here:
        pilihKriteria(cboKriteria.getSelectedIndex());
    }//GEN-LAST:event_cboKriteriaActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddata(c, cboRetur.getSelectedIndex());

            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnDeleteValidasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteValidasiActionPerformed
        // TODO add your handling code here:
        Connection c = null;

        try {
            c = koneksi.getKoneksiJ();
            c.createStatement().execute("set autocommit false");
            int id = Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString());
            String tgal[] = Util.split(tabelData.getValueAt(tabelData.getSelectedRow(), 2).toString(), "-");
            String per = tgal[0] + "." + Integer.parseInt(tgal[1]);
            if (cboRetur.getSelectedIndex() == 0) {
                int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
                if (x == 0) {
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            String aksilog = "Delete";
                            returDao.deleteFromRETUR(c, id);
                            prosesUpdateLog(aksilog, "jual");
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                }

            } else if (cboRetur.getSelectedIndex() == 1) {
                int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
                if (x == 0) {
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            String aksilog = "Delete";
                            returbeliDao.deleteFromRETURBELI(c, id);
                            prosesUpdateLog(aksilog, "beli");
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                }
            } else if (cboRetur.getSelectedIndex() == 2) {
                int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
                if (x == 0) {
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            String aksilog = "Delete";
//                            returbeliDao.deleteFromRETURBELI(c, id);
//                            prosesUpdateLog(aksilog, "beli");
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                }
            }
            c.commit();
            reloaddata(c, cboRetur.getSelectedIndex());
            JOptionPane.showMessageDialog(this, "Delete Retur Ok");

        } catch (Exception ex) {
            try {
                c.rollback();
                JOptionPane.showMessageDialog(this, "Rollback  :" + ex.getMessage());
            } catch (SQLException ex1) {
                Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (c != null) {
                try {
                    c.createStatement().execute("set autocommit false");
                    c.close();
                } catch (SQLException ex) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_btnDeleteValidasiActionPerformed

    private void cboReturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboReturActionPerformed
        // TODO add your handling code here:
        pilih(cboRetur.getSelectedIndex());
    }//GEN-LAST:event_cboReturActionPerformed

    private void btnValidasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidasiActionPerformed
        Connection c = null;
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Retur Ini Akan di Validasi?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            try {
                // TODO add your handling code here:
                c = koneksi.getKoneksiJ();
                c.createStatement().execute("set autocommit false");
                if (cboRetur.getSelectedIndex() == 0) {
                    int idjual = Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
                    //hpp = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
                    totalpiutang = piutangDao.getJumlahHutangJual(c, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
                    ttotalbayar = total - diskont + tppn;
                    retur rj = returDao.getRetur(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));

                    if (rj.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Penjualan Ini Sudah di Release");
                    } else if (rj.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Penjualan Ini di Batalkan");
                    } else {
                        hpp = getHpp(c, rj.getRincireturList());
                        List<piutang> piutangList = piutangDao.getAllPiutangPlgBL(c, rj.getKODEPELANGGAN());
                        bayarPiutangDenganRetur(c, piutangList, ttotalbayar, rj);
                        rj.setSTATUS(1);
                        returDao.updateRETUR(c, rj);
                        String aksilog = "Validasi";
                        prosesUpdateLog(aksilog, "jual");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Retur Penjualan Berhasil");
                    }

                } else if(cboRetur.getSelectedIndex() == 1){
                    int idbeli = Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
                    totalhutang = hutangDao.getJumlahHutangBeli(c, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
                    ttotalbayar = total - diskont + tppn;
                    returbeli rb = returbeliDao.getReturBeli(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                    double totalreturpersediaan = returbelirinciDao.getreturbelirinciPersediaan(c, rb.getID());
                    if (rb.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini Sudah di Release");
                    } else if (rb.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini di Batalkan");
                    } else {
                        List<hutang> hutangList = hutangDao.getAllHutangBL(c, rb.getIDSUPPLIER());
                        bayarHutangDenganRetur(hutangList, ttotalbayar, rb, totalreturpersediaan);
                        rb.setSTATUS(1);
                        returbeliDao.updateRETURBELI(c, rb);
                        String aksilog = "Validasi";
                        prosesUpdateLog(aksilog, "beli");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Retur Pembelian Berhasil");
                    }
                } else if(cboRetur.getSelectedIndex() == 2){
//                    int idbeli = Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
//                    totalhutang = hutangDao.getJumlahHutangBeli(c, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
//                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
//                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
//                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
//                    ttotalbayar = total - diskont + tppn;
                    Returdo rdo = ReturdoDao.getDetails(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
//                    double totalreturpersediaan = returbelirinciDao.getreturbelirinciPersediaan(c, rb.getID());
                    if (rdo.getStatus() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur DO Ini Sudah di Release");
                    } else if (rdo.getStatus() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur DO Ini di Batalkan");
                    } else {
//                        List<hutang> hutangList = hutangDao.getAllHutangBL(c, rb.getIDSUPPLIER());
//                        bayarHutangDenganRetur(hutangList, ttotalbayar, rb, totalreturpersediaan);
                        rdo.setStatus(1);
                        if(ReturdoDao.updateRETURDO(c, rdo)){
                        //Insert Table Stok
                        DO datado;
//                        datado = DODao.getDetails(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                        datado = DODao.getDetails(c, rdo.getIddo());
                        Statement s = c.createStatement();
                        ResultSet r = s.executeQuery("select * from RETURDORINCI where IDRETURDO='"+rdo.getId()+"'");
                        while (r.next()) {
                            stok st = new stok();
                            st.setIDPENJUALAN(rdo.getId());
                            st.setKODEBARANG(r.getString(3));
                            st.setTANGGAL(rdo.getTanggal());
                            st.setIN(r.getInt(8));
                            st.setOUT(0);
                            st.setKODETRANS("E");
                            st.setKODEBATCH(r.getString(6));
                            stokDao.insertIntoSTOK(c, st);
                            DODao.eksekusiStatusDORetur(c, rdo.getIddo());
                        }
//                        
                        
                        String aksilog = "Validasi";
                        prosesUpdateLog(aksilog, "do");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Retur DO Berhasil");
                        }
                    }
                }
                c.commit();
            } catch (SQLException ex) {
                try {
                    c.rollback();
                } catch (SQLException ex1) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
                }
                JOptionPane.showMessageDialog(this, "Rollback : " + ex.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JavarieException ex) {
                try {
                    c.rollback();
                } catch (SQLException ex1) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
                }
                JOptionPane.showMessageDialog(this, "Warning : " + ex.getMessage());
            } finally {
                if (c != null) {
                    try {
                        c.createStatement().execute("set autocommit true");
                        c.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }//GEN-LAST:event_btnValidasiActionPerformed

    private void tabelDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelDataMouseClicked
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddataRinci(c, cboRetur.getSelectedIndex());
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tabelDataMouseClicked

    private void btnbayarhutangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbayarhutangActionPerformed
        // TODO add your handling code here:
        DialogHutang d = new DialogHutang(null, closable, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString(), tabelData.getValueAt(tabelData.getSelectedRow(), 4).toString(), Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 5).toString()));
        d.getTxtJumlahBayarKhusus().setValue(tabelData.getValueAt(tabelData.getSelectedRow(), 5));
        d.getTxtSisa().setValue(tabelData.getValueAt(tabelData.getSelectedRow(), 5));
        d.toFront();
        d.setVisible(true);
    }//GEN-LAST:event_btnbayarhutangActionPerformed

    private void btnBatalReturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalReturActionPerformed
        // TODO add your handling code here:
        Connection c = null;
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Retur Ini Akan di Batalkan?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            try {
                // TODO add your handling code here:
                c = koneksi.getKoneksiJ();
                c.createStatement().execute("set autocommit false");
                if (cboRetur.getSelectedIndex() == 0) {
//                    hpp = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
//                    totalpiutang = piutangDao.getJumlahHutangJual(c, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
//                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
//                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
//                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
//                    ttotalbayar = total - diskont + tppn;
                    retur rj = returDao.getRetur(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
//                    insertJurnalReturJual(c, rj);
//                    insertRinciJurnalReturJual(c, rj);
                    if (rj.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Penjualan Ini Sudah di Release");
                    } else if (rj.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Penjualan Ini di Batalkan");
                    } else {
                        rj.setSTATUS(2);
                        returDao.updateRETUR(c, rj);
                        String aksilog = "Batal";
                        prosesUpdateLog(aksilog, "jual");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Pembatalan Retur Penjualan Berhasil");
                    }
                } else if (cboRetur.getSelectedIndex() == 1) {
//                    totalhutang = hutangDao.getJumlahHutangBeli(c, tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
//                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
//                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
//                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
//                    ttotalbayar = total - diskont + tppn;
                    returbeli rb = returbeliDao.getReturBeli(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
//                    double totalreturpersediaan = returbelirinciDao.getreturbelirinciPersediaan(c, rb.getID());

//                    insertJurnalReturBeli(c, rb);
//                    insertRinciJurnalReturBeli(c, rb, totalreturpersediaan);
                    if (rb.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini Sudah di Release");
                    } else if (rb.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini di Batalkan");
                    } else {
                        rb.setSTATUS(2);
                        returbeliDao.updateRETURBELI(c, rb);
                        String aksilog = "Batal";
                        prosesUpdateLog(aksilog, "beli");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Pembatalan Retur Pembelian Berhasil");
                    }
                } else if (cboRetur.getSelectedIndex() == 2) {
                    Returdo rdo = ReturdoDao.getDetails(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                    if (rdo.getStatus() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur DO Ini Sudah di Release");
                    } else if (rdo.getStatus() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur DO Ini di Batalkan");
                    } else {
                        rdo.setStatus(2);
                        ReturdoDao.updateRETURDO(c, rdo);
                        String aksilog = "Batal";
                        prosesUpdateLog(aksilog, "do");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Pembatalan Retur DO Berhasil");
                    }
                }
                c.commit();
            } catch (SQLException ex) {
                try {
                    c.rollback();
                } catch (SQLException ex1) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
                }
                JOptionPane.showMessageDialog(this, "Rollback :" + ex.getMessage());
            } finally {
                if (c != null) {
                    try {
                        c.createStatement().execute("set autocommit true");
                        c.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnBatalReturActionPerformed

    private void txtKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKriteriaActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddata(c, cboRetur.getSelectedIndex());

            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtKriteriaActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void btnUpdateHppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateHppActionPerformed
        Connection c = null;
        try {
            // TODO add your handling code here:
            c = koneksi.getKoneksiJ();
            c.createStatement().execute("set autocommit false");
            if (cboRetur.getSelectedIndex() == 0) {
                retur rj = returDao.getRetur(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                hpp = getHpp(c, rj.getRincireturList());
                rj.setTOTALHPP(hpp);
                jurnal j = rj.getJurnal();
                List<rincijurnal> rjList = j.getRincijurnals();
                for (rincijurnal rc : rjList) {
                    if (rc.getNO() == 5) {
                        rc.setDEBET(hpp);
                        rincijurnalDao.updateRINCIJURNAL(c, rc);
                    }
                    if (rc.getNO() == 6) {
                        rc.setKREDIT(hpp);
                        rincijurnalDao.updateRINCIJURNAL(c, rc);
                    }
                }
                returDao.updateRETUR(c, rj);
            }
            c.commit();
            JOptionPane.showMessageDialog(this, "Update HPP ok");
        } catch (SQLException ex) {
            try {
                c.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
            }
            JOptionPane.showMessageDialog(this, "Error :" + ex.getMessage());
        } finally {
            try {
                if (c != null) {
                    c.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnUpdateHppActionPerformed

    private void setLayar() {
        jPanel2.setSize(dim.width - 40, 40);
        //jScrollPane1.setLocation(jPanel2.getX(), jPanel2.getY() + jPanel2.getHeight() + 10);
        jScrollPane1.setSize(dim.width - 40, dim.height / 2 - 185);
        jScrollPane2.setLocation(10, dim.height / 2 - 120);
        jScrollPane2.setSize(dim.width - 40, dim.height / 2 - 50);

    }

    void prosesUpdateLog(String aksilog, String jretur) {
        loghistory lh = new loghistory();
        loghistoryDao lhdao = new loghistoryDao();
        com.erv.function.Util u = new com.erv.function.Util();
        //java.sql.Date tanggallog;
        String tanggallog;
        String jamlog = u.jamsekarang + ":" + u.menitsekarang + ":" + u.detiksekarang;
        //tanggallog = java.sql.Date.valueOf(u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang);
        tanggallog = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
        try {
            String ketlog = "";
            lh.setUSERIDENTITY(JavarieSoftApp.jenisuser);
            lh.setTANGGAL(tanggallog);
            lh.setJAM(jamlog);
            if (jretur.equals("jual")) {
                lh.setTABEL("TRETURJUAL");
            } else if (jretur.equals("beli")) {
                lh.setTABEL("TRETURBELI");
            } else if (jretur.equals("do")) {
                lh.setTABEL("TRETURDO");
            }
            lh.setNOREFF(tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString());
            lh.setAKSI(aksilog);
            if (aksilog.equals("Validasi")) {
                if (jretur.equals("jual")) {
                    ketlog = "Validasi Data Retur Jual No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else if (jretur.equals("beli")) {
                    ketlog = "Validasi Data Retur Beli No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Supplier " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else if (jretur.equals("do")) {
                    ketlog = "Validasi Data Retur DO No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                }             
            } else if (aksilog.equals("Batal")) {
                if (jretur.equals("jual")) {
                    ketlog = "Pembatalan Data Retur Jual No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else if (jretur.equals("beli")) {
                    ketlog = "Pembatalan Data Retur Beli No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Supplier " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else if (jretur.equals("do")) {
                    ketlog = "Pembatalan Data Retur DO No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                }
            } else if (aksilog.equals("Delete")) {
                if (jretur.equals("jual")) {
                    ketlog = "Delete Data Retur Jual No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else if (jretur.equals("beli")) {
                    ketlog = "Delete Data Retur Beli No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Supplier " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else if (jretur.equals("do")) {
                    ketlog = "Delete Data Retur DO No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                }
            }
            lh.setKETERANGAN(ketlog);
            lhdao.insert(koneksi.getKoneksiJ(), lh);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }

    }

    public boolean cekperiodeAda(String bul) throws SQLException, ClassNotFoundException {
        //String periode = thn + "." + bln;
        boolean ada = false;
        Statement s = koneksi.getKoneksiJ().createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + bul + "'");
        if (rs.next()) {
            if (rs.getString(1) != null) {
                ada = true;
            }
        }
        rs.close();
        s.close();
        return ada;
    }

    public boolean cekperiode(String periode) throws SQLException, ClassNotFoundException {
        //String periode = thn + "." + bln;
        boolean hasil1 = false;
        Statement s = koneksi.getKoneksiJ().createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + periode + "' and STATUSSTOK='1'");

        if (rs.next()) {
            if (rs.getString(1) != null) {
                hasil1 = true;
            }
        }
        rs.close();
        s.close();
        return hasil1;
    }

    @SuppressWarnings("empty-statement")
    public void reloaddata(Connection c, int pil) {
        JDBCAdapter j = new JDBCAdapter(c);
        if (pil == 0) {
            String sql = "select RETUR.ID, " //1
                    + "KODERETUR, " //2
                    + "RETUR.TANGGAL, " //3
                    + "PELANGGAN.NAMA, " //4
                    + "RETUR.KETERANGAN, " //5
                    + "PENJUALAN.FAKTUR, " //6
                    + "RETUR.IDPENJUALAN,  " //7
                    + "RETUR.TOTALRETUR, "//8
                    + "RETUR.TOTALDISKON, "//9
                    + "RETUR.TOTALPPN, "//10
                    + "RETUR.TOTALHPP, "//11
                    + "case RETUR.STATUS "
                    + "when 0 then 'Draft' "
                    + "when 1 then 'Release' "
                    + "when 2 then 'Batal' end as STATUS " //12
                    + "from RETUR inner join PELANGGAN on RETUR.KODEPELANGGAN = PELANGGAN.KODEPELANGGAN\n"
                    + "inner join PENJUALAN on RETUR.IDPENJUALAN = PENJUALAN.ID \n"
                    + "where 1=1";
            if (cboKriteria.getSelectedIndex() == 1) {
                sql += " and lower(PELANGGAN.NAMA) like '%" + txtKriteria.getText().toLowerCase() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 0) {
                sql += " and RETUR.TANGGAL='" + tanggal.getText() + "'";
            } else if (cboKriteria.getSelectedIndex() == 2) {
                sql += " and KODERETUR like '" + txtKriteria.getText() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 3) {
                sql += " and RETUR.STATUS = '" + cbStatus.getSelectedIndex()+ "'";
            }
            j.executeQuery(sql);
            
            jScrollPane1.getViewport().remove(tabelData);
            tabelData = new JTable(j);
            tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tabelDataMouseClicked(evt);
                }
            });
            tabelData.getSelectionModel().addListSelectionListener(this);
            //tabelData.getColumnModel().getColumn(4).setCellRenderer(new DecimalFormatRenderer());
            tabelData.setFont(new Font("Tahoma", Font.BOLD, 12));
            tabelData.setRowHeight(20);
            TableColumn col = tabelData.getColumnModel().getColumn(0);
            col.setPreferredWidth(30);
            col = tabelData.getColumnModel().getColumn(3);
            col.setPreferredWidth(250);
            col = tabelData.getColumnModel().getColumn(4);
            col.setPreferredWidth(350);
            col = tabelData.getColumnModel().getColumn(6);
            col.setPreferredWidth(20);
            tabelData.getColumnModel().getColumn(7).setCellRenderer(new DecimalFormatRenderer());
            tabelData.getColumnModel().getColumn(8).setCellRenderer(new DecimalFormatRenderer());
            tabelData.getColumnModel().getColumn(9).setCellRenderer(new DecimalFormatRenderer());
            tabelData.getColumnModel().getColumn(10).setCellRenderer(new DecimalFormatRenderer());
            jScrollPane1.getViewport().add(tabelData);
            jScrollPane1.repaint();
        } else if (pil == 1) {
            String sql = "select RETURBELI.ID, " //1
                    + "KODERETURBELI, " //2
                    + "RETURBELI.TANGGAL, " //3
                    + "SUPPLIER.NAMA, " //4
                    + "KETERANGAN, " //5
                    + "NOFAKTUR, " //6
                    + "RETURBELI.IDPEMBELIAN,  " //7
                    + "RETURBELI.TOTALRETUR, "//8
                    + "RETURBELI.TOTALDISKON, "//9
                    + "RETURBELI.TOTALPPN, "//10
                    + "0 AS TOTALHPP, "//11
                    + "case RETURBELI.STATUS "
                    + "when 0 then 'Draft' "
                    + "when 1 then 'Release' "
                    + "when 2 then 'Batal' end as STATUS " //12
                    + "from RETURBELI inner join SUPPLIER on RETURBELI.IDSUPPLIER = SUPPLIER.IDSUPPLIER\n"
                    + "inner join PEMBELIAN on RETURBELI.IDPEMBELIAN = PEMBELIAN.ID \n"
                    + "where 1=1";
            if (cboKriteria.getSelectedIndex() == 1) {
                sql += " and lower(SUPPLIER.NAMA)  like '%" + txtKriteria.getText().toLowerCase() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 0) {
                sql += " and RETURBELI.TANGGAL='" + tanggal.getText() + "'";
            } else if (cboKriteria.getSelectedIndex() == 2) {
                sql += " and KODERETURBELI like '%" + txtKriteria.getText() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 3) {
//                sql = "select rb.kodereturbeli,rb.tanggal as tanggal_retur, j.tanggal as tanggal_validasi, "
//                        + "j.kodejurnal,s.nama as namasupplier, rj.debet as total, s.idsupplier "
//                        + "from RINCIJURNAL rj inner join jurnal j on rj.kodejurnal = j.id inner join RETURBELI rb on j.kodejurnal = rb.KODERETURBELI "
//                        + "inner join SUPPLIER s on s.IDSUPPLIER = rb.IDSUPPLIER   where ref='RETURBELI' ";
                sql += " and RETURBELI.STATUS = '" + cbStatus.getSelectedIndex()+ "'";
            }
            j.executeQuery(sql);
            
            jScrollPane1.getViewport().remove(tabelData);
            tabelData = new JTable(j);
            tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tabelDataMouseClicked(evt);
                }
            });
            tabelData.getSelectionModel().addListSelectionListener(this);
            //tabelData.getColumnModel().getColumn(4).setCellRenderer(new DecimalFormatRenderer());
            tabelData.setFont(new Font("Tahoma", Font.BOLD, 12));
            tabelData.setRowHeight(20);
            TableColumn col = tabelData.getColumnModel().getColumn(0);
            col.setPreferredWidth(30);
            col = tabelData.getColumnModel().getColumn(3);
            col.setPreferredWidth(250);
            col = tabelData.getColumnModel().getColumn(4);
            col.setPreferredWidth(350);
            col = tabelData.getColumnModel().getColumn(6);
            col.setPreferredWidth(20);
            tabelData.getColumnModel().getColumn(7).setCellRenderer(new DecimalFormatRenderer());
            tabelData.getColumnModel().getColumn(8).setCellRenderer(new DecimalFormatRenderer());
            tabelData.getColumnModel().getColumn(9).setCellRenderer(new DecimalFormatRenderer());
            tabelData.getColumnModel().getColumn(10).setCellRenderer(new DecimalFormatRenderer());
            jScrollPane1.getViewport().add(tabelData);
            jScrollPane1.repaint();

        } else if (pil == 2) {
            String sql = "select RETURDO.ID, " //1
                    + "RETURDO.KODERETURDO, " //2
                    + "RETURDO.TANGGAL, " //3
                    + "PELANGGAN.NAMA, " //4
                    + "RETURDO.KETERANGAN, " //5
                    + "DO.KODEDO, " //6
                    + "RETURDO.IDDO,  " //7
                    + "case RETURDO.STATUS "
                    + "when 0 then 'Draft' "
                    + "when 1 then 'Release' "
                    + "when 2 then 'Batal' end as STATUS " //12
                    + "from RETURDO inner join PELANGGAN on RETURDO.KODEPELANGGAN = PELANGGAN.KODEPELANGGAN\n"
                    + "inner join DO on RETURDO.IDDO = DO.ID \n"
                    + "where 1=1";
            if (cboKriteria.getSelectedIndex() == 1) {
                sql += " and lower(PELANGGAN.NAMA)  like '%" + txtKriteria.getText().toLowerCase() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 0) {
                sql += " and RETURDO.TANGGAL='" + tanggal.getText() + "'";
            } else if (cboKriteria.getSelectedIndex() == 2) {
                sql += " and RETURDO.KODERETURDO like '%" + txtKriteria.getText() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 3) {
                sql += " and RETURDO.STATUS = '" + cbStatus.getSelectedIndex()+ "'";
            }
            j.executeQuery(sql);
            
            jScrollPane1.getViewport().remove(tabelData);
            tabelData = new JTable(j);
            tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tabelDataMouseClicked(evt);
                }
            });
            tabelData.getSelectionModel().addListSelectionListener(this);
            //tabelData.getColumnModel().getColumn(4).setCellRenderer(new DecimalFormatRenderer());
            tabelData.setFont(new Font("Tahoma", Font.BOLD, 12));
            tabelData.setRowHeight(20);
            TableColumn col = tabelData.getColumnModel().getColumn(0);
            col.setPreferredWidth(30);
            col = tabelData.getColumnModel().getColumn(3);
            col.setPreferredWidth(250);
            col = tabelData.getColumnModel().getColumn(4);
            col.setPreferredWidth(350);
            col = tabelData.getColumnModel().getColumn(6);
            col.setPreferredWidth(20);
            jScrollPane1.getViewport().add(tabelData);
            jScrollPane1.repaint();
        }
    }

    public void reloaddataRinci(Connection c, int pil) throws SQLException {
        JDBCAdapter a = new JDBCAdapter(c);
        if (pil == 0) {
            String sql = "SELECT * "
                    + "FROM RETURRINCI "
                    + "WHERE IDRETUR=" + tabelData.getValueAt(tabelData.getSelectedRow(), 0) + "";
            a.executeQuery(sql);
        } else if (pil == 1) {
//            if (cboKriteria.getSelectedIndex() == 3) {
//                String sql = "select 1";
//                a.executeQuery(sql);;
//            } else {
                String sql = "SELECT * FROM RETURBELIRINCI "
                        + "WHERE IDRETURBELI =" + tabelData.getValueAt(tabelData.getSelectedRow(), 0) + "";
                a.executeQuery(sql);
//            }
        } else if (pil == 2) {
                String sql = "SELECT RDR.ID,RDR.IDRETURDO,RDR.KODEBARANG,B.NAMABARANG,J.JENIS,"
                        + "RDR.JUMLAH,RDR.SATUAN,RDR.KODEBATCH,RDR.EXPIRE,RDR.JUMLAHKECIL "
                        + "FROM RETURDORINCI RDR, BARANG B, JENISBARANG J "
                        + "WHERE RDR.KODEBARANG=B.KODEBARANG AND B.IDJENIS=J.ID "
                        + "AND RDR.IDRETURDO =" + tabelData.getValueAt(tabelData.getSelectedRow(), 0) + "";
                a.executeQuery(sql);
        }
        

        jScrollPane2.getViewport().remove(dataRinci);
        dataRinci = new JTable(a);
        //tabelData.getColumnModel().getColumn(4).setCellRenderer(new DecimalFormatRenderer());
        dataRinci.setFont(new Font("Tahoma", Font.BOLD, 12));
        dataRinci.setRowHeight(20);
        jScrollPane2.getViewport().add(dataRinci);
        jScrollPane2.repaint();
        a.close();
    }

    void pilihKriteria(int pil) {
        if (pil == 0) {
            tanggal.setVisible(true);
            txtKriteria.setVisible(false);
            cbStatus.setVisible(false);
        } else if (pil == 1) {
            tanggal.setVisible(false);
            txtKriteria.setVisible(true);
            cbStatus.setVisible(false);
        } else if (pil == 2) {
            tanggal.setVisible(false);
            txtKriteria.setVisible(true);
            cbStatus.setVisible(false);
        } else if (pil == 3) {
            tanggal.setVisible(false);
            txtKriteria.setVisible(false);
            cbStatus.setVisible(true);
        }
    }

    void pilih(int pil) {
        if (pil == 0 || pil == 2) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Tanggal");
            cboKriteria.addItem("Pelanggan");
            cboKriteria.addItem("Kode Retur");
            cboKriteria.addItem("Status");
        } else if (pil == 1) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Tanggal");
            cboKriteria.addItem("Supplier");
            cboKriteria.addItem("Kode Retur");
            cboKriteria.addItem("Status");
        }
    }

    public void bayarHutangDenganRetur(List<hutang> hutangList,
            double jumlahBayar, returbeli rb, double jumlahpersediaan) throws JavarieException {
        Connection con = null;
        try {
            con = koneksi.getKoneksiJ();
            con.setAutoCommit(false);
            if (hutangList.isEmpty()) {
                throw new JavarieException("Hutang Tidak Ada");
            }
            double total = 0;
            double jumbayar = jumlahBayar;
            double totalhutangbayar = 0;
            String ref = rb.getKODERETURBELI();
            total = hutangDao.getJumlahHutangSupplier(con, rb.getIDSUPPLIER());

            if (jumlahBayar > total) {
                throw new JavarieException("Total Retur Pembelian Besar Dari Total Hutang");
            }

            for (Iterator<hutang> it = hutangList.iterator(); it.hasNext();) {
                hutang pt = it.next();
                List<hutangbayar> listp = pt.getListHutangBayar();
                totalhutangbayar = 0;
                for (Iterator<hutangbayar> it1 = listp.iterator(); it1.hasNext();) {
                    hutangbayar object = it1.next();
                    totalhutangbayar += object.getJUMLAH();
                }
                if (pt.getIDPEMBELIAN() == rb.getIDPEMBELIAN()) {
                    double sisa = pt.getJUMLAH() - totalhutangbayar;
                    if (jumbayar >= sisa) {
                        hutangbayar h = new hutangbayar();
                        h.setID(hutangbayarDao.getID(con));
                        h.setIDHUTANG(pt.getID());
                        h.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(con));
                        h.setTANGGAL(rb.getTANGGAL());
                        h.setJUMLAH(sisa);
                        h.setREF(ref);
                        hutangbayarDao.insertIntoHUTANGBAYAR(con, h);
                        pt.setSTATUS("0");
                        hutangDao.updateHUTANG(con, pt.getID(), pt);
                        jumbayar -= sisa;
                    } else {
                        hutangbayar h = new hutangbayar();
                        h.setID(hutangbayarDao.getID(con));
                        h.setIDHUTANG(pt.getID());
                        h.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(con));
                        h.setTANGGAL(rb.getTANGGAL());
                        h.setJUMLAH(jumbayar);
                        h.setREF(ref);
                        jumbayar = 0;
                        hutangbayarDao.insertIntoHUTANGBAYAR(con, h);
                    }
                    if (jumbayar == 0) {
                        break;
                    }
                }
            }
            if (jumbayar > 0) {
                for (Iterator<hutang> it = hutangList.iterator(); it.hasNext();) {
                    hutang pt = it.next();
                    List<hutangbayar> listp = pt.getListHutangBayar();
                    totalhutangbayar = 0;
                    for (Iterator<hutangbayar> it1 = listp.iterator(); it1.hasNext();) {
                        hutangbayar object = it1.next();
                        totalhutangbayar += object.getJUMLAH();
                    }
                    if (pt.getIDPEMBELIAN() != rb.getIDPEMBELIAN()) {
                        double sisa = pt.getJUMLAH() - totalhutangbayar;
                        if (jumbayar >= sisa) {
                            hutangbayar h = new hutangbayar();
                            h.setID(hutangbayarDao.getID(con));
                            h.setIDHUTANG(pt.getID());
                            h.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(con));
                            h.setTANGGAL(rb.getTANGGAL());
                            h.setJUMLAH(sisa);
                            h.setREF(ref);
                            hutangbayarDao.insertIntoHUTANGBAYAR(con, h);
                            pt.setSTATUS("0");
                            hutangDao.updateHUTANG(con, pt.getID(), pt);
                            jumbayar -= sisa;
                        } else {
                            hutangbayar h = new hutangbayar();
                            h.setID(hutangbayarDao.getID(con));
                            h.setIDHUTANG(pt.getID());
                            h.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(con));
                            h.setTANGGAL(rb.getTANGGAL());
                            h.setJUMLAH(jumbayar);
                            h.setREF(ref);
                            jumbayar = 0;
                            hutangbayarDao.insertIntoHUTANGBAYAR(con, h);
                        }
                        if (jumbayar == 0) {
                            break;
                        }
                    }
                }
            }
            insertJurnalReturBeli(con, rb);
            insertRinciJurnalReturBeli(con, rb, jumlahpersediaan);
            con.commit();
            con.setAutoCommit(true);
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException ex1) {
            }
            throw new JavarieException(ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(hutangDao.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }

    void insertJurnalReturBeli(Connection c, returbeli rb) throws SQLException {
        stok st = new stok();
        for (int i = 0; i < dataRinci.getRowCount(); i++) {
            st.setIDPENJUALAN(rb.getID());
            st.setKODEBARANG(dataRinci.getValueAt(i, 2).toString());
            st.setTANGGAL(rb.getTANGGAL());
            st.setIN(0);
            st.setKODETRANS("K");
            st.setKODEBATCH(dataRinci.getValueAt(i, 8).toString());
            st.setOUT(Integer.parseInt(dataRinci.getValueAt(i, 7).toString()));
            stokDao.insertIntoSTOK(c, st);
        }
        jurnal j = new jurnal();
        IDJurnal = jurnalDao.getIDJurnal(c);
        j.setID(IDJurnal);
        j.setTANGGAL(rb.getTANGGAL());
        j.setKODEJURNAL(rb.getKODERETURBELI());
        j.setDESKRIPSI("Pengembalian Barang Ke " + supplierDao.getDetails(c, rb.getIDSUPPLIER()).getNAMA());
        jurnalDao.insertIntoJURNAL(c, j);

    }

    void insertRinciJurnalReturBeli(Connection c, returbeli rb, double totalpersediaan) throws SQLException, ClassNotFoundException {
        Statement s;
        s = c.createStatement();
        double persediaan = total - diskont;
        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "',0," + totalpersediaan + ",1,'')");
        if (tppn != 0) {
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNBELI") + "',0," + tppn + ",3,'')");
        }
        if ((totalpersediaan - persediaan) != 0) {
            if (totalpersediaan - persediaan > 0) {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "ILR") + "'," + Math.abs(totalpersediaan - persediaan) + ",0,3,'')");
            } else {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "ILR") + "',0," + Math.abs(totalpersediaan - persediaan) + ",3,'')");
            }
        }
        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + supplierDao.getDetails(c, rb.getIDSUPPLIER()).getKODEAKUN() + "'," + ttotalbayar + ",0,4,'')");

        JOptionPane.showMessageDialog(panelCool1, "Retur Ini Mengurangkan Hutang");
        s.close();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatalRetur;
    private javax.swing.JButton btnDeleteValidasi;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnUpdateHpp;
    private javax.swing.JButton btnValidasi;
    private javax.swing.JButton btnbayarhutang;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JComboBox cboKriteria;
    private javax.swing.JComboBox cboRetur;
    private javax.swing.JTable dataRinci;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.erv.function.PanelCool panelCool1;
    private javax.swing.JTable tabelData;
    private datechooser.beans.DateChooserCombo tanggal;
    private javax.swing.JTextField txtKriteria;
    // End of variables declaration//GEN-END:variables

    public void valueChanged(ListSelectionEvent lse) {
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddataRinci(c, cboRetur.getSelectedIndex());
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void insertJurnalReturJual(Connection c, retur rj) throws SQLException {
        stok st = new stok();

        for (int i = 0; i < dataRinci.getRowCount(); i++) {

            st.setIDPENJUALAN(rj.getID());
            st.setKODEBARANG(dataRinci.getValueAt(i, 2).toString());
            //st.setTANGGAL(java.sql.Date.valueOf(tglRetur.getText()));
            st.setTANGGAL(rj.getTANGGAL());
            st.setIN(Integer.parseInt(dataRinci.getValueAt(i, 10).toString()));
            st.setKODETRANS("R");
            st.setOUT(0);
            st.setKODEBATCH(dataRinci.getValueAt(i, 12).toString());
            stokDao.insertIntoSTOK(c, st);

        }
        jurnal j = new jurnal();
        IDJurnal = jurnalDao.getIDJurnal(c);
        j.setID(IDJurnal);
        //j.setTANGGAL(java.sql.Date.valueOf(tglRetur.getText()));
        j.setTANGGAL(rj.getTANGGAL());
        j.setKODEJURNAL(rj.getKODERETUR());
        //j.setDESKRIPSI("Pengembalian Barang Dari " + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getNAMA());
        j.setDESKRIPSI(rj.getKETERANGAN());
        jurnalDao.insertIntoJURNAL(c, j);
    }

    void insertRinciJurnalReturJual(Connection c, retur rj) throws SQLException, ClassNotFoundException {
        Statement s;
        s = c.createStatement();
        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
        if (diskont > 0) {
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
        }
        if (tppn > 0) {
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
        }
        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");

    }

    public void bayarPiutangDenganRetur(Connection con, List<piutang> piutangList,
            double jumlahBayar, retur rj) throws JavarieException, SQLException, ClassNotFoundException {
        if (piutangList.isEmpty()) {
            throw new JavarieException("Piutang Tidak Ada");
        }
        double total = 0;
        double totalpiutangbayar = 0;
        double jumbayar = jumlahBayar;
        String ref = rj.getKODERETUR();
        total = piutangDao.getJumlahPiutangPelanggan(con, rj.getKODEPELANGGAN());

        //if (jumlahBayar > total) {
        if ((jumlahBayar - total) >= 5) {
            throw new JavarieException("Total Retur Penjualan Besar Dari Total Piutang");
        }
        for (Iterator<piutang> it = piutangList.iterator(); it.hasNext();) {
            piutang pt = it.next();
            List<piutangbayar> listp = pt.getPiutangBayarList();
            totalpiutangbayar = 0;
            for (Iterator<piutangbayar> it1 = listp.iterator(); it1.hasNext();) {
                piutangbayar object = it1.next();
                totalpiutangbayar += object.getJUMLAH();
            }
            if (pt.getIDPENJUALAN() == rj.getIDPENJUALAN()) {
                double sisa = pt.getJUMLAH() - totalpiutangbayar;
                if (jumbayar >= sisa) {
                    piutangbayar h = new piutangbayar();
                    h.setID(piutangbayarDao.getID(con));
                    h.setIDPIUTANG(pt.getID());
                    h.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(con));
                    h.setTANGGAL(rj.getTANGGAL());
                    h.setJUMLAH(sisa);
                    h.setREF(ref);
                    piutangbayarDao.insertIntoPIUTANGBAYAR(con, h);
                    pt.setSTATUS("0");
                    piutangDao.updatePIUTANG(con, pt);
                    jumbayar -= sisa;
                } else {
                    piutangbayar h = new piutangbayar();
                    h.setID(piutangbayarDao.getID(con));
                    h.setIDPIUTANG(pt.getID());
                    h.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(con));
                    h.setTANGGAL(rj.getTANGGAL());
                    h.setJUMLAH(jumbayar);
                    h.setREF(ref);
                    jumbayar = 0;
                    piutangbayarDao.insertIntoPIUTANGBAYAR(con, h);
                }
                if (jumbayar == 0) {
                    break;
                }
            }
        }
        if (jumbayar > 0) {
            for (Iterator<piutang> it = piutangList.iterator(); it.hasNext();) {
                piutang pt = it.next();
                List<piutangbayar> listp = pt.getPiutangBayarList();
                totalpiutangbayar = 0;
                for (Iterator<piutangbayar> it1 = listp.iterator(); it1.hasNext();) {
                    piutangbayar object = it1.next();
                    totalpiutangbayar += object.getJUMLAH();
                }
                if (pt.getIDPENJUALAN() != rj.getIDPENJUALAN()) {
                    double sisa = pt.getJUMLAH() - totalpiutangbayar;
                    if (jumbayar >= sisa) {
                        piutangbayar h = new piutangbayar();
                        h.setID(piutangbayarDao.getID(con));
                        h.setIDPIUTANG(pt.getID());
                        h.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(con));
                        h.setTANGGAL(rj.getTANGGAL());
                        h.setJUMLAH(sisa);
                        h.setREF(ref);
                        piutangbayarDao.insertIntoPIUTANGBAYAR(con, h);
                        pt.setSTATUS("0");
                        piutangDao.updatePIUTANG(con, pt);
                        jumbayar -= sisa;
                    } else {
                        piutangbayar h = new piutangbayar();
                        h.setID(piutangbayarDao.getID(con));
                        h.setIDPIUTANG(pt.getID());
                        h.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(con));
                        h.setTANGGAL(rj.getTANGGAL());
                        h.setJUMLAH(jumbayar);
                        h.setREF(ref);
                        jumbayar = 0;
                        piutangbayarDao.insertIntoPIUTANGBAYAR(con, h);
                    }
                    if (jumbayar == 0) {
                        break;
                    }
                }
            }
        }
        insertJurnalReturJual(con, rj);
        insertRinciJurnalReturJual(con, rj);
    }
//    void insertRinciJurnalReturJual(Connection c, retur rj) throws SQLException, ClassNotFoundException {
//        Statement s;
//        piutangbayar pb = new piutangbayar();
//        s = c.createStatement();
//        if (totalpiutang >= ttotalbayar) {
//            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
//            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
//            if (diskont > 0) {
//                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
//            }
//            if (tppn > 0) {
//                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
//            }
//            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
//            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");
//            pb.setID(piutangbayarDao.getID(c));
//            pb.setIDPIUTANG(piutangDao.getDetailPiutangperJual(c, rj.getIDPENJUALAN()).getID());
//            pb.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(c));
//            pb.setJUMLAH(ttotalbayar);
//            //pb.setTANGGAL(java.sql.Date.valueOf(tglRetur.getText()));
//            pb.setTANGGAL(rj.getTANGGAL());
//            pb.setREF(rj.getKODERETUR());
//            piutangbayarDao.insertIntoPIUTANGBAYAR(c, pb);
//            JOptionPane.showMessageDialog(panelCool1, "Retur ini Akan Mengurangkan Piutang");
//        //Mengurangi KAS
//////        } else {
//////            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
//////            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "KAS") + "',0," + ttotalbayar + ",2,'RETUR JUAL')");
//////            if (diskont > 0) {
//////                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
//////            }
//////            if (tppn > 0) {
//////                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
//////            }
//////            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
//////            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");
//////            JOptionPane.showMessageDialog(panelCool1, "Retur ini Akan Mengurangkan KAS");
//////        }
//        } else {
//            int idpiutang = 0;
//            double sisapiutang = 0;
//            boolean cekstat = false;
//            Statement spiutang = null;
//            Statement spiutangtot = null;
//            try {
//                String sqlpiutang = "select ID,IDPELANGGAN ,JUMLAH-JUMLAHBAYAR as sisa "
//                        + "from VIEW_PIUTANG where IDPELANGGAN='" + rj.getKODEPELANGGAN() + "'";
//                spiutang = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                ResultSet rspiutang = spiutang.executeQuery(sqlpiutang);
//                if (rspiutang.next()) {
//                    cekstat = true;
//                }
//                if (cekstat) {
//
//                    String sqlpiutangtot = "select sum(JUMLAH-JUMLAHBAYAR) as totpiutang "
//                            + "from VIEW_PIUTANG where IDPELANGGAN='" + rj.getKODEPELANGGAN() + "'";
//                    spiutangtot = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                    ResultSet rspiutangtot = spiutangtot.executeQuery(sqlpiutangtot);
//                    
//                    double sisakaspiutang = 0;
//                    rspiutangtot.next();
//                    sisakaspiutang = ttotalbayar - rspiutangtot.getDouble(1);
//                    if(sisakaspiutang<0){
//                        
//                    }
//                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
////                    if (ttotalbayar > rspiutangtot.getDouble(1)) {
////                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(kodepelanggan1.getText()).getKODEAKUN() + "',0," + rspiutangtot.getDouble(1) + ",2)");
////                    } else {
//                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
////                    }
//                    if (diskont > 0) {
//                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
//                    }
//                    if (tppn > 0) {
//                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
//                    }
//                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
//                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");
//                    rspiutang.beforeFirst();
//                    while (ttotalbayar > 0) {
//                        if (rspiutang.next()) {
//                            if (rspiutang.getDouble(3) != 0) {
//                                pb.setID(piutangbayarDao.getID(c));
//                                //pb.setIDPIUTANG(piutangDao.getDetailPiutangperJual(c, IDjual).getID());
//                                pb.setIDPIUTANG(rspiutang.getInt(1));
//                                pb.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(c));
//                                //pb.setJUMLAH(ttotalbayar);
//                                if (ttotalbayar >= rspiutang.getDouble(3)) {
//                                    pb.setJUMLAH(rspiutang.getDouble(3));
//                                    piutang pt = piutangDao.getDetails(c, rspiutang.getInt(1));
//                                    pt.setSTATUS("0");
//                                    piutangDao.updatePIUTANG(c, pt);
//                                } else {
//                                    pb.setJUMLAH(ttotalbayar);
//                                }
//                                pb.setTANGGAL(rj.getTANGGAL());
//                                pb.setREF(rj.getKODERETUR());
//                                piutangbayarDao.insertIntoPIUTANGBAYAR(c, pb);
//                                ttotalbayar = ttotalbayar - rspiutang.getDouble(3);
//                            }
//                            //System.out.println("error"+rspiutang.getDouble(3));
//                        } else {
//                            //s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "KAS") + "',0," + sisakaspiutang + ",5)");
////                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1)");
////                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "KAS") + "',0," + ttotalbayar + ",2)");
////                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + DiskonItem + ",3)");
////                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + PPNItem + ",0,4)");
////                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5)");
////                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6)");
//                            
//                            break;
//                        }
//
//                    }
//                } else {
////                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
////                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
////                    if (diskont > 0) {
////                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
////                    }
////                    if (tppn > 0) {
////                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
////                    }
////                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
////                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");
//                    JOptionPane.showMessageDialog(this, "Retur Penjualan Ini Tidak Bisa Diproses Karena Piutang Kecil dari Nilai Retur Penjualan");
//                }
//            } catch (Exception e) {
//                System.out.println("errr" + e);
//            }
//
//        }
//
//        s.close();
//        pb = null;
//
//    }

    private void settingtombol(boolean val, boolean batal, boolean hapus) {
        btnValidasi.setEnabled(val);
        btnBatalRetur.setEnabled(batal);
        btnDeleteValidasi.setEnabled(hapus);
    }

    void cektombol() {
        if (JavarieSoftApp.groupuser.equals("Penjualan")) {
            btnValidasi.setVisible(false);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        } else if (JavarieSoftApp.groupuser.equals("KaGudang")) {
            btnValidasi.setVisible(false);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        } else if (JavarieSoftApp.groupuser.equals("Administrator")) {
            btnValidasi.setVisible(true);
            btnDeleteValidasi.setVisible(true);
            btnBatalRetur.setVisible(true);
        } else if (JavarieSoftApp.groupuser.equals("Operator")) {
            btnValidasi.setVisible(false);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        } else if (JavarieSoftApp.groupuser.equals("Asisten Administrator")) {
            btnValidasi.setVisible(true);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        }
    }

    private double getHpp(Connection c, List<rinciretur> rincireturList) throws SQLException {
        double temp = 0;
        for (rinciretur rr : rincireturList) {
            Barangstok bs = BarangstokDao.getDetailKodeBarang(c, rr.getKODEBARANG());
            temp += bs.getCOGS() * rr.getJUMLAHKECIL();
        }
        return temp;
    }

}
