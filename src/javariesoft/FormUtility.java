/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javariesoft;

import com.erv.db.BarangstokDao;
import com.erv.db.BarangstokTempDao;
import com.erv.db.DODao;
import com.erv.db.ReturdoDao;
import com.erv.db.StokPeriodeDao;
import com.erv.db.bankDao;
import com.erv.db.jurnalDao;
import com.erv.db.koneksi;
import com.erv.db.pelangganDao;
import com.erv.db.pembelianDao;
import com.erv.db.penjualanDao;
import com.erv.db.returDao;
import com.erv.db.returbeliDao;
import com.erv.db.rincijurnalDao;
import com.erv.db.rincipenjualanDao;
import com.erv.db.rincireturDao;
import com.erv.db.settingDao;
import com.erv.db.stokDao;
import com.erv.db.supplierDao;
import com.erv.function.JDBCAdapter;
import com.erv.model.Barangstok;
import com.erv.model.BarangstokTemp;
import com.erv.model.DO;
import com.erv.model.DORinci;
import com.erv.model.Returdo;
import com.erv.model.Returdorinci;
import com.erv.model.StokPeriode;
import com.erv.model.bank;
import com.erv.model.jurnal;
import com.erv.model.pembelian;
import com.erv.model.penjualan;
import com.erv.model.retur;
import com.erv.model.returbeli;
import com.erv.model.returbelirinci;
import com.erv.model.rincijurnal;
import com.erv.model.rincipembelian;
import com.erv.model.rincipenjualan;
import com.erv.model.rinciretur;
import com.erv.model.stok;
import java.awt.Cursor;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javariesoft.JavarieSoftView.panelCool1;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class FormUtility extends javax.swing.JFrame {

    /**
     * Creates new form FormUtility
     */
    Connection con;
    pembelian beli;
    penjualan jual;
    returbeli returbeli;
    retur returjual;
    DO dOrder;
    Returdo returdo;
    stok stok;
    String url = "jdbc:h2:tcp://localhost/~/dbalkesmrtalama";
    String username = "sa";
    String password = "APP1107mrta";
    String periode = "";
    jurnal j;
    jurnal jurnal;
    java.text.DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
    double persediaan = 0;
    double debet = 0;
    double kredit = 0;
    int stokBaru = 0;
    String kodebarangKoreksi;
    private boolean statusProses = false;

    public FormUtility() {
        initComponents();
        try {
            periode = txtTahunDasar.getText() + "." + cboBulanDasar.getSelectedIndex();
            con = koneksi.getKoneksiJ();
            tglStokDO.setDateFormat(d);
            persediaan = 0;
            kodebarangKoreksi = "";
            //txtTahun.setText("" + new Util().thnsekarang);
            //txtTahunDasar.setText("" + new Util().thnsekarang);
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboBulan = new javax.swing.JComboBox<>();
        txtTahun = new javax.swing.JTextField();
        cboPilihan = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel = new javax.swing.JTable();
        btnFilter = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelMaster = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelRinci = new javax.swing.JTable();
        btnTampil = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelJurnal = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelJurnalRinci = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabelJurnalRinciTemp = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        debet2 = new javax.swing.JFormattedTextField();
        kredit2 = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        hpp2 = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        debet1 = new javax.swing.JFormattedTextField();
        kredit1 = new javax.swing.JFormattedTextField();
        hpp1 = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        cboBulanDasar = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtTahunDasar = new javax.swing.JTextField();
        btnUpdateBeli = new javax.swing.JButton();
        btnUpdateJurnal = new javax.swing.JButton();
        btnUpdateJual = new javax.swing.JButton();
        btnUpdateReturBeli = new javax.swing.JButton();
        btnUpdateReturJual = new javax.swing.JButton();
        btnIsiStokTemp = new javax.swing.JButton();
        btnDeleteStokTemp = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnUpdateDO = new javax.swing.JButton();
        btnDelStokTemp = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        ftStok = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        ftDO = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        ftStokDO = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        ftPersediaan = new javax.swing.JFormattedTextField();
        jLabel17 = new javax.swing.JLabel();
        ftSelisih = new javax.swing.JFormattedTextField();
        btnInfo = new javax.swing.JButton();
        tglStokDO = new datechooser.beans.DateChooserCombo();
        jLabel18 = new javax.swing.JLabel();
        ftDebet = new javax.swing.JFormattedTextField();
        jLabel19 = new javax.swing.JLabel();
        ftKredit = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        btnPersediaan = new javax.swing.JButton();
        btnInit = new javax.swing.JButton();
        btnProses = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        txtKodebarangKoreksi = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        ftModalLamaKoreksi = new javax.swing.JFormattedTextField();
        jLabel22 = new javax.swing.JLabel();
        ftModalBaruKoreksi = new javax.swing.JFormattedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel23 = new javax.swing.JLabel();
        txtStokLamaKoreksi = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtStokBaruKoreksi = new javax.swing.JTextField();
        btnKoreksi = new javax.swing.JButton();
        btnUpdateStokperiode = new javax.swing.JButton();
        btnSavePersediaan = new javax.swing.JButton();
        btnCekStokPeriode = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        getContentPane().setLayout(null);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormUtility.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 20, 60, 14);

        cboBulan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember" }));
        cboBulan.setSelectedIndex(2);
        cboBulan.setToolTipText(resourceMap.getString("cboBulan.toolTipText")); // NOI18N
        cboBulan.setName("cboBulan"); // NOI18N
        getContentPane().add(cboBulan);
        cboBulan.setBounds(100, 20, 170, 20);

        txtTahun.setText(resourceMap.getString("txtTahun.text")); // NOI18N
        txtTahun.setName("txtTahun"); // NOI18N
        getContentPane().add(txtTahun);
        txtTahun.setBounds(280, 20, 80, 20);

        cboPilihan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Pembelian", "Penjualan", "Retur Beli", "Retur Jual", "DO", "Retur DO", "Koreksi Stok", "Koreksi Harga" }));
        cboPilihan.setName("cboPilihan"); // NOI18N
        getContentPane().add(cboPilihan);
        cboPilihan.setBounds(100, 50, 170, 20);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 50, 60, 14);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TANGGAL", "KODE", "URUTAN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabel.setName("tabel"); // NOI18N
        tabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabel);
        if (tabel.getColumnModel().getColumnCount() > 0) {
            tabel.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tabel.columnModel.title0")); // NOI18N
            tabel.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tabel.columnModel.title1")); // NOI18N
            tabel.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tabel.columnModel.title2")); // NOI18N
            tabel.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tabel.columnModel.title3")); // NOI18N
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(680, 40, 320, 110);

        btnFilter.setText(resourceMap.getString("btnFilter.text")); // NOI18N
        btnFilter.setName("btnFilter"); // NOI18N
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        getContentPane().add(btnFilter);
        btnFilter.setBounds(280, 50, 80, 23);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tabelMaster.setName("tabelMaster"); // NOI18N
        jScrollPane2.setViewportView(tabelMaster);
        if (tabelMaster.getColumnModel().getColumnCount() > 0) {
            tabelMaster.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tabelMaster.columnModel.title0")); // NOI18N
            tabelMaster.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tabelMaster.columnModel.title1")); // NOI18N
            tabelMaster.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tabelMaster.columnModel.title2")); // NOI18N
            tabelMaster.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tabelMaster.columnModel.title3")); // NOI18N
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 140, 500, 50);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tabelRinci.setName("tabelRinci"); // NOI18N
        jScrollPane3.setViewportView(tabelRinci);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(20, 200, 980, 100);

        btnTampil.setText(resourceMap.getString("btnTampil.text")); // NOI18N
        btnTampil.setName("btnTampil"); // NOI18N
        btnTampil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTampilActionPerformed(evt);
            }
        });
        getContentPane().add(btnTampil);
        btnTampil.setBounds(20, 83, 100, 20);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        tabelJurnal.setName("tabelJurnal"); // NOI18N
        tabelJurnal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelJurnalMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabelJurnal);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(20, 310, 740, 60);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        tabelJurnalRinci.setName("tabelJurnalRinci"); // NOI18N
        jScrollPane5.setViewportView(tabelJurnalRinci);

        getContentPane().add(jScrollPane5);
        jScrollPane5.setBounds(20, 380, 740, 130);

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        tabelJurnalRinciTemp.setName("tabelJurnalRinciTemp"); // NOI18N
        jScrollPane6.setViewportView(tabelJurnalRinciTemp);
        if (tabelJurnalRinciTemp.getColumnModel().getColumnCount() > 0) {
            tabelJurnalRinciTemp.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tabelJurnalRinciTemp.columnModel.title0")); // NOI18N
            tabelJurnalRinciTemp.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tabelJurnalRinciTemp.columnModel.title1")); // NOI18N
            tabelJurnalRinciTemp.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tabelJurnalRinciTemp.columnModel.title2")); // NOI18N
            tabelJurnalRinciTemp.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tabelJurnalRinciTemp.columnModel.title3")); // NOI18N
        }

        getContentPane().add(jScrollPane6);
        jScrollPane6.setBounds(20, 520, 740, 130);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(null);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 20, 60, 14);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 50, 60, 14);

        debet2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        debet2.setName("debet2"); // NOI18N
        jPanel1.add(debet2);
        debet2.setBounds(70, 20, 140, 20);

        kredit2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kredit2.setName("kredit2"); // NOI18N
        jPanel1.add(kredit2);
        kredit2.setBounds(70, 50, 140, 20);

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        jPanel1.add(jLabel10);
        jLabel10.setBounds(20, 80, 50, 14);

        hpp2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        hpp2.setName("hpp2"); // NOI18N
        jPanel1.add(hpp2);
        hpp2.setBounds(70, 80, 140, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(770, 460, 230, 110);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(null);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel2.add(jLabel5);
        jLabel5.setBounds(20, 20, 60, 14);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        jPanel2.add(jLabel6);
        jLabel6.setBounds(20, 50, 60, 14);

        debet1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        debet1.setName("debet1"); // NOI18N
        jPanel2.add(debet1);
        debet1.setBounds(70, 20, 140, 20);

        kredit1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        kredit1.setName("kredit1"); // NOI18N
        jPanel2.add(kredit1);
        kredit1.setBounds(70, 50, 140, 20);

        hpp1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        hpp1.setName("hpp1"); // NOI18N
        jPanel2.add(hpp1);
        hpp1.setBounds(70, 80, 140, 20);

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        jPanel2.add(jLabel11);
        jLabel11.setBounds(20, 80, 50, 14);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(770, 340, 230, 120);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(null);

        cboBulanDasar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des" }));
        cboBulanDasar.setSelectedIndex(1);
        cboBulanDasar.setToolTipText(resourceMap.getString("cboBulanDasar.toolTipText")); // NOI18N
        cboBulanDasar.setName("cboBulanDasar"); // NOI18N
        jPanel3.add(cboBulanDasar);
        cboBulanDasar.setBounds(90, 20, 90, 20);

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        jPanel3.add(jLabel7);
        jLabel7.setBounds(10, 20, 70, 14);

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        jPanel3.add(jLabel8);
        jLabel8.setBounds(10, 40, 80, 14);

        txtTahunDasar.setText(resourceMap.getString("txtTahunDasar.text")); // NOI18N
        txtTahunDasar.setName("txtTahunDasar"); // NOI18N
        jPanel3.add(txtTahunDasar);
        txtTahunDasar.setBounds(90, 40, 90, 20);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(470, 10, 200, 70);

        btnUpdateBeli.setText(resourceMap.getString("btnUpdateBeli.text")); // NOI18N
        btnUpdateBeli.setName("btnUpdateBeli"); // NOI18N
        btnUpdateBeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateBeliActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateBeli);
        btnUpdateBeli.setBounds(130, 80, 120, 23);

        btnUpdateJurnal.setText(resourceMap.getString("btnUpdateJurnal.text")); // NOI18N
        btnUpdateJurnal.setName("btnUpdateJurnal"); // NOI18N
        btnUpdateJurnal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateJurnalActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateJurnal);
        btnUpdateJurnal.setBounds(390, 80, 130, 23);

        btnUpdateJual.setText(resourceMap.getString("btnUpdateJual.text")); // NOI18N
        btnUpdateJual.setName("btnUpdateJual"); // NOI18N
        btnUpdateJual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateJualActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateJual);
        btnUpdateJual.setBounds(260, 80, 120, 23);

        btnUpdateReturBeli.setText(resourceMap.getString("btnUpdateReturBeli.text")); // NOI18N
        btnUpdateReturBeli.setName("btnUpdateReturBeli"); // NOI18N
        btnUpdateReturBeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReturBeliActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateReturBeli);
        btnUpdateReturBeli.setBounds(130, 110, 120, 23);

        btnUpdateReturJual.setText(resourceMap.getString("btnUpdateReturJual.text")); // NOI18N
        btnUpdateReturJual.setName("btnUpdateReturJual"); // NOI18N
        btnUpdateReturJual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReturJualActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateReturJual);
        btnUpdateReturJual.setBounds(260, 110, 120, 23);

        btnIsiStokTemp.setText(resourceMap.getString("btnIsiStokTemp.text")); // NOI18N
        btnIsiStokTemp.setName("btnIsiStokTemp"); // NOI18N
        btnIsiStokTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIsiStokTempActionPerformed(evt);
            }
        });
        getContentPane().add(btnIsiStokTemp);
        btnIsiStokTemp.setBounds(20, 110, 100, 23);

        btnDeleteStokTemp.setText(resourceMap.getString("btnDeleteStokTemp.text")); // NOI18N
        btnDeleteStokTemp.setName("btnDeleteStokTemp"); // NOI18N
        btnDeleteStokTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStokTempActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeleteStokTemp);
        btnDeleteStokTemp.setBounds(530, 80, 120, 23);

        btnUpdate.setText(resourceMap.getString("btnUpdate.text")); // NOI18N
        btnUpdate.setName("btnUpdate"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate);
        btnUpdate.setBounds(880, 160, 120, 23);

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        getContentPane().add(jLabel9);
        jLabel9.setBounds(680, 10, 90, 14);

        txtFilter.setText(resourceMap.getString("txtFilter.text")); // NOI18N
        txtFilter.setName("txtFilter"); // NOI18N
        getContentPane().add(txtFilter);
        txtFilter.setBounds(770, 10, 140, 20);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(927, 10, 70, 23);

        btnUpdateDO.setText(resourceMap.getString("btnUpdateDO.text")); // NOI18N
        btnUpdateDO.setName("btnUpdateDO"); // NOI18N
        btnUpdateDO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDOActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateDO);
        btnUpdateDO.setBounds(530, 110, 120, 23);

        btnDelStokTemp.setText(resourceMap.getString("btnDelStokTemp.text")); // NOI18N
        btnDelStokTemp.setName("btnDelStokTemp"); // NOI18N
        btnDelStokTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelStokTempActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelStokTemp);
        btnDelStokTemp.setBounds(530, 140, 120, 23);

        btnLoad.setText(resourceMap.getString("btnLoad.text")); // NOI18N
        btnLoad.setName("btnLoad"); // NOI18N
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        getContentPane().add(btnLoad);
        btnLoad.setBounds(680, 160, 80, 23);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(null);

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        jPanel4.add(jLabel13);
        jLabel13.setBounds(10, 40, 180, 14);

        ftStok.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftStok.setName("ftStok"); // NOI18N
        jPanel4.add(ftStok);
        ftStok.setBounds(10, 60, 180, 20);

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N
        jPanel4.add(jLabel14);
        jLabel14.setBounds(10, 80, 180, 14);

        ftDO.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftDO.setName("ftDO"); // NOI18N
        jPanel4.add(ftDO);
        ftDO.setBounds(10, 100, 180, 20);

        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N
        jPanel4.add(jLabel15);
        jLabel15.setBounds(10, 120, 180, 14);

        ftStokDO.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftStokDO.setName("ftStokDO"); // NOI18N
        jPanel4.add(ftStokDO);
        ftStokDO.setBounds(10, 140, 180, 20);

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        jPanel4.add(jLabel16);
        jLabel16.setBounds(10, 160, 180, 14);

        ftPersediaan.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftPersediaan.setName("ftPersediaan"); // NOI18N
        jPanel4.add(ftPersediaan);
        ftPersediaan.setBounds(10, 180, 180, 20);

        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N
        jPanel4.add(jLabel17);
        jLabel17.setBounds(10, 200, 180, 14);

        ftSelisih.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftSelisih.setName("ftSelisih"); // NOI18N
        jPanel4.add(ftSelisih);
        ftSelisih.setBounds(10, 220, 180, 20);

        btnInfo.setText(resourceMap.getString("btnInfo.text")); // NOI18N
        btnInfo.setName("btnInfo"); // NOI18N
        btnInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoActionPerformed(evt);
            }
        });
        jPanel4.add(btnInfo);
        btnInfo.setBounds(10, 330, 90, 23);

        tglStokDO.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                tglStokDOOnSelectionChange(evt);
            }
        });
        tglStokDO.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                tglStokDOOnCommit(evt);
            }
        });
        jPanel4.add(tglStokDO);
        tglStokDO.setBounds(10, 20, 180, 20);

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N
        jPanel4.add(jLabel18);
        jLabel18.setBounds(10, 240, 80, 14);

        ftDebet.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftDebet.setName("ftDebet"); // NOI18N
        jPanel4.add(ftDebet);
        ftDebet.setBounds(10, 260, 180, 20);

        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N
        jPanel4.add(jLabel19);
        jLabel19.setBounds(10, 280, 80, 14);

        ftKredit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftKredit.setName("ftKredit"); // NOI18N
        jPanel4.add(ftKredit);
        ftKredit.setBounds(10, 300, 180, 20);

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        jPanel4.add(jLabel12);
        jLabel12.setBounds(10, 0, 150, 14);

        btnPersediaan.setText(resourceMap.getString("btnPersediaan.text")); // NOI18N
        btnPersediaan.setName("btnPersediaan"); // NOI18N
        btnPersediaan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersediaanActionPerformed(evt);
            }
        });
        jPanel4.add(btnPersediaan);
        btnPersediaan.setBounds(110, 330, 80, 23);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(1010, 290, 200, 360);

        btnInit.setText(resourceMap.getString("btnInit.text")); // NOI18N
        btnInit.setName("btnInit"); // NOI18N
        btnInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitActionPerformed(evt);
            }
        });
        getContentPane().add(btnInit);
        btnInit.setBounds(370, 20, 90, 23);

        btnProses.setText(resourceMap.getString("btnProses.text")); // NOI18N
        btnProses.setName("btnProses"); // NOI18N
        btnProses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProsesActionPerformed(evt);
            }
        });
        getContentPane().add(btnProses);
        btnProses.setBounds(770, 160, 100, 23);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setLayout(null);

        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N
        jPanel5.add(jLabel20);
        jLabel20.setBounds(10, 10, 90, 14);

        txtKodebarangKoreksi.setText(resourceMap.getString("txtKodebarangKoreksi.text")); // NOI18N
        txtKodebarangKoreksi.setName("txtKodebarangKoreksi"); // NOI18N
        jPanel5.add(txtKodebarangKoreksi);
        txtKodebarangKoreksi.setBounds(10, 30, 180, 20);

        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N
        jPanel5.add(jLabel21);
        jLabel21.setBounds(10, 50, 90, 14);

        ftModalLamaKoreksi.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftModalLamaKoreksi.setText(resourceMap.getString("ftModalLamaKoreksi.text")); // NOI18N
        ftModalLamaKoreksi.setName("ftModalLamaKoreksi"); // NOI18N
        jPanel5.add(ftModalLamaKoreksi);
        ftModalLamaKoreksi.setBounds(10, 70, 180, 20);

        jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N
        jPanel5.add(jLabel22);
        jLabel22.setBounds(10, 90, 170, 14);

        ftModalBaruKoreksi.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        ftModalBaruKoreksi.setText(resourceMap.getString("ftModalBaruKoreksi.text")); // NOI18N
        ftModalBaruKoreksi.setName("ftModalBaruKoreksi"); // NOI18N
        jPanel5.add(ftModalBaruKoreksi);
        ftModalBaruKoreksi.setBounds(10, 110, 180, 20);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jPanel5.add(jSeparator1);
        jSeparator1.setBounds(0, 140, 200, 10);

        jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N
        jPanel5.add(jLabel23);
        jLabel23.setBounds(10, 150, 110, 14);

        txtStokLamaKoreksi.setText(resourceMap.getString("txtStokLamaKoreksi.text")); // NOI18N
        txtStokLamaKoreksi.setName("txtStokLamaKoreksi"); // NOI18N
        jPanel5.add(txtStokLamaKoreksi);
        txtStokLamaKoreksi.setBounds(10, 170, 180, 20);

        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N
        jPanel5.add(jLabel24);
        jLabel24.setBounds(10, 190, 180, 14);

        txtStokBaruKoreksi.setText(resourceMap.getString("txtStokBaruKoreksi.text")); // NOI18N
        txtStokBaruKoreksi.setName("txtStokBaruKoreksi"); // NOI18N
        jPanel5.add(txtStokBaruKoreksi);
        txtStokBaruKoreksi.setBounds(10, 210, 180, 20);

        btnKoreksi.setText(resourceMap.getString("btnKoreksi.text")); // NOI18N
        btnKoreksi.setName("btnKoreksi"); // NOI18N
        btnKoreksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKoreksiActionPerformed(evt);
            }
        });
        jPanel5.add(btnKoreksi);
        btnKoreksi.setBounds(10, 240, 180, 23);

        getContentPane().add(jPanel5);
        jPanel5.setBounds(1010, 10, 200, 270);

        btnUpdateStokperiode.setText(resourceMap.getString("btnUpdateStokperiode.text")); // NOI18N
        btnUpdateStokperiode.setName("btnUpdateStokperiode"); // NOI18N
        btnUpdateStokperiode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStokperiodeActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateStokperiode);
        btnUpdateStokperiode.setBounds(770, 600, 230, 23);

        btnSavePersediaan.setText(resourceMap.getString("btnSavePersediaan.text")); // NOI18N
        btnSavePersediaan.setName("btnSavePersediaan"); // NOI18N
        btnSavePersediaan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePersediaanActionPerformed(evt);
            }
        });
        getContentPane().add(btnSavePersediaan);
        btnSavePersediaan.setBounds(530, 170, 120, 23);

        btnCekStokPeriode.setText(resourceMap.getString("btnCekStokPeriode.text")); // NOI18N
        btnCekStokPeriode.setName("btnCekStokPeriode"); // NOI18N
        btnCekStokPeriode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCekStokPeriodeActionPerformed(evt);
            }
        });
        getContentPane().add(btnCekStokPeriode);
        btnCekStokPeriode.setBounds(770, 570, 230, 23);

        setSize(new java.awt.Dimension(1236, 702));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        periode = txtTahunDasar.getText() + "." + cboBulanDasar.getSelectedIndex();
        reloadData();
        if (tabel.getRowCount() > 0) {
            tabel.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnTampilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTampilActionPerformed
        try {
            // TODO add your handling code here:
            tampil();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTampilActionPerformed

    private void btnUpdateBeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateBeliActionPerformed
        try {
            // TODO add your handling code here:
            prosesUpdateCogs(beli);
            //tampil();
            //JOptionPane.showMessageDialog(this, "Update Beli Ok");
        } catch (Exception ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateBeliActionPerformed

    private void btnUpdateJualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateJualActionPerformed
        try {
            // TODO add your handling code here:
            updateCogs(jual);
            updateStokTemp(jual);
            //tampil();
            //JOptionPane.showMessageDialog(this, "Update Jual Ok");
        } catch (Exception ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateJualActionPerformed

    private void btnUpdateJurnalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateJurnalActionPerformed
        // TODO add your handling code here:
        updateJurnal();
        //tampil();
        //JOptionPane.showMessageDialog(this, "Update HPP dan Stok Temp");
    }//GEN-LAST:event_btnUpdateJurnalActionPerformed

    private void tabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            try {
                ftModalLamaKoreksi.setValue(0);
                txtStokLamaKoreksi.setText("0");
                tampil();
                tampil3();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tabelMouseClicked

    private void btnUpdateReturBeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReturBeliActionPerformed
        try {
            // TODO add your handling code here:
            updateStokTemp(returbeli);
            //updateJurnal();
            //tampil();
            //JOptionPane.showMessageDialog(this, "Update Retur Beli Ok");
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateReturBeliActionPerformed

    private void btnUpdateReturJualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReturJualActionPerformed
        try {
            // TODO add your handling code here:
            updateCogs(returjual);
            updateStokTemp(returjual);
            //tampil();
            //JOptionPane.showMessageDialog(this, "Update Retur Jual Ok");
        } catch (Exception ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateReturJualActionPerformed

    private void btnIsiStokTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIsiStokTempActionPerformed
        // TODO add your handling code here:
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            isiStokTemp(beli);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            isiStokTemp(jual);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
            isiStokTemp(returbeli);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
            isiStokTemp(returjual);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("D")) {
            isiStokTemp(dOrder);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("E")) {
            isiStokTemp(returdo);
        }
    }//GEN-LAST:event_btnIsiStokTempActionPerformed

    private void btnDeleteStokTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStokTempActionPerformed
        try {
            // TODO add your handling code here:
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            BarangstokTempDao.deleteAllBARANGSTOK(con);
            persediaan = 0;
            debet = 0;
            kredit = 0;
            JOptionPane.showMessageDialog(this, "Delete Data Ok");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
        } finally {
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnDeleteStokTempActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        periode = txtTahunDasar.getText() + "." + cboBulanDasar.getSelectedIndex();
//        tabel.requestFocus();
//        tabel.setRowSelectionInterval(0, 0);
//        tabel.changeSelection(0, 0, false, false);
        String sampai = JOptionPane.showInputDialog("Sampai Kode");
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        int i = tabel.getSelectedRow();
        while (i < tabel.getRowCount()) {
            tabel.setRowSelectionInterval(i, i);
            tabel.changeSelection(i, 0, false, false);
            if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals(sampai)) {
                JOptionPane.showMessageDialog(this, "Proses Selesai");
                break;
            }
            if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
                try {
                    //tampil();
                    beli = pembelianDao.getDetailWithRinci(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    btnIsiStokTempActionPerformed(null);
                    //JOptionPane.showMessageDialog(this, "Next");
                    //tampil();
                    btnUpdateBeliActionPerformed(evt);
                    tampil2();
                    btnUpdateJurnalActionPerformed(evt);
                    //JOptionPane.showMessageDialog(this, "Proses Beli Ok");
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
                try {
                    //tampil();
                    penjualanDao jualDao = new penjualanDao();
                    jual = jualDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    btnIsiStokTempActionPerformed(null);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Next");
                    //tampil();
                    btnUpdateJualActionPerformed(evt);
                    //JOptionPane.showMessageDialog(this, "Update Jual Ok");
                    tampil2();
                    btnUpdateJurnalActionPerformed(evt);
                    //JOptionPane.showMessageDialog(this, "Proses Jual Ok");
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
                try {
                    returbeli = returbeliDao.getReturBeli(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    //tampil();
                    btnIsiStokTempActionPerformed(null);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Next");
                    //tampil();
                    btnUpdateReturBeliActionPerformed(evt);
                    tampil2();
                    btnUpdateJurnalActionPerformed(evt);
                    //JOptionPane.showMessageDialog(this, "Proses Retur Beli Ok");
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
                try {
                    returjual = returDao.getRetur(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    //tampil();
                    btnIsiStokTempActionPerformed(null);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Next");
                    //tampil();
                    btnUpdateReturJualActionPerformed(evt);
                    tampil2();
                    btnUpdateJurnalActionPerformed(evt);
                    //JOptionPane.showMessageDialog(this, "Proses Retur Jual Ok");
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("D")) {
                try {
                    //tampil();
                    dOrder = DODao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    btnIsiStokTempActionPerformed(null);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Next");
                    updateStokTemp(dOrder);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Update DO dan Stok Temp");
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("E")) {
                try {
                    //tampil();
                    returdo = ReturdoDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    btnIsiStokTempActionPerformed(null);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Next");
                    updateStokTemp(returdo);
                    //tampil();
                    //JOptionPane.showMessageDialog(this, "Update ReturDO dan Stok Temp");
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
                try {
                    //jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    //tampil();
                    tampil2();
                    btnUpdateJurnalActionPerformed(evt);
                    prosesUpdateKoreksi();
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    break;
                }

            }
            System.out.println("ID-TANGGAL-KODE " + getValueTable(tabel, tabel.getSelectedRow(), 0) + "-(" + getValueTable(tabel, tabel.getSelectedRow(), 1) + ")-" + getValueTable(tabel, tabel.getSelectedRow(), 2));
            i++;
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        reloadData1();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnUpdateDOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDOActionPerformed
        try {
            // TODO add your handling code here:
            updateStokTemp(dOrder);
            btnTampilActionPerformed(evt);
            JOptionPane.showMessageDialog(this, "Update DO dan Stok Temp");
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateDOActionPerformed

    private void btnUpdateStokperiodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStokperiodeActionPerformed
        try {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            updateStokPeriode();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "Update Stok Periode Ok");
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateStokperiodeActionPerformed

    private void btnDelStokTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelStokTempActionPerformed
        try {
            // TODO add your handling code here:
            if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
                penjualanDao pdao = new penjualanDao();
                try {
                    penjualan j = pdao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                    List<rincipenjualan> rincijualList = j.getRincipenjualans();
                    for (rincipenjualan rp : rincijualList) {
                        BarangstokTempDao.deleteFromBARANGSTOK(con, rp.getKODEBARANG());
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
                List<rincipembelian> rincibeliList = pembelianDao.getDetailWithRinci(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString())).getRincipembelians();
                for (rincipembelian rp : rincibeliList) {
                    BarangstokTempDao.deleteFromBARANGSTOK(con, rp.getKODEBARANG());
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
                List<returbelirinci> returbelirinciList = returbeliDao.getReturBeli(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString())).getRincireturList();
                for (returbelirinci rp : returbelirinciList) {
                    BarangstokTempDao.deleteFromBARANGSTOK(con, rp.getKODEBARANG());
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
                List<rinciretur> rincireturList = returDao.getRetur(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString())).getRincireturList();
                for (rinciretur rp : rincireturList) {
                    BarangstokTempDao.deleteFromBARANGSTOK(con, rp.getKODEBARANG());
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("D")) {
                List<DORinci> dORincis = DODao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString())).getdORincis();
                for (DORinci rp : dORincis) {
                    BarangstokTempDao.deleteFromBARANGSTOK(con, rp.getKODEBARANG());
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("E")) {
                List<Returdorinci> returdorincis = ReturdoDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString())).getReturdorincis();
                for (Returdorinci rp : returdorincis) {
                    BarangstokTempDao.deleteFromBARANGSTOK(con, rp.getKodebarang());
                }
            }
            JOptionPane.showMessageDialog(this, "Delete Stok Temp Ok");
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDelStokTempActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            try {
                double totHutang = 0;
                String sql = "select p.ID,"
                        + "ifnull((SELECT CONVERT(PIUTANG.JUMLAH,LONG) FROM PIUTANG WHERE PIUTANG.IDPENJUALAN = p.ID),0) -  "
                        + "ifnull((select sum(CONVERT(PIUTANGBAYAR.JUMLAH,LONG)) from PIUTANGBAYAR  inner join PIUTANG on PIUTANGBAYAR.IDPIUTANG=PIUTANG.ID  where PIUTANG.IDPENJUALAN=p.ID),0) as SISAHUTANG "
                        + "from PENJUALAN p where p.id=" + Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()) + "";
                Statement stat = con.createStatement();
                ResultSet rs = stat.executeQuery(sql);
                if (rs.next()) {
                    totHutang = rs.getDouble(2);
                }
                DialogPenjualanInternal p = new DialogPenjualanInternal(Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()), totHutang, 0);
                p.toFront();
                panelCool1.add(p);
                p.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            String sql = "select p.ID,"
                    + "ifnull((SELECT HUTANG.JUMLAH FROM HUTANG WHERE  HUTANG.IDPEMBELIAN = p.ID),0) - ifnull((SELECT sum(HUTANGBAYAR.JUMLAH)\n"
                    + "FROM HUTANG INNER JOIN HUTANGBAYAR ON HUTANG.ID = HUTANGBAYAR.IDHUTANG\n"
                    + "WHERE HUTANG.IDPEMBELIAN = p.ID),0) as SISA\n"
                    + "from PEMBELIAN p where p.id=" + Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()) + "";
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitActionPerformed
        try {
            // TODO add your handling code here:
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            init();
            periode = txtTahunDasar.getText() + "." + cboBulanDasar.getSelectedIndex();

            pindahStokPeriodeKeBarangStokTemp();
            //pindahstokDOKeBarangStokTemp();
            persediaan = getSaldoPeriode(periode, "11310");
            debet = 0;
            kredit = 0;
            txtStokLamaKoreksi.setText("0");
            txtStokBaruKoreksi.setText("0");
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "Proses Init Selesai");
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnInitActionPerformed

    private void btnInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoActionPerformed
        try {
            // TODO add your handling code here:
            double stok = getStokTemp();
            double persediaanDO = getPersediaanDO(tglStokDO.getText());
            double stokplusDO = stok + persediaanDO;

            double selisih = stokplusDO - persediaan;
            ftStok.setValue(stok);
            ftDO.setValue(persediaanDO);
            ftStokDO.setValue(stokplusDO);
            ftPersediaan.setValue(persediaan);
            ftSelisih.setValue(selisih);
            ftDebet.setValue(debet);
            ftKredit.setValue(kredit);
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnInfoActionPerformed

    private void btnProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProsesActionPerformed
        // TODO add your handling code here:
        periode = txtTahunDasar.getText() + "." + cboBulanDasar.getSelectedIndex();
//        tabel.requestFocus();
//        tabel.setRowSelectionInterval(0, 0);
//        tabel.changeSelection(0, 0, false, false);
//        int i = tabel.getSelectedRow();
//        while (i < tabel.getRowCount()) {
//            tabel.setRowSelectionInterval(i, i);
//            tabel.changeSelection(i, 0, false, false);
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            try {
                //tampil();
                beli = pembelianDao.getDetailWithRinci(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                btnIsiStokTempActionPerformed(null);
                //JOptionPane.showMessageDialog(this, "Next");
                tampil();
                btnUpdateBeliActionPerformed(evt);
                tampil2();
                btnUpdateJurnalActionPerformed(evt);
                //JOptionPane.showMessageDialog(this, "Proses Beli Ok");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            try {
                //tampil();
                penjualanDao jualDao = new penjualanDao();
                jual = jualDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                btnIsiStokTempActionPerformed(null);
                //tampil();
                //JOptionPane.showMessageDialog(this, "Next");
                tampil();
                btnUpdateJualActionPerformed(evt);
                //JOptionPane.showMessageDialog(this, "Update Jual Ok");
                tampil2();
                btnUpdateJurnalActionPerformed(evt);
                //JOptionPane.showMessageDialog(this, "Proses Jual Ok");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
            try {
                returbeli = returbeliDao.getReturBeli(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                //tampil();
                btnIsiStokTempActionPerformed(null);
                //tampil();
                //JOptionPane.showMessageDialog(this, "Next");
                tampil();
                btnUpdateReturBeliActionPerformed(evt);
                tampil2();
                btnUpdateJurnalActionPerformed(evt);
                //JOptionPane.showMessageDialog(this, "Proses Retur Beli Ok");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
            try {
                returjual = returDao.getRetur(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                //tampil();
                btnIsiStokTempActionPerformed(null);
                //tampil();
                //JOptionPane.showMessageDialog(this, "Next");
                tampil();
                btnUpdateReturJualActionPerformed(evt);
                tampil2();
                btnUpdateJurnalActionPerformed(evt);
                //JOptionPane.showMessageDialog(this, "Proses Retur Jual Ok");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("D")) {
            try {
                //tampil();
                dOrder = DODao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                btnIsiStokTempActionPerformed(null);
                //tampil();
                //JOptionPane.showMessageDialog(this, "Next");
                updateStokTemp(dOrder);
                tampil();
                //JOptionPane.showMessageDialog(this, "Update DO dan Stok Temp");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("E")) {
            try {
                //tampil();
                returdo = ReturdoDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                btnIsiStokTempActionPerformed(null);
                //tampil();
                //JOptionPane.showMessageDialog(this, "Next");
                updateStokTemp(returdo);
                tampil();
                //JOptionPane.showMessageDialog(this, "Update ReturDO dan Stok Temp");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
            try {
                //jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                tampil();
                tampil2();
                btnUpdateJurnalActionPerformed(evt);
                prosesUpdateKoreksi();
                ftModalBaruKoreksi.setValue(0);
                ftModalLamaKoreksi.setValue(0);
                txtStokLamaKoreksi.setText("0");
                txtStokBaruKoreksi.setText("0");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
            try {
                //jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
                //tampil();
                statusProses = true;
                tampil2();
                btnUpdateJurnalActionPerformed(evt);
                prosesUpdateKoreksi();
                ftModalBaruKoreksi.setValue(0);
                ftModalLamaKoreksi.setValue(0);
                txtStokLamaKoreksi.setText("0");
                txtStokBaruKoreksi.setText("0");
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());

            }

        }
        btnInfoActionPerformed(evt);
        System.out.println("ID-KODE-TANGGAL " + getValueTable(tabel, tabel.getSelectedRow(), 0) + "-" + getValueTable(tabel, tabel.getSelectedRow(), 1) + "-" + getValueTable(tabel, tabel.getSelectedRow(), 2));
//            i++;
//        }
    }//GEN-LAST:event_btnProsesActionPerformed

    private void btnKoreksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKoreksiActionPerformed
        try {
            // TODO add your handling code here:
            prosesUpdateKoreksi();
            JOptionPane.showMessageDialog(this, "Proses Koreksi Ok");
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnKoreksiActionPerformed

    private void btnSavePersediaanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePersediaanActionPerformed
        try {
            PersediaanTemp persediaanTemp = new PersediaanTemp(getValueTable(tabel, tabel.getSelectedRow(), 1).toString(), persediaan, debet, kredit);
            persediaanTemp.delete();
            persediaanTemp.insert();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSavePersediaanActionPerformed

    private void btnPersediaanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersediaanActionPerformed
        try {
            // TODO add your handling code here:
            PersediaanTemp persediaanTemp = new PersediaanTemp();
            persediaanTemp = persediaanTemp.getPersediaanTemp(con);
            persediaan = persediaanTemp.persediaan;
            debet = persediaanTemp.debet;
            kredit = persediaanTemp.kredit;
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPersediaanActionPerformed

    private void tabelJurnalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelJurnalMouseClicked
        try {
            jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(getValueTable(tabelJurnal, tabelJurnal.getSelectedRow(), 0).toString()));
            setTabelJurnalRinci(jurnal);
            tampil3();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tabelJurnalMouseClicked

    private void tglStokDOOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_tglStokDOOnSelectionChange
        // TODO add your handling code here:

    }//GEN-LAST:event_tglStokDOOnSelectionChange

    private void tglStokDOOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_tglStokDOOnCommit
        // TODO add your handling code here:
        String temp[] = tglStokDO.getText().split("-");
        int tahunDasar = Integer.parseInt(temp[0]);
        int bulanDasar = Integer.parseInt(temp[1]);
        int tahun = ((bulanDasar + 1) == 13) ? tahunDasar + 1 : tahunDasar;
        int bulan = ((bulanDasar + 1) == 13) ? 1 : (bulanDasar + 1);
        txtTahunDasar.setText(tahunDasar + "");
        cboBulanDasar.setSelectedIndex(bulanDasar);
        txtTahun.setText(tahun + "");
        cboBulan.setSelectedIndex(bulan);

    }//GEN-LAST:event_tglStokDOOnCommit

    private void btnCekStokPeriodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCekStokPeriodeActionPerformed
        try {
            // TODO add your handling code here:
            if (cekStokPeriode()) {
                JOptionPane.showMessageDialog(this, "Stok Tidak Sama");
            } else if (cekBarangStokTempDo()) {
                JOptionPane.showMessageDialog(this, "Stok DO ada minus");
            } else {
                JOptionPane.showMessageDialog(this, "Stok Ok");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCekStokPeriodeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormUtility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormUtility().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCekStokPeriode;
    private javax.swing.JButton btnDelStokTemp;
    private javax.swing.JButton btnDeleteStokTemp;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnInfo;
    private javax.swing.JButton btnInit;
    private javax.swing.JButton btnIsiStokTemp;
    private javax.swing.JButton btnKoreksi;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnPersediaan;
    private javax.swing.JButton btnProses;
    private javax.swing.JButton btnSavePersediaan;
    private javax.swing.JButton btnTampil;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateBeli;
    private javax.swing.JButton btnUpdateDO;
    private javax.swing.JButton btnUpdateJual;
    private javax.swing.JButton btnUpdateJurnal;
    private javax.swing.JButton btnUpdateReturBeli;
    private javax.swing.JButton btnUpdateReturJual;
    private javax.swing.JButton btnUpdateStokperiode;
    private javax.swing.JComboBox<String> cboBulan;
    private javax.swing.JComboBox<String> cboBulanDasar;
    private javax.swing.JComboBox<String> cboPilihan;
    private javax.swing.JFormattedTextField debet1;
    private javax.swing.JFormattedTextField debet2;
    private javax.swing.JFormattedTextField ftDO;
    private javax.swing.JFormattedTextField ftDebet;
    private javax.swing.JFormattedTextField ftKredit;
    private javax.swing.JFormattedTextField ftModalBaruKoreksi;
    private javax.swing.JFormattedTextField ftModalLamaKoreksi;
    private javax.swing.JFormattedTextField ftPersediaan;
    private javax.swing.JFormattedTextField ftSelisih;
    private javax.swing.JFormattedTextField ftStok;
    private javax.swing.JFormattedTextField ftStokDO;
    private javax.swing.JFormattedTextField hpp1;
    private javax.swing.JFormattedTextField hpp2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JFormattedTextField kredit1;
    private javax.swing.JFormattedTextField kredit2;
    private javax.swing.JTable tabel;
    private javax.swing.JTable tabelJurnal;
    private javax.swing.JTable tabelJurnalRinci;
    private javax.swing.JTable tabelJurnalRinciTemp;
    private javax.swing.JTable tabelMaster;
    private javax.swing.JTable tabelRinci;
    private datechooser.beans.DateChooserCombo tglStokDO;
    private javax.swing.JTextField txtFilter;
    private javax.swing.JTextField txtKodebarangKoreksi;
    private javax.swing.JTextField txtStokBaruKoreksi;
    private javax.swing.JTextField txtStokLamaKoreksi;
    private javax.swing.JTextField txtTahun;
    private javax.swing.JTextField txtTahunDasar;
    // End of variables declaration//GEN-END:variables

    void reloadData() {
        try {
            JDBCAdapter j = new JDBCAdapter(con);
            String sql = "select distinct IDPENJUALAN, TANGGAL, KODETRANS, "
                    + "case KODETRANS when 'B' then 1 when 'J' then 2 when 'R' then 3 when 'K' then 4 when 'D' then 5 when 'E' then 6 when 'Z' then 7 end as urutan "
                    + "from stok"
                    + " where (month(tanggal) = "
                    + (cboBulan.getSelectedIndex())
                    + " and year(tanggal)=" + txtTahun.getText() + ")";
            if (cboPilihan.getSelectedIndex() == 1) {
                sql += " and kodetrans='B'";
                sql += " order by 2, 4, 1";
            } else if (cboPilihan.getSelectedIndex() == 2) {
                sql += " and kodetrans='J'";
                sql += " UNION ";
                sql += "select ID,TANGGAL, 'J' as KODETRANS, 2 as URUTAN  "
                        + "from penjualan where STATUSDO = '1' and "
                        + "month(tanggal)=" + (cboBulan.getSelectedIndex())
                        + "and year(tanggal)= " + txtTahun.getText()
                        + "";
                sql += " order by 2, 4, 1";
            } else if (cboPilihan.getSelectedIndex() == 3) {
                sql += " and kodetrans='K'";
                sql += " order by 2, 4, 1";
            } else if (cboPilihan.getSelectedIndex() == 4) {
                sql += " and kodetrans='R'";
                sql += " order by 2, 4, 1";
            } else if (cboPilihan.getSelectedIndex() == 5) {
                sql += " and kodetrans='D'";
                sql += " order by 2, 4, 1";
            } else if (cboPilihan.getSelectedIndex() == 6) {
                sql += " and kodetrans='E'";
                sql += " order by 2, 4, 1";
            } else if (cboPilihan.getSelectedIndex() == 7) {
                sql += " and kodetrans='Z'";
                sql += " order by 2, 4, 1";
                System.out.println(sql);
            } else if (cboPilihan.getSelectedIndex() == 8) {
                sql = "select ID,TANGGAL,'KM' as KODETRANS, DESKRIPSI from jurnal where month(tanggal)=" + (cboBulan.getSelectedIndex())
                        + " and year(tanggal)=" + txtTahun.getText()
                        + " and KODEJURNAL like 'KS%' "
                        + "";
            } else if (cboPilihan.getSelectedIndex() == 0) {
                sql += " and (kodetrans='B' OR kodetrans='K' OR kodetrans='J' OR kodetrans='R' or kodetrans='D' or kodetrans='E' or kodetrans='Z')";
                sql += "UNION ";
                sql += "select ID,TANGGAL, 'J' as KODETRANS, 2 as URUTAN  "
                        + "from penjualan where STATUSDO = '1' and "
                        + "month(tanggal)=" + (cboBulan.getSelectedIndex())
                        + "and year(tanggal)= " + txtTahun.getText()
                        + "";
                sql += " order by 2, 4, 1";
            }

            j.executeQuery(sql);
            tabel.setModel(j);
            System.out.println("Jumlah   :" + tabel.getRowCount());
            j.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void reloadData1() {
        try {
            JDBCAdapter j = new JDBCAdapter(con);
            String sql = "select distinct IDPENJUALAN, TANGGAL, KODETRANS, "
                    + "case KODETRANS when 'B' then 1 when 'J' then 2 when 'R' then 3 when 'K' then 4 when 'D' then 5 when 'E' then 6 end as urutan "
                    + "from stok "
                    + " where month(tanggal) = "
                    + (cboBulan.getSelectedIndex())
                    + " and year(tanggal)=" + txtTahun.getText() + ""
                    + " and kodebarang='" + txtFilter.getText() + "'";
            sql += " order by 2, 4";
            j.executeQuery(sql);
            tabel.setModel(j);
            j.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTabelBeli() {
        DefaultTableModel model;
        tabelMaster.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "No Faktur", "Tanggal", "DP", "Pajak", "Diskon", "Status"}
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelMaster.getModel();
        Object data[] = {
            beli.getID(),
            beli.getNOFAKTUR(),
            beli.getTANGGAL(),
            beli.getDP(),
            beli.getPAJAK(),
            beli.getDISKON(),
            beli.getCASH()
        };
        model.addRow(data);
    }

    private void setTabelJual() {
        DefaultTableModel model;
        tabelMaster.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "No Faktur", "Tanggal", "DP", "Pajak", "Diskon"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelMaster.getModel();
        Object data[] = {
            jual.getID(),
            jual.getFAKTUR(),
            jual.getTANGGAL(),
            jual.getDP(),
            jual.getPPN(),
            jual.getDISKON()
        };
        model.addRow(data);
    }

    private void setTabelReturBeli() {
        DefaultTableModel model;
        tabelMaster.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "KODE", "Tanggal"}
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelMaster.getModel();
        Object data[] = {
            returbeli.getID(),
            returbeli.getKODERETURBELI(),
            returbeli.getTANGGAL(),};
        model.addRow(data);
    }

    private void setTabelRinciBeli() {
        DefaultTableModel model;
        tabelRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IDBELI", "KODEBARANG", "KODEBATCH", "JUMLAH", "HARGA", "DISKON", "PPN", "TOTAL", "BONUS", "JUMLAHBST", "COGSBST", "COGS"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelRinci.getModel();
        List<rincipembelian> rincibeliList = beli.getRincipembelians();

        for (rincipembelian rincibeli : rincibeliList) {
            try {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rincibeli.getKODEBARANG());
                Object data[] = {
                    rincibeli.getIDPEMBELIAN(),
                    rincibeli.getKODEBARANG(),
                    rincibeli.getKODEBATCH(),
                    rincibeli.getJUMLAH(),
                    rincibeli.getHARGA(),
                    rincibeli.getDISKON(),
                    rincibeli.getPPN(),
                    rincibeli.getTOTAL(),
                    rincibeli.getBONUS(),
                    (barangstokTemp != null ? barangstokTemp.getSTOK() : 0),
                    (barangstokTemp != null ? barangstokTemp.getCOGS() : 0),
                    getCogs(rincibeli, beli.getTGLMASUK())
                };
                model.addRow(data);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void setTabelRinciJual() {
        DefaultTableModel model;
        tabelRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IDJUAL", "KODEBARANG", "KODEBATCH", "JUMLAH", "HARGA", "DISKON", "PPN", "TOTAL", "BONUS", "COGS", "COGSBS", "COGSBST", "STOKBST", "STOKSP", "IDDO"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelRinci.getModel();
        List<rincipenjualan> rincijualList = jual.getRincipenjualans();
        for (rincipenjualan rincijual : rincijualList) {
            try {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rincijual.getKODEBARANG());
                StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rincijual.getKODEBARANG(), periode);
                Object data[] = {
                    rincijual.getIDPENJUALAN(),
                    rincijual.getKODEBARANG(),
                    rincijual.getKODEBATCH(),
                    rincijual.getJUMLAH(),
                    rincijual.getHARGA(),
                    rincijual.getDISKON(),
                    rincijual.getPPN(),
                    rincijual.getTOTAL(),
                    rincijual.getBONUS(),
                    rincijual.getCOGS(),
                    rincijual.getBarangstok().getCOGS(),
                    (barangstokTemp != null) ? barangstokTemp.getCOGS() : 0,
                    (barangstokTemp != null) ? barangstokTemp.getSTOK() : 0,
                    (stokPeriode != null) ? stokPeriode.getJumlah() : 0,
                    rincijual.getIDDO(),};
                model.addRow(data);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void setTabelReturRinciBeli() {
        DefaultTableModel model;
        tabelRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IDRETURBELI", "KODEBARANG", "KODEBATCH", "JUMLAH", "HARGA", "DISKON", "PPN", "TOTAL", "COGSBST", "STOKBST"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelRinci.getModel();
        List<returbelirinci> returbelirinciList = returbeli.getRincireturList();

        for (returbelirinci rbr : returbelirinciList) {
            try {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rbr.getKODEBARANG());
                Object data[] = {
                    rbr.getIDRETURBELI(),
                    rbr.getKODEBARANG(),
                    rbr.getKODEBATCH(),
                    rbr.getJUMLAH(),
                    rbr.getHARGA(),
                    rbr.getDISKON(),
                    rbr.getPPN(),
                    rbr.getTOTAL(),
                    (barangstokTemp != null ? barangstokTemp.getCOGS() : 0),
                    (barangstokTemp != null ? barangstokTemp.getSTOK() : 0)
                };
                model.addRow(data);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void setTabelJurnal(Object obj) {
        DefaultTableModel model;
        tabelJurnal.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "KODEJURNAL", "TANGGAL", "DESKRIPSI"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelJurnal.getModel();
        jurnal j = null;
        if (obj instanceof pembelian) {
            j = beli.getJurnal();
        } else if (obj instanceof penjualan) {
            j = jual.getJurnal();
        } else if (obj instanceof returbeli) {
            j = returbeli.getJurnal();
        } else if (obj instanceof retur) {
            j = returjual.getJurnal();
        } else if (obj instanceof jurnal) {
            j = jurnal;
        }
        Object data[] = {
            j.getID(),
            j.getKODEJURNAL(),
            j.getTANGGAL(),
            j.getDESKRIPSI()
        };
        model.addRow(data);
    }

    private void setTabelJurnalRinci(Object obj) {
        DefaultTableModel model;
        tabelJurnalRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "KODEJURNAL", "KODEPERKIRAAN", "DEBET", "KREDIT", "NO", "REF"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelJurnalRinci.getModel();
        List<rincijurnal> rincijurnalList = null;
        if (obj instanceof pembelian) {
            rincijurnalList = beli.getJurnal().getRincijurnals();
        } else if (obj instanceof penjualan) {
            rincijurnalList = jual.getJurnal().getRincijurnals();
        } else if (obj instanceof returbeli) {
            rincijurnalList = returbeli.getJurnal().getRincijurnals();
        } else if (obj instanceof retur) {
            rincijurnalList = returjual.getJurnal().getRincijurnals();
        } else if (obj instanceof jurnal) {
            rincijurnalList = jurnal.getRincijurnals();
        }

        for (rincijurnal rinci : rincijurnalList) {
            Object data[] = {
                rinci.getKODEJURNAL(),
                rinci.getKODEPERKIRAAN(),
                rinci.getDEBET(),
                rinci.getKREDIT(),
                rinci.getNO(),
                rinci.getREF()
            };
            model.addRow(data);
        }
    }

    public jurnal susunJurnal(Object obj) throws SQLException {
        jurnal j = null;
        if (obj instanceof pembelian) {
            j = beli.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<rincipembelian> rptemp = beli.getRincipembelians();
            double hppBonus = 0;
            for (rincipembelian rp : rptemp) {
                if (rp.getBONUS().equals("Bonus")) {
                    BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    double thpp = rp.getJUMLAHKECIL() * bs.getCOGS(); // * bs.getCOGS();
                    hppBonus += thpp;
                }
            }
            for (rincijurnal rj : rincijurnalList) {
                try {
                    if (rj.getKODEPERKIRAAN().equals("11310")) {
                        if (rj.getREF().equals("")) {
                            rj.setDEBET(beli.getKalkulasi().get("total"));
                            persediaan += beli.getKalkulasi().get("total");
                            debet += beli.getKalkulasi().get("total");
                        }
                        if (rj.getREF().equals("DISKONBELI")) {
                            rj.setKREDIT(beli.getKalkulasi().get("diskon"));
                            persediaan -= beli.getKalkulasi().get("diskon");
                            kredit += beli.getKalkulasi().get("diskon");
                        }
                        if (rj.getREF().equals("PERSEDIAANBONUS")) {
                            rj.setDEBET(hppBonus);
                            persediaan += hppBonus;
                            debet += hppBonus;
                        }
                    }
                    if (rj.getKODEPERKIRAAN().equals("11202.1")) {
                        rj.setDEBET(beli.getKalkulasi().get("ppn"));
                    }
                    if (rj.getKODEPERKIRAAN().equals("49999.2")) {
                        rj.setKREDIT(hppBonus);
                    }
                    if (rj.getKODEPERKIRAAN().equals("11110")) {
                        if (beli.getDP() > 0) {
                            rj.setKREDIT(beli.getDP());
                        }
                        rj.setKREDIT(beli.getKalkulasi().get("totalbeli"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(supplierDao.getDetails(con, beli.getIDSUPPLIER()).getKODEAKUN())) {
                        rj.setKREDIT(beli.getKalkulasi().get("totalbeli") - beli.getDP());
                    }
                    if (rj.getKODEPERKIRAAN().substring(5).equals("11120")) {
                        rj.setKREDIT(beli.getKalkulasi().get("totalbeli"));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
                rincijurnalListBaru.add(rj);
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof penjualan) {
            j = jual.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<rincipenjualan> rptemp = jual.getRincipenjualans();
            double hppbs = 0;
            double hppBonus = 0;
            for (rincipenjualan rp : rptemp) {
                BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (!rp.getBONUS().equals("Bonus")) {
                    if (bs != null) {
                        double thpp = rp.getJUMLAHKECIL() * bs.getCOGS(); // * bs.getCOGS();
                        hppbs += thpp;
                        //System.out.println("Kode Barang :" + rp.getKODEBARANG() + " Jumlah  :" + rp.getJUMLAHKECIL() + " COGS :" + bs.getCOGS());
                    }
                } else {
                    if (bs != null) {
                        double thppbonus = rp.getJUMLAHKECIL() * bs.getCOGS(); // * bs.getCOGS();
                        hppBonus += thppbonus;
                        //System.out.println("Kode Barang :" + rp.getKODEBARANG() + " Jumlah  :" + rp.getJUMLAHKECIL() + " COGS :" + bs.getCOGS());
                    }
                }
            }
            hpp2.setValue(hppbs);
            for (rincijurnal rj : rincijurnalList) {
                if (jual.getCASH().equals("0")) {
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "KAS"))) {
                        rj.setDEBET(jual.getKalkulasi().get("totaljual"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                        rj.setDEBET(jual.getKalkulasi().get("diskon"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("ppn"));
                    }
                    if (rj.getREF().equals("PERSEDIAANBONUS")) {
                        rj.setKREDIT(hppBonus);
                        persediaan -= hppBonus;
                        kredit += hppBonus;
                    }
                    if (rj.getREF().equals("BONUS")) {
                        rj.setDEBET(hppBonus);
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PENJUALAN"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("total"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                        rj.setDEBET(hppbs);
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                        rj.setKREDIT(hppbs);
                        persediaan -= hppbs;
                        kredit += hppbs;
                    }
                } else if (jual.getCASH().equals("1")) {
                    pelangganDao dbplg = new pelangganDao(con);
                    double sisa = jual.getKalkulasi().get("totaljual") - jual.getDP() + jual.getONGKOSKIRIM();
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "KAS")) && rj.getKREDIT() == 0) {
                        rj.setDEBET(jual.getDP());
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "KAS")) && rj.getDEBET() == 0) {
                        rj.setKREDIT(jual.getONGKOSKIRIM());
                    }

                    if (rj.getKODEPERKIRAAN().equals(dbplg.getDetails(jual.getKODEPELANGGAN()).getKODEAKUN())) {
                        rj.setDEBET(sisa);
                    }

                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                        rj.setDEBET(jual.getKalkulasi().get("diskon"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("ppn"));
                    }
                    if (rj.getREF().equals("PERSEDIAANBONUS")) {
                        rj.setKREDIT(hppBonus);
                        persediaan -= hppBonus;
                        kredit += hppBonus;
                    }
                    if (rj.getREF().equals("BONUS")) {
                        rj.setDEBET(hppBonus);
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PENJUALAN"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("total"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                        rj.setDEBET(hppbs);
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                        rj.setKREDIT(hppbs);
                        persediaan -= hppbs;
                        kredit += hppbs;
                    }
                } else if (jual.getCASH().equals("2")) {
                    try {
                        bank b = bankDao.getDetails(con, jual.getIDBANK());
                        if (rj.getKODEPERKIRAAN().equals(b.getKODEAKUN())) {
                            rj.setDEBET(jual.getKalkulasi().get("totaljual"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                            rj.setDEBET(jual.getKalkulasi().get("diskon"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                            rj.setKREDIT(jual.getKalkulasi().get("ppn"));
                        }
                        if (rj.getREF().equals("PERSEDIAANBONUS")) {
                            rj.setKREDIT(hppBonus);
                            persediaan -= hppBonus;
                            kredit += hppBonus;
                        }
                        if (rj.getREF().equals("BONUS")) {
                            rj.setDEBET(hppBonus);
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PENJUALAN"))) {
                            rj.setKREDIT(jual.getKalkulasi().get("total"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                            rj.setDEBET(hppbs);
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                            rj.setKREDIT(hppbs);
                            persediaan -= hppbs;
                            kredit += hppbs;
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                rincijurnalListBaru.add(rj);
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof returbeli) {
            j = returbeli.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<returbelirinci> rptemp = returbeli.getRincireturList();
            double hppbs = 0;
            for (returbelirinci rp : rptemp) {
                BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (bs != null) {
                    double thpp = rp.getJUMLAHKECIL() * bs.getCOGS();
                    hppbs += thpp;
                }
            }
            boolean stat_ilr = false;
            for (rincijurnal rj : rincijurnalList) {
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                    rj.setKREDIT(hppbs);
                    persediaan -= hppbs;
                    kredit += hppbs;
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNBELI"))) {
                    rj.setKREDIT(returbeli.getKalkulasi().get("ppn"));
                }

                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "ILR"))) {
                    stat_ilr = true;
                    double persediaan1 = returbeli.getKalkulasi().get("total") - returbeli.getKalkulasi().get("diskon");
                    double selisih = persediaan1 - hppbs;
                    if (selisih >= 0) {
                        rj.setKREDIT(Math.abs(selisih));
                        rj.setDEBET(0);
                    } else {
                        rj.setDEBET(Math.abs(selisih));
                        rj.setKREDIT(0);
                    }
                }

                if (rj.getKODEPERKIRAAN().equals(supplierDao.getDetails(con, returbeli.getIDSUPPLIER()).getKODEAKUN())) {
                    rj.setDEBET(returbeli.getKalkulasi().get("totalretur"));
                }
                rincijurnalListBaru.add(rj);
            }
            if (!stat_ilr) {
                double persediaan1 = returbeli.getKalkulasi().get("total") - returbeli.getKalkulasi().get("diskon");
                double selisih = persediaan1 - hppbs;
                rincijurnal rj;
                if (Math.abs(selisih) > 0) {
                    rj = new rincijurnal();
                    rj.setKODEJURNAL(j.getID() + "");
                    rj.setKODEPERKIRAAN(settingDao.getAkun(con, "ILR"));
                    rj.setNO(3);
                    rj.setREF("");
                    if (selisih >= 0) {
                        rj.setKREDIT(Math.abs(selisih));
                        rj.setDEBET(0);
                    } else {
                        rj.setDEBET(Math.abs(selisih));
                        rj.setKREDIT(0);
                    }
                    rincijurnalListBaru.add(rj);
                }
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof retur) {
            j = returjual.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<rinciretur> rptemp = returjual.getRincireturList();
            double hppbs = 0;
            for (rinciretur rp : rptemp) {
                BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (bs != null) {
                    double thpp = rp.getJUMLAHKECIL() * bs.getCOGS();
                    hppbs += thpp;
                }
            }
            hpp2.setValue(hppbs);
            for (rincijurnal rj : rincijurnalList) {
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "RETURJUAL"))) {
                    rj.setDEBET(returjual.getKalkulasi().get("total"));
                }
                if (rj.getKODEPERKIRAAN().equals(new pelangganDao(con).getDetails(returjual.getKODEPELANGGAN()).getKODEAKUN())) {
                    rj.setKREDIT(returjual.getKalkulasi().get("totalretur"));
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                    rj.setKREDIT(returjual.getKalkulasi().get("diskon"));
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                    rj.setDEBET(returjual.getKalkulasi().get("ppn"));
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                    rj.setDEBET(hppbs);
                    persediaan += hppbs;
                    debet += hppbs;
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                    rj.setKREDIT(hppbs);
                }
                rincijurnalListBaru.add(rj);
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof jurnal) {
            j = jurnal;
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
                stok s = stokDao.getStok(con, Integer.parseInt(getValueTable(tabel, tabel.getSelectedRow(), 0).toString()), getValueTable(tabel, tabel.getSelectedRow(), 2).toString());
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, s.getKODEBARANG());
                int stokLama = barangstokTemp.getSTOK();
                kodebarangKoreksi = s.getKODEBARANG();
                //txtStokLamaKoreksi.setText(stokLama + "");
                //"select * from stok where IDPENJUALAN=" + getValueTable(tabel, tabel.getSelectedRow(), 0) + " and KODETRANS='" + getValueTable(tabel, tabel.getSelectedRow(), 2) + "'"

                if (s.getIN() > 0) {
                    stokBaru = s.getIN() + stokLama;
                } else {
                    stokBaru = stokLama - s.getOUT();
                }
                double persediaanKoreksi = getPersediaan(stokLama, stokBaru, barangstokTemp.getCOGS());
                for (rincijurnal rj : rincijurnalList) {
                    if (stokLama < stokBaru) {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                            persediaan += persediaanKoreksi;
                            debet += persediaanKoreksi;
                        } else {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                        }
                    } else {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                            kredit += persediaanKoreksi;
                            persediaan -= persediaanKoreksi;
                        } else {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                        }
                    }
                    rincijurnalListBaru.add(rj);
                }
                j.setRincijurnals(rincijurnalListBaru);
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, txtKodebarangKoreksi.getText());
                double modalLama = Double.parseDouble(ftModalLamaKoreksi.getValue().toString());
                double modalBaru = Double.parseDouble(ftModalBaruKoreksi.getValue().toString());
                double persediaanKoreksi = getPersediaanHarga(barangstokTemp.getSTOK() + barangstokTemp.getSTOKDO(), modalLama, modalBaru);

                for (rincijurnal rj : rincijurnalList) {
                    if (modalLama < modalBaru) {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                            debet += persediaanKoreksi;
                            persediaan += persediaanKoreksi;
                        } else {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                        }
                    } else {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                            kredit += persediaanKoreksi;
                            persediaan -= persediaanKoreksi;
                        } else {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                        }
                    }
                    rincijurnalListBaru.add(rj);
                }
                j.setRincijurnals(rincijurnalListBaru);
            }

        }

        return j;
    }

    public jurnal susunJurnal1(Object obj) throws SQLException {
        jurnal j = null;
        if (obj instanceof pembelian) {
            j = beli.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            for (rincijurnal rj : rincijurnalList) {
                try {
                    if (rj.getKODEPERKIRAAN().equals("11310")) {
                        if (rj.getREF().equals("")) {
                            rj.setDEBET(beli.getKalkulasi().get("total"));
                        }
                        if (rj.getREF().equals("DISKONBELI")) {
                            rj.setKREDIT(beli.getKalkulasi().get("diskon"));
                        }
                        if (rj.getREF().equals("PERSEDIAANBONUS")) {
                            rj.setDEBET(beli.getKalkulasi().get("bonus"));
                        }
                    }
                    if (rj.getKODEPERKIRAAN().equals("11202.1")) {
                        rj.setDEBET(beli.getKalkulasi().get("ppn"));
                    }
                    if (rj.getKODEPERKIRAAN().equals("49999.2")) {
                        rj.setKREDIT(beli.getKalkulasi().get("bonus"));
                    }
                    if (rj.getKODEPERKIRAAN().equals("11110")) {
                        if (beli.getDP() > 0) {
                            rj.setKREDIT(beli.getDP());
                        }
                        rj.setKREDIT(beli.getKalkulasi().get("totalbeli"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(supplierDao.getDetails(con, beli.getIDSUPPLIER()).getKODEAKUN())) {
                        rj.setKREDIT(beli.getKalkulasi().get("totalbeli") - beli.getDP());
                    }
                    if (rj.getKODEPERKIRAAN().substring(5).equals("11120")) {
                        rj.setKREDIT(beli.getKalkulasi().get("totalbeli"));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
                rincijurnalListBaru.add(rj);
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof penjualan) {
            j = jual.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<rincipenjualan> rptemp = jual.getRincipenjualans();
            double hppbs = 0;
            for (rincipenjualan rp : rptemp) {
                if (!rp.getBONUS().equals("Bonus")) {
                    BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    if (bs != null) {
                        double thpp = rp.getJUMLAHKECIL() * rp.getCOGS(); // * bs.getCOGS();
                        hppbs += thpp;
                        //System.out.println("Kode Barang :" + rp.getKODEBARANG() + " Jumlah  :" + rp.getJUMLAHKECIL() + " COGS :" + bs.getCOGS());
                    }
                }
            }
            hpp2.setValue(hppbs);
            for (rincijurnal rj : rincijurnalList) {
                if (jual.getCASH().equals("0")) {
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "KAS"))) {
                        rj.setDEBET(jual.getKalkulasi().get("totaljual"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                        rj.setDEBET(jual.getKalkulasi().get("diskon"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("ppn"));
                    }
                    if (rj.getREF().equals("PERSEDIAANBONUS")) {
                        rj.setKREDIT(jual.getKalkulasi().get("bonus"));
                        persediaan -= jual.getKalkulasi().get("bonus");
                        kredit += jual.getKalkulasi().get("bonus");
                    }
                    if (rj.getREF().equals("BONUS")) {
                        rj.setDEBET(jual.getKalkulasi().get("bonus"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PENJUALAN"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("total"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                        rj.setDEBET(hppbs);
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                        rj.setKREDIT(hppbs);
                    }
                } else if (jual.getCASH().equals("1")) {
                    pelangganDao dbplg = new pelangganDao(con);
                    double sisa = jual.getKalkulasi().get("totaljual") - jual.getDP() + jual.getONGKOSKIRIM();
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "KAS")) && rj.getKREDIT() == 0) {
                        rj.setDEBET(jual.getDP());
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "KAS")) && rj.getDEBET() == 0) {
                        rj.setKREDIT(jual.getONGKOSKIRIM());
                    }

                    if (rj.getKODEPERKIRAAN().equals(dbplg.getDetails(jual.getKODEPELANGGAN()).getKODEAKUN())) {
                        rj.setDEBET(sisa);
                    }

                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                        rj.setDEBET(jual.getKalkulasi().get("diskon"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("ppn"));
                    }
                    if (rj.getREF().equals("PERSEDIAANBONUS")) {
                        rj.setKREDIT(jual.getKalkulasi().get("bonus"));
                    }
                    if (rj.getREF().equals("BONUS")) {
                        rj.setDEBET(jual.getKalkulasi().get("bonus"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PENJUALAN"))) {
                        rj.setKREDIT(jual.getKalkulasi().get("total"));
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                        rj.setDEBET(hppbs);
                    }
                    if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                        rj.setKREDIT(hppbs);
                    }
                } else if (jual.getCASH().equals("2")) {
                    try {
                        bank b = bankDao.getDetails(con, jual.getIDBANK());
                        if (rj.getKODEPERKIRAAN().equals(b.getKODEAKUN())) {
                            rj.setDEBET(jual.getKalkulasi().get("totaljual"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                            rj.setDEBET(jual.getKalkulasi().get("diskon"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                            rj.setKREDIT(jual.getKalkulasi().get("ppn"));
                        }
                        if (rj.getREF().equals("PERSEDIAANBONUS")) {
                            rj.setKREDIT(jual.getKalkulasi().get("bonus"));
                        }
                        if (rj.getREF().equals("BONUS")) {
                            rj.setDEBET(jual.getKalkulasi().get("bonus"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PENJUALAN"))) {
                            rj.setKREDIT(jual.getKalkulasi().get("total"));
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                            rj.setDEBET(hppbs);
                        }
                        if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                            rj.setKREDIT(hppbs);
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                rincijurnalListBaru.add(rj);
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof returbeli) {
            j = returbeli.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<returbelirinci> rptemp = returbeli.getRincireturList();
            double hppbs = 0;
            for (returbelirinci rp : rptemp) {
                BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (bs != null) {
                    double thpp = rp.getJUMLAHKECIL() * bs.getCOGS();
                    hppbs += thpp;
                }
            }
            boolean stat_ilr = false;
            for (rincijurnal rj : rincijurnalList) {
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                    rj.setKREDIT(hppbs);
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNBELI"))) {
                    rj.setKREDIT(returbeli.getKalkulasi().get("ppn"));
                }

                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "ILR"))) {
                    double persediaan1 = returbeli.getKalkulasi().get("total") - returbeli.getKalkulasi().get("diskon");
                    double selisih = persediaan1 - hppbs;
                    if (selisih >= 0) {
                        rj.setKREDIT(Math.abs(selisih));
                        rj.setDEBET(0);
                    } else {
                        rj.setDEBET(Math.abs(selisih));
                        rj.setKREDIT(0);
                    }
                }

                if (rj.getKODEPERKIRAAN().equals(supplierDao.getDetails(con, returbeli.getIDSUPPLIER()).getKODEAKUN())) {
                    rj.setDEBET(returbeli.getKalkulasi().get("totalretur"));
                }
                rincijurnalListBaru.add(rj);
            }
            if (!stat_ilr) {
                double persediaan1 = returbeli.getKalkulasi().get("total") - returbeli.getKalkulasi().get("diskon");
                double selisih = persediaan1 - hppbs;
                rincijurnal rj;
                if (Math.abs(selisih) > 0) {
                    rj = new rincijurnal();
                    rj.setKODEJURNAL(j.getID() + "");
                    rj.setKODEPERKIRAAN(settingDao.getAkun(con, "ILR"));
                    rj.setNO(3);
                    rj.setREF("");
                    if (selisih >= 0) {
                        rj.setKREDIT(Math.abs(selisih));
                        rj.setDEBET(0);
                    } else {
                        rj.setDEBET(Math.abs(selisih));
                        rj.setKREDIT(0);
                    }
                    rincijurnalListBaru.add(rj);
                }
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof retur) {
            j = returjual.getJurnal();
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            List<rinciretur> rptemp = returjual.getRincireturList();
            double hppbs = 0;
            for (rinciretur rp : rptemp) {
                BarangstokTemp bs = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (bs != null) {
                    double thpp = rp.getJUMLAHKECIL() * bs.getCOGS();
                    hppbs += thpp;
                }
            }
            hpp2.setValue(hppbs);
            for (rincijurnal rj : rincijurnalList) {
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "RETURJUAL"))) {
                    rj.setDEBET(returjual.getKalkulasi().get("total"));
                }
                if (rj.getKODEPERKIRAAN().equals(new pelangganDao(con).getDetails(returjual.getKODEPELANGGAN()).getKODEAKUN())) {
                    rj.setKREDIT(returjual.getKalkulasi().get("totalretur"));
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "DISKONJUAL"))) {
                    rj.setKREDIT(returjual.getKalkulasi().get("diskon"));
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PPNJUAL"))) {
                    rj.setDEBET(returjual.getKalkulasi().get("ppn"));
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
                    rj.setDEBET(hppbs);
                }
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                    rj.setKREDIT(hppbs);
                }
                rincijurnalListBaru.add(rj);
            }
            j.setRincijurnals(rincijurnalListBaru);
        } else if (obj instanceof jurnal) {
            j = jurnal;
            List<rincijurnal> rincijurnalList = j.getRincijurnals();
            List<rincijurnal> rincijurnalListBaru = new ArrayList<>();
            if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
                stok s = stokDao.getStok(con, Integer.parseInt(getValueTable(tabel, tabel.getSelectedRow(), 0).toString()), getValueTable(tabel, tabel.getSelectedRow(), 2).toString());
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, s.getKODEBARANG());
                if(barangstokTemp==null){
                    Barangstok bs = BarangstokDao.getDetailKodeBarang(con, s.getKODEBARANG());
                    barangstokTemp = new BarangstokTemp(bs.getID(), bs.getIDGUDANG(), bs.getKODEBARANG(),0,bs.getCOGS(),bs.getHARGAJUAL(),0);
                    BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                }
                int stokLama = barangstokTemp.getSTOK();
                txtStokLamaKoreksi.setText(stokLama + "");
                ftModalLamaKoreksi.setValue(barangstokTemp.getCOGS());

                int stokBaru1 = 0;
                if (s.getIN() > 0) {
                    stokBaru1 = s.getIN() + stokLama;
                } else {
                    stokBaru1 = stokLama - s.getOUT();
                }

                txtStokBaruKoreksi.setText(stokBaru1 + "");
                double persediaanKoreksi = getPersediaan(stokLama, stokBaru1, barangstokTemp.getCOGS());
                for (rincijurnal rj : rincijurnalList) {
                    if (stokLama < stokBaru1) {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                        } else {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                        }
                    } else {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                        } else {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                        }
                    }
                }
            } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, txtKodebarangKoreksi.getText());
                if(barangstokTemp==null){
                    Barangstok bs = BarangstokDao.getDetailKodeBarang(con, txtKodebarangKoreksi.getText());
                    barangstokTemp = new BarangstokTemp(bs.getID(), bs.getIDGUDANG(), bs.getKODEBARANG(),0,bs.getCOGS(),bs.getHARGAJUAL(),0);
                    BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                }
                int stokLama = barangstokTemp.getSTOK();
                txtStokLamaKoreksi.setText(stokLama + "");
                ftModalLamaKoreksi.setValue(barangstokTemp.getCOGS());
                double modalLama = (ftModalLamaKoreksi.getValue() == null ? 0 : Double.parseDouble(ftModalLamaKoreksi.getValue().toString()));
                double modalBaru = (ftModalBaruKoreksi.getValue() == null ? 0 : Double.parseDouble(ftModalBaruKoreksi.getValue().toString()));
                double persediaanKoreksi = getPersediaanHarga(barangstokTemp.getSTOK() + barangstokTemp.getSTOKDO(), modalLama, modalBaru);

                for (rincijurnal rj : rincijurnalList) {
                    if (modalLama < modalBaru) {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                        } else {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                        }
                    } else {
                        if (rj.getKODEPERKIRAAN().equals("11310")) {
                            rj.setDEBET(0);
                            rj.setKREDIT(persediaanKoreksi);
                        } else {
                            rj.setDEBET(persediaanKoreksi);
                            rj.setKREDIT(0);
                        }
                    }
                    rincijurnalListBaru.add(rj);
                }
                j.setRincijurnals(rincijurnalListBaru);
            }

        }

        return j;
    }

    private void setTabelJurnalRinciTemp(jurnal j) {
        DefaultTableModel model;
        tabelJurnalRinciTemp.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "KODEJURNAL", "KODEPERKIRAAN", "DEBET", "KREDIT", "NO", "REF"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelJurnalRinciTemp.getModel();
        List<rincijurnal> rincijurnalList = j.getRincijurnals();
        for (rincijurnal rinci : rincijurnalList) {
            Object data[] = {
                rinci.getKODEJURNAL(),
                rinci.getKODEPERKIRAAN(),
                rinci.getDEBET(),
                rinci.getKREDIT(),
                rinci.getNO(),
                rinci.getREF()
            };
            model.addRow(data);
        }
    }

    void prosesUpdateCogs(pembelian beli) throws SQLException, Exception {
        List<rincipembelian> list = beli.getRincipembelians();
        for (rincipembelian rb : list) {
            if (!rb.getBONUS().equals("Bonus")) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKODEBARANG());
                if (barangstokTemp != null) {
                    int jumlahsemua = barangstokTemp.getSTOK() + rb.getJUMLAHKECIL();
                    double cogs = getCogs(rb, beli.getTGLMASUK());
                    barangstokTemp.setSTOK(jumlahsemua);
                    barangstokTemp.setCOGS(cogs);
                    BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
                }
            } else {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKODEBARANG());
                if (barangstokTemp != null) {
                    int jumlahsemua = barangstokTemp.getSTOK() + rb.getJUMLAHKECIL();
                    barangstokTemp.setSTOK(jumlahsemua);
                    BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
                }
            }
        }
    }

    void updateCogs(Object obj) throws Exception {
        if (obj instanceof penjualan) {
            List<rincipenjualan> rpList = jual.getRincipenjualans();
            for (rincipenjualan rp : rpList) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (barangstokTemp != null) {
                    rp.setCOGS(barangstokTemp.getCOGS());
                    rincipenjualanDao.update(con, rp);
                } else {
                    throw new Exception("Tabel Barang Stok Temp dari Update COGS Belum Ada");
                }
            }
        } else if (obj instanceof retur) {
            List<rinciretur> rincireturList = returjual.getRincireturList();
            for (rinciretur rp : rincireturList) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                if (barangstokTemp != null) {
                    rp.setCOGS(barangstokTemp.getCOGS());
                    rincireturDao.updateRINCIRETUR(con, rp);
                } else {
                    throw new Exception("Tabel Barang Stok Temp dari Update COGS Belum Ada");
                }
            }
        }
    }

    double getCogs(rincipembelian rb, String tgl) {
        double cogs = 0;
        try {
            BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKODEBARANG());
            if (barangstokTemp != null) {
                int totalstok = 0;
                totalstok = barangstokTemp.getSTOK() + barangstokTemp.getSTOKDO();
                double totalpersediaan = totalstok * barangstokTemp.getCOGS();
                double totalbeli = (rb.getHARGA() * rb.getJUMLAH()) - rb.getDISKON();
                int jumlahsemua = totalstok + rb.getJUMLAHKECIL();
                if (jumlahsemua != 0) {
                    cogs = (totalpersediaan + totalbeli) / jumlahsemua;
                } else {
                    cogs = totalbeli / rb.getJUMLAHKECIL();
                }
            } else {
                StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rb.getKODEBARANG(), periode);
                if (stokPeriode != null) {
                    int totalstok = 0;
                    totalstok = stokPeriode.getJumlah() + barangstokTemp.getSTOKDO();
                    double totalpersediaan = totalstok * stokPeriode.getCogs();
                    double totalbeli = (rb.getHARGA() * rb.getJUMLAH()) - rb.getDISKON();
                    int jumlahsemua = totalstok + rb.getJUMLAHKECIL();
                    if (jumlahsemua != 0) {
                        cogs = (totalpersediaan + totalbeli) / jumlahsemua;
                    } else {
                        cogs = totalbeli / rb.getJUMLAHKECIL();
                    }
                } else {
                    double total = (rb.getJUMLAH() * rb.getHARGA()) - rb.getDISKON();
                    cogs = total / rb.getJUMLAHKECIL();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cogs;
    }

    private Object getValueTable(JTable tabel, int row, int kolom) {
        return tabel.getValueAt(row, kolom);
    }

//    void updateHpp(penjualan jual) {
//        double hppbs = 0;
//        for (rincipenjualan rp : jual.getRincipenjualans()) {
//            if (!rp.getBONUS().equals("Bonus")) {
//                Barangstok bs = rp.getBarangstok();
//                double thpp = rp.getJUMLAHKECIL() * bs.getCOGS();
//                hppbs += thpp;
//            }
//        }
//        List<rincijurnal> rincijurnalList = jual.getJurnal().getRincijurnals();
//        for (rincijurnal rj : rincijurnalList) {
//            try {
//                if (rj.getKODEJURNAL().equals(settingDao.getAkun(con, "HPP"))) {
//                    rj.setDEBET(hppbs);
//                }
//                if (rj.getKODEJURNAL().equals(settingDao.getAkun(con, "PERSEDIAAN"))) {
//                    rj.setKREDIT(hppbs);
//                }
//                rincijurnalDao.updateRINCIJURNAL(con, rj);
//            } catch (SQLException ex) {
//                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
    void updateJurnal() {
        try {
            rincijurnalDao.deleteFromRINCIJURNAL(con, j.getID() + "");
            for (rincijurnal rj : j.getRincijurnals()) {
                try {
                    rincijurnalDao.insertIntoRINCIJURNAL(con, rj);
                } catch (SQLException ex) {
                    Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            System.out.println("Update Jurnal :"+j.getID()+"-"+j.getKODEJURNAL());
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void updateStokTemp(Object obj) throws SQLException {
        if (obj instanceof penjualan) {
            for (rincipenjualan rp : jual.getRincipenjualans()) {
                if (!rp.getBONUS().equals("Bonus")) {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    if (barangstokTemp != null) {
                        if (rp.getIDDO() == 0) {
                            barangstokTemp.setSTOK(barangstokTemp.getSTOK() - rp.getJUMLAHKECIL());
                        } else {
                            barangstokTemp.setSTOKDO(barangstokTemp.getSTOKDO() - rp.getJUMLAHKECIL());
                        }
                        BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
                    }
                }
            }
        } else if (obj instanceof returbeli) {
            for (returbelirinci rb : returbeli.getRincireturList()) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKODEBARANG());
                if (barangstokTemp != null) {
                    barangstokTemp.setSTOK(barangstokTemp.getSTOK() - rb.getJUMLAHKECIL());
                    BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
                }
            }
        } else if (obj instanceof retur) {
            for (rinciretur rb : returjual.getRincireturList()) {

                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKODEBARANG());
                barangstokTemp.setSTOK(barangstokTemp.getSTOK() + rb.getJUMLAHKECIL());
//                if (rb.getIDDO() != 0) {
//                    barangstokTemp.setSTOKDO(barangstokTemp.getSTOKDO() + rb.getJUMLAHKECIL());
//                }
                BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
            }
        } else if (obj instanceof DO) {
            for (DORinci rb : dOrder.getdORincis()) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKODEBARANG());
                barangstokTemp.setSTOK(barangstokTemp.getSTOK() - rb.getJUMLAHKECIL());
                barangstokTemp.setSTOKDO(barangstokTemp.getSTOKDO() + rb.getJUMLAHKECIL());
                BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
            }
        } else if (obj instanceof Returdo) {
            for (Returdorinci rb : returdo.getReturdorincis()) {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rb.getKodebarang());
                barangstokTemp.setSTOK(barangstokTemp.getSTOK() + rb.getJumlahkecil());
                barangstokTemp.setSTOKDO(barangstokTemp.getSTOKDO() - rb.getJumlahkecil());
                BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
            }
        }
    }

    private void setTabelReturJual() {
        DefaultTableModel model;
        tabelMaster.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "KODE", "TANGGAL"}
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelMaster.getModel();
        Object data[] = {
            returjual.getID(),
            returjual.getKODERETUR(),
            returjual.getTANGGAL(),};
        model.addRow(data);
    }

    private void setTabelReturJualRinci() {
        DefaultTableModel model;
        tabelRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IDRETURJUAL", "KODEBARANG", "KODEBATCH", "JUMLAH", "HARGA", "DISKON", "PPN", "TOTAL", "COGS", "COGSBST", "STOKBST", "IDDO"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelRinci.getModel();
        List<rinciretur> rincireturList = returjual.getRincireturList();

        for (rinciretur rbr : rincireturList) {
            try {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rbr.getKODEBARANG());
                Object data[] = {
                    rbr.getIDRETUR(),
                    rbr.getKODEBARANG(),
                    rbr.getKODEBATCH(),
                    rbr.getJUMLAH(),
                    rbr.getHARGA(),
                    rbr.getDISKON(),
                    rbr.getPPN(),
                    rbr.getTOTAL(),
                    rbr.getCOGS(),
                    (barangstokTemp != null ? barangstokTemp.getCOGS() : 0),
                    (barangstokTemp != null ? barangstokTemp.getSTOK() : 0),
                    rbr.getIDDO()
                };
                model.addRow(data);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void updateReturBeli() {
        try {
            List<rincijurnal> list = j.getRincijurnals();
            rincijurnalDao.deleteFromRINCIJURNAL(con, j.getKODEJURNAL());
            for (rincijurnal rj : list) {
                if (rj.getDEBET() != 0 || rj.getKREDIT() != 0) {
                    rincijurnalDao.insertIntoRINCIJURNAL(con, rj);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void isiStokTemp(Object obj) {
        boolean status = false;
        if (obj instanceof penjualan) {
            for (rincipenjualan rp : jual.getRincipenjualans()) {
                try {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    Barangstok barangstok = rp.getBarangstok();
                    if (barangstokTemp == null) {
                        barangstokTemp = new BarangstokTemp();
                        StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rp.getKODEBARANG(), periode);
                        barangstokTemp.setID(barangstok.getID());
                        barangstokTemp.setIDGUDANG(barangstok.getIDGUDANG());
                        barangstokTemp.setKODEBARANG(rp.getKODEBARANG());
                        if (stokPeriode != null) {
                            barangstokTemp.setSTOK(stokPeriode.getJumlah());
                            barangstokTemp.setCOGS(stokPeriode.getCogs());
                        } else {
                            barangstokTemp.setSTOK(0);
                            barangstokTemp.setCOGS(0);
                        }
                        barangstokTemp.setHARGAJUAL(barangstok.getHARGAJUAL());
                        BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                        status = true;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                }
            }
//            if (status) {
//                JOptionPane.showMessageDialog(this, "Buat Stok Temp Ok");
//            }
        } else if (obj instanceof pembelian) {
            for (rincipembelian rp : beli.getRincipembelians()) {
                try {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    Barangstok barangstok = rp.getBarangstok();
                    if (barangstokTemp == null) {
                        barangstokTemp = new BarangstokTemp();
                        StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rp.getKODEBARANG(), periode);
                        barangstokTemp.setID(barangstok.getID());
                        barangstokTemp.setIDGUDANG(barangstok.getIDGUDANG());
                        barangstokTemp.setKODEBARANG(rp.getKODEBARANG());
                        if (stokPeriode != null) {
                            barangstokTemp.setSTOK(stokPeriode.getJumlah());
                            barangstokTemp.setCOGS(stokPeriode.getCogs());
                        } else {
                            barangstokTemp.setSTOK(0);
                            barangstokTemp.setCOGS(0);
                        }
                        barangstokTemp.setHARGAJUAL(barangstok.getHARGAJUAL());
                        BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                        status = true;

                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                }

            }
//            if (status) {
//                JOptionPane.showMessageDialog(this, "Buat Stok Temp Ok");
//            }
        } else if (obj instanceof returbeli) {
            for (returbelirinci rp : returbeli.getRincireturList()) {
                try {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    Barangstok barangstok = rp.getBarangstok();
                    if (barangstokTemp == null) {
                        barangstokTemp = new BarangstokTemp();
                        StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rp.getKODEBARANG(), periode);
                        barangstokTemp.setID(barangstok.getID());
                        barangstokTemp.setIDGUDANG(barangstok.getIDGUDANG());
                        barangstokTemp.setKODEBARANG(rp.getKODEBARANG());
                        if (stokPeriode != null) {
                            barangstokTemp.setSTOK(stokPeriode.getJumlah());
                            barangstokTemp.setCOGS(stokPeriode.getCogs());
                        } else {
                            barangstokTemp.setSTOK(0);
                            barangstokTemp.setCOGS(0);
                        }
                        barangstokTemp.setHARGAJUAL(barangstok.getHARGAJUAL());
                        BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                        status = true;

                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                }
            }
//            if (status) {
//                JOptionPane.showMessageDialog(this, "Buat Stok Temp Ok");
//            }
        } else if (obj instanceof retur) {
            for (rinciretur rp : returjual.getRincireturList()) {
                try {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    Barangstok barangstok = rp.getBarangstok();
                    if (barangstokTemp == null) {
                        barangstokTemp = new BarangstokTemp();
                        StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rp.getKODEBARANG(), periode);
                        barangstokTemp.setID(barangstok.getID());
                        barangstokTemp.setIDGUDANG(barangstok.getIDGUDANG());
                        barangstokTemp.setKODEBARANG(rp.getKODEBARANG());
                        if (stokPeriode != null) {
                            barangstokTemp.setSTOK(stokPeriode.getJumlah());
                            barangstokTemp.setCOGS(stokPeriode.getCogs());
                        } else {
                            barangstokTemp.setSTOK(0);
                            barangstokTemp.setCOGS(0);
                        }
                        barangstokTemp.setHARGAJUAL(barangstok.getHARGAJUAL());
                        BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                        status = true;

                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                }
            }
//            if (status) {
//                JOptionPane.showMessageDialog(this, "Buat Stok Temp Ok");
//            }
        } else if (obj instanceof DO) {
            for (DORinci rp : dOrder.getdORincis()) {
                try {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKODEBARANG());
                    Barangstok barangstok = rp.getBarangstok();
                    if (barangstokTemp == null) {
                        barangstokTemp = new BarangstokTemp();
                        StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rp.getKODEBARANG(), periode);
                        barangstokTemp.setID(barangstok.getID());
                        barangstokTemp.setIDGUDANG(barangstok.getIDGUDANG());
                        barangstokTemp.setKODEBARANG(rp.getKODEBARANG());
                        if (stokPeriode != null) {
                            barangstokTemp.setSTOK(stokPeriode.getJumlah());
                            barangstokTemp.setCOGS(stokPeriode.getCogs());
                        } else {
                            barangstokTemp.setSTOK(0);
                            barangstokTemp.setCOGS(0);
                        }
                        barangstokTemp.setHARGAJUAL(barangstok.getHARGAJUAL());
                        BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                        status = true;

                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                }
            }
//            if (status) {
//                JOptionPane.showMessageDialog(this, "Buat Stok Temp Ok");
//            }
        } else if (obj instanceof Returdo) {
            for (Returdorinci rp : returdo.getReturdorincis()) {
                try {
                    BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rp.getKodebarang());
                    Barangstok barangstok = rp.getBarangstok();
                    if (barangstokTemp == null) {
                        barangstokTemp = new BarangstokTemp();
                        StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, rp.getKodebarang(), periode);
                        barangstokTemp.setID(barangstok.getID());
                        barangstokTemp.setIDGUDANG(barangstok.getIDGUDANG());
                        barangstokTemp.setKODEBARANG(rp.getKodebarang());
                        if (stokPeriode != null) {
                            barangstokTemp.setSTOK(stokPeriode.getJumlah());
                            barangstokTemp.setCOGS(stokPeriode.getCogs());
                        } else {
                            barangstokTemp.setSTOK(0);
                            barangstokTemp.setCOGS(0);
                        }
                        barangstokTemp.setHARGAJUAL(barangstok.getHARGAJUAL());
                        BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                        status = true;

                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                }
            }
//            if (status) {
//                JOptionPane.showMessageDialog(this, "Buat Stok Temp Ok");
//            }
        }
    }

    private void clearTabel() {
        DefaultTableModel model = (DefaultTableModel) tabelJurnalRinci.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) tabelJurnalRinciTemp.getModel();
        model.setRowCount(0);
    }

    private void setTabelDO() {
        DefaultTableModel model;
        tabelMaster.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "KODE", "TANGGAL"}
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelMaster.getModel();
        Object data[] = {
            dOrder.getID(),
            dOrder.getKODEDO(),
            dOrder.getTANGGAL(),};
        model.addRow(data);
    }

    private void setTabelDORinci() {
        DefaultTableModel model;
        tabelRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IDDO", "KODEBARANG", "KODEBATCH", "JUMLAH", "SATUAN", "JUMLAHKECIL", "COGSBST", "STOKBST"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelRinci.getModel();
        List<DORinci> dorinciList = dOrder.getdORincis();

        for (DORinci rbr : dorinciList) {
            try {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rbr.getKODEBARANG());
                Object data[] = {
                    rbr.getIDDO(),
                    rbr.getKODEBARANG(),
                    rbr.getKODEBATCH(),
                    rbr.getJUMLAH(),
                    rbr.getSATUAN(),
                    rbr.getJUMLAHKECIL(),
                    (barangstokTemp != null ? barangstokTemp.getCOGS() : 0),
                    (barangstokTemp != null ? barangstokTemp.getSTOK() : 0),};
                model.addRow(data);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void setTabelReturDO() {
        DefaultTableModel model;
        tabelMaster.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "KODE", "TANGGAL"}
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelMaster.getModel();
        Object data[] = {
            returdo.getId(),
            returdo.getKodereturdo(),
            returdo.getTanggal(),};
        model.addRow(data);
    }

    private void setTabelReturDORinci() {
        DefaultTableModel model;
        tabelRinci.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IDRETURDO", "KODEBARANG", "KODEBATCH", "JUMLAH", "SATUAN", "JUMLAHKECIL", "COGSBST", "STOKBST"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        model = (DefaultTableModel) tabelRinci.getModel();
        List<Returdorinci> dorinciList = returdo.getReturdorincis();

        for (Returdorinci rbr : dorinciList) {
            try {
                BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, rbr.getKodebarang());
                Object data[] = {
                    rbr.getIdreturdo(),
                    rbr.getKodebarang(),
                    rbr.getKodebatch(),
                    rbr.getJumlah(),
                    rbr.getSatuan(),
                    rbr.getJumlahkecil(),
                    (barangstokTemp != null ? barangstokTemp.getCOGS() : 0),
                    (barangstokTemp != null ? barangstokTemp.getSTOK() : 0),};
                model.addRow(data);
            } catch (SQLException ex) {
                Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void updateStokPeriode() throws SQLException {
        // TODO add your handling code here:
        String periodeUpdate = txtTahun.getText() + "." + cboBulan.getSelectedIndex();
        List<BarangstokTemp> barangstokTemps = BarangstokTempDao.getAllDetails(con);
        for (BarangstokTemp bst : barangstokTemps) {
            StokPeriode stokPeriode = StokPeriodeDao.getStokPeriode(con, bst.getKODEBARANG(), periodeUpdate);
            stokPeriode.setCogs(bst.getCOGS());
            StokPeriodeDao.update(con, stokPeriode);
        }
    }

    int getStokDO(String tgl, String kodebarang) throws SQLException {
        int hasil = 0;
        String sql = "select (sum(in) - sum(out)) as hasil from "
                + "VIEWSTOKDO where TANGGAL <= ? and kodebarang=?";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, tgl);
        ps.setString(2, kodebarang);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            hasil = rs.getInt(1);
        }
        return hasil;
    }

    double getPersediaanDO(String tanggal) throws SQLException {
        double hasil = 0;
        List<BarangstokTemp> barangstokTemps;
        barangstokTemps = BarangstokTempDao.getAllDetails(con);
        for (BarangstokTemp barangstokTemp : barangstokTemps) {
            //if (barangstokTemp.getSTOKDO() > 0) {
            hasil += barangstokTemp.getCOGS() * barangstokTemp.getSTOKDO();
            // }
        }
        return hasil;
    }

    void tampil() throws SQLException, ClassNotFoundException {
        clearTabel();
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            beli = pembelianDao.getDetailWithRinci(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelBeli();
            setTabelRinciBeli();
            setTabelJurnal(beli);
            setTabelJurnalRinci(beli);
            debet1.setValue(beli.getJurnal().getDebet());
            kredit1.setValue(beli.getJurnal().getKredit());
//            j = susunJurnal(beli);
//            setTabelJurnalRinciTemp(j);
//            debet2.setValue(j.getDebet());
//            kredit2.setValue(j.getKredit());
//            hpp1.setValue(0);
//            hpp2.setValue(0);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            penjualanDao jualDao = new penjualanDao();
            jual = jualDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelJual();
            setTabelRinciJual();
            setTabelJurnal(jual);
            setTabelJurnalRinci(jual);
            debet1.setValue(jual.getJurnal().getDebet());
            kredit1.setValue(jual.getJurnal().getKredit());
            double hppt = 0;
            for (rincijurnal rj : jual.getJurnal().getRincijurnals()) {
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                    hppt = rj.getDEBET();
                    break;
                }
            }
            hpp1.setValue(hppt);
//            j = susunJurnal(jual);
//            setTabelJurnalRinciTemp(j);
//            debet2.setValue(j.getDebet());
//            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
            returbeli = returbeliDao.getReturBeli(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelReturBeli();
            setTabelReturRinciBeli();
            setTabelJurnal(returbeli);
            setTabelJurnalRinci(returbeli);
            debet1.setValue(returbeli.getJurnal().getDebet());
            kredit1.setValue(returbeli.getJurnal().getKredit());
//            j = susunJurnal(returbeli);
//            setTabelJurnalRinciTemp(j);
//            debet2.setValue(j.getDebet());
//            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
            returjual = returDao.getRetur(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelReturJual();
            setTabelReturJualRinci();
            setTabelJurnal(returjual);
            setTabelJurnalRinci(returjual);
            debet1.setValue(returjual.getJurnal().getDebet());
            kredit1.setValue(returjual.getJurnal().getKredit());
            double hppt = 0;
            for (rincijurnal rj : returjual.getJurnal().getRincijurnals()) {
                if (rj.getKODEPERKIRAAN().equals(settingDao.getAkun(con, "HPP"))) {
                    hppt = rj.getKREDIT();
                    break;
                }
            }
            hpp1.setValue(hppt);
//            j = susunJurnal(returjual);
//            setTabelJurnalRinciTemp(j);
//            debet2.setValue(j.getDebet());
//            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("D")) {
            dOrder = DODao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelDO();
            setTabelDORinci();
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("E")) {
            returdo = ReturdoDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelReturDO();
            setTabelReturDORinci();
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
            jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            setTabelJurnal(jurnal);
            setTabelJurnalRinci(jurnal);
            String temp[] = jurnal.getDESKRIPSI().split(" ");
            txtKodebarangKoreksi.setText(temp[temp.length - 1]);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
            reloadStok();
            //stok = stokDao.getStok(con, (int) getValueTable(tabel, tabel.getSelectedRow(), 0), getValueTable(tabel, tabel.getSelectedRow(), 2).toString());
            txtKodebarangKoreksi.setText(getValueTable(tabelMaster, 0, 1).toString());
            //jurnal = jurnalDao.getJurnal(con, getValueTable(tabelMaster, 0, 2).toString(), getValueTable(tabelMaster, 0, 1).toString());
            reloadJurnal(getValueTable(tabelMaster, 0, 2).toString(), getValueTable(tabelMaster, 0, 1).toString());
            tabelJurnal.setRowSelectionInterval(0, 0);
            jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(getValueTable(tabelJurnal, tabelJurnal.getSelectedRow(), 0).toString()));

            //setTabelJurnal(jurnal);
            setTabelJurnalRinci(jurnal);
        }
    }

    void tampil2() throws SQLException, ClassNotFoundException, IOException {
        //clearTabel();
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            beli = pembelianDao.getDetailWithRinci(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal(beli);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
            hpp1.setValue(0);
            hpp2.setValue(0);

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            penjualanDao jualDao = new penjualanDao();
            jual = jualDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal(jual);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
            returbeli = returbeliDao.getReturBeli(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal(returbeli);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
            returjual = returDao.getRetur(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal(returjual);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
            jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal(jurnal);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
            stok s = stokDao.getStok(con, (int) getValueTable(tabel, tabel.getSelectedRow(), 0), getValueTable(tabel, tabel.getSelectedRow(), 2).toString());
            List<jurnal> jurnals = jurnalDao.getJurnalList(con, s.getTANGGAL(), s.getKODEBARANG());
            if (!statusProses) {
                if (jurnals.size() > 1) {
                    throw new IOException("Jurnal Lebih dari 1");
                }else{
                    jurnal = jurnals.get(0);
                }
            } else {
                jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(getValueTable(tabelJurnal, tabelJurnal.getSelectedRow(), 0).toString()));
            }
            statusProses = false;
            //jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(getValueTable(tabelJurnal, tabelJurnal.getSelectedRow(), 0).toString()));
            j = susunJurnal(jurnal);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
        }
    }

    void isiStokTemp() {
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            isiStokTemp(beli);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            isiStokTemp(jual);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
            isiStokTemp(returbeli);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
            isiStokTemp(returjual);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("D")) {
            isiStokTemp(dOrder);
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("E")) {
            isiStokTemp(returdo);
        }
    }

    void init() throws SQLException {
        String drop = "drop table if exists PUBLIC.BARANGSTOKTEMP;"
                + "drop table if exists PUBLIC.PERSEDIAANTEMP;"
                + "drop view if exists viewstokdo;";
        String sql = "CREATE TABLE PUBLIC.BARANGSTOKTEMP ( "
                + "    ID INT(10) NOT NULL, "
                + "    IDGUDANG INT(10) NOT NULL, "
                + "    KODEBARANG VARCHAR(20) NOT NULL, "
                + "    STOK INT(10) NOT NULL, "
                + "    COGS DOUBLE(17) DEFAULT '0' NOT NULL, "
                + "    HARGAJUAL DOUBLE(17) DEFAULT '0' NOT NULL,  "
                + "    STOKDO INT(10) NOT NULL "
                + "); "
                + " "
                + "ALTER TABLE PUBLIC.BARANGSTOKTEMP ADD CONSTRAINT PK_BARANGSTOKTEMP PRIMARY KEY (ID); "
                + "";
        String sqlviewstokdo = "create view viewstokdo as  "
                + "(select kodebarang,tanggal, kodebatch, dr.jumlahkecil as in, 0 as out, 'DO' as jenis, 1 as nourut "
                + "from do d  "
                + "inner join DORINCI dr on d.id = dr.iddo  "
                + "union all "
                + "select kodebarang,tanggal, kodebatch, 0 as in, rp.jumlahkecil as out, 'JUAL' as jenis, 2 as nourut "
                + "from PENJUALAN p  "
                + "inner join RINCIPENJUALAN rp on p.id = rp.IDPENJUALAN where rp.IDDO>0 "
                + "union all "
                + "select kodebarang,tanggal, kodebatch, 0 as in, rdr.jumlahkecil as out, 'RETURDO' as jenis, 3 as nourut "
                + "from RETURDO r  "
                + "inner join RETURDORINCI rdr on r.id = rdr.IDRETURDO) "
                + "order by 2, 7; "
                + " "
                + "";
        Statement stat = con.createStatement();
        stat.execute(drop);
        stat.execute(sql);
        stat.execute(sqlviewstokdo);
    }

    public void pindahStokPeriodeKeBarangStokTemp() {
        try {
            String periodeSebelum = txtTahunDasar.getText() + "." + cboBulanDasar.getSelectedIndex();
            List<StokPeriode> stokPeriodes = StokPeriodeDao.getStokPeriode(con, periodeSebelum);
            for (StokPeriode stokPeriode : stokPeriodes) {
                Barangstok barangstok = BarangstokDao.getDetailKodeBarang(con, stokPeriode.getKodebarang());
                BarangstokTemp barangstokTemp
                        = new BarangstokTemp(barangstok.getID(),
                                barangstok.getIDGUDANG(),
                                barangstok.getKODEBARANG(),
                                stokPeriode.getJumlah(),
                                stokPeriode.getCogs(),
                                barangstok.getHARGAJUAL(), 0);
                BarangstokTempDao.insertIntoBARANGSTOK(con, barangstokTemp);
                int stokDO = getStokDO(tglStokDO.getText(), barangstok.getKODEBARANG());
                //if (stokDO > 0) {
                barangstokTemp.setSTOKDO(stokDO);
                BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
                //}
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public double getStokTemp() throws SQLException {
        String sql = "select sum(stok * cogs) as total from BARANGSTOKTEMP";
        Statement stat = con.createStatement();
        ResultSet rs = stat.executeQuery(sql);
        if (rs.next()) {
            return rs.getDouble(1);
        }
        return 0;
    }

    public double getSaldoPeriode(String periode, String kodeakun) throws SQLException {
        String sql = "select saldo from saldoperiode where periode=? and kodeakun=?";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, periode);
        ps.setString(2, kodeakun);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            return rs.getDouble(1);
        }
        return 0;
    }

    public double getPersediaanPerTanggal(String tglAwal, String tglAkhir) throws SQLException {
        String sql = "select sum(debet) - sum(kredit) from jurnal j  "
                + "inner join RINCIJURNAL rj on  j.id = rj.KODEJURNAL "
                + "where TANGGAL >= ? and TANGGAL <= ? "
                + "and KODEPERKIRAAN like '11310%' "
                + "";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, tglAwal);
        ps.setString(2, tglAkhir);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            return rs.getDouble(1);
        }
        return 0;
    }

    private void pindahstokDOKeBarangStokTemp() throws SQLException {
        List<BarangstokTemp> list = BarangstokTempDao.getAllDetails(con);
        for (BarangstokTemp barangstokTemp : list) {
            int stok_do = getStokDO(tglStokDO.getText(), barangstokTemp.getKODEBARANG());
            if (stok_do > 0) {
                barangstokTemp.setSTOKDO(stok_do);
                BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
            }
        }
    }

    private void prosesUpdateKoreksi() throws SQLException {
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
            BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, txtKodebarangKoreksi.getText());
            barangstokTemp.setCOGS(Double.parseDouble(ftModalBaruKoreksi.getValue().toString()));
            BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
            JOptionPane.showMessageDialog(this, "Update Koreksi Modal Ok");
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
            BarangstokTemp barangstokTemp = BarangstokTempDao.getDetailKodeBarang(con, kodebarangKoreksi);
            barangstokTemp.setSTOK(stokBaru);
            BarangstokTempDao.updateBARANGSTOK(con, barangstokTemp);
        }
    }

    double getPersediaan(int jumlah, int jumlahbaru, double harga) {
        double tot = 0;
        tot = Math.abs(jumlahbaru - jumlah) * harga;
        return tot;
    }

    double getPersediaanHarga(int jumlah, double hargalama, double hargabaru) {
        double tot = 0;
        tot = Math.abs(hargabaru - hargalama) * jumlah;
        return tot;
    }

    private String hapusBatas(String angka) {
        String hasil = "";
        for (int i = 0; i < angka.length(); i++) {
            if (angka.charAt(i) == '.' || angka.charAt(i) == ',') {
                continue;
            } else {
                hasil += angka.charAt(i);
            }
        }
        return hasil;
    }

    private void reloadStok() {
        try {
            JDBCAdapter j = new JDBCAdapter(con);
            j.executeQuery("select * from stok where IDPENJUALAN=" + getValueTable(tabel, tabel.getSelectedRow(), 0) + " and KODETRANS='" + getValueTable(tabel, tabel.getSelectedRow(), 2) + "'");
            tabelMaster.setModel(j);
            j.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void tampil3() throws SQLException, ClassNotFoundException {
        if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("B")) {
            beli = pembelianDao.getDetailWithRinci(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal1(beli);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
            hpp1.setValue(0);
            hpp2.setValue(0);

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("J")) {
            penjualanDao jualDao = new penjualanDao();
            jual = jualDao.getDetails(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal1(jual);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("K")) {
            returbeli = returbeliDao.getReturBeli(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal1(returbeli);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());

        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("R")) {
            returjual = returDao.getRetur(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal1(returjual);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("KM")) {
            jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(tabel.getValueAt(tabel.getSelectedRow(), 0).toString()));
            j = susunJurnal1(jurnal);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
        } else if (getValueTable(tabel, tabel.getSelectedRow(), 2).toString().equals("Z")) {
            jurnal = jurnalDao.getJurnalKode(con, Integer.parseInt(getValueTable(tabelJurnal, tabelJurnal.getSelectedRow(), 0).toString()));
            j = susunJurnal1(jurnal);
            setTabelJurnalRinciTemp(j);
            debet2.setValue(j.getDebet());
            kredit2.setValue(j.getKredit());
        }
    }

    private void reloadJurnal(String tanggal, String kodebarang) {
        String sql = "select * from jurnal j "
                + "where tanggal='" + tanggal + "' and right(DESKRIPSI,5)='" + kodebarang + "'  order by id";
        JDBCAdapter j = new JDBCAdapter(con);
        j.executeQuery(sql);
        tabelJurnal.setModel(j);
        try {
            j.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormUtility.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean cekStokPeriode() throws SQLException {
        String periode1 = txtTahun.getText() + "." + cboBulan.getSelectedIndex();
        String sql = "select * from STOKPERIODE "
                + "left join barangstoktemp on  STOKPERIODE.KODEBARANG = barangstoktemp.KODEBARANG "
                + "where PERIODE = '" + periode1 + "' and barangstoktemp.KODEBARANG is not null and STOKPERIODE.jumlah <> barangstoktemp.stok "
                + "";
        Statement stat = con.createStatement();
        ResultSet rs = stat.executeQuery(sql);
        if (rs.next()) {
            return true;
        }
        return false;
    }

    private boolean cekBarangStokTempDo() throws SQLException {
        String sql = "select * from barangstoktemp "
                + "where barangstoktemp.stokdo<0 "
                + "";
        Statement stat = con.createStatement();
        ResultSet rs = stat.executeQuery(sql);
        if (rs.next()) {
            return true;
        }
        return false;
    }

    public class PersediaanTemp {

        private String tanggal;
        private double persediaan;
        private double debet;
        private double kredit;

        public PersediaanTemp() {
        }

        public PersediaanTemp(String tanggal, double persediaan, double debet, double kredit) {
            this.tanggal = tanggal;
            this.persediaan = persediaan;
            this.debet = debet;
            this.kredit = kredit;
        }

        public PersediaanTemp getPersediaanTemp(Connection con) throws SQLException {
            String sql = "select * from persediaanTemp";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                tanggal = rs.getString(1);
                persediaan = rs.getDouble(2);
                debet = rs.getDouble(3);
                kredit = rs.getDouble(4);
                return this;
            }
            return null;
        }

        public void delete() throws SQLException {
            String sql = "delete from persediaantemp";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.execute();
        }

        public void insert() throws SQLException {
            String sql1 = "insert into persediaantemp values(?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(sql1);
            ps.setString(1, tanggal);
            ps.setDouble(2, persediaan);
            ps.setDouble(3, debet);
            ps.setDouble(4, kredit);
            ps.execute();
        }

        public String getTanggal() {
            return tanggal;
        }

        public void setTanggal(String tanggal) {
            this.tanggal = tanggal;
        }

        public double getPersediaan() {
            return persediaan;
        }

        public void setPersediaan(double persediaan) {
            this.persediaan = persediaan;
        }

        public double getDebet() {
            return debet;
        }

        public void setDebet(double debet) {
            this.debet = debet;
        }

        public double getKredit() {
            return kredit;
        }

        public void setKredit(double kredit) {
            this.kredit = kredit;
        }

    }
}
